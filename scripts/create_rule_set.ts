import { Command } from \'commander\';\nimport { createClient } from \'@supabase/supabase-js\';\nimport dotenv from \'dotenv\';\nimport path from \'path\';\nimport fs from \'fs\';\n\n// Load environment variables from .env.local\ndotenv.config({ path: path.resolve(process.cwd(), \'.env.local\') });\n\nconst program = new Command();\n\nprogram\n  .name(\'create-rule-set\')\n  .description(\'CLI tool to insert or update a Guardian rule set in Supabase\')\n  .requiredOption(\'-n, --name <name>\', \'Name of the rule set (e.g., \\\'high-risk-merchants\\\')\')\n  .requiredOption(\'-f, --file <path>\', \'Path to the JSON file containing the rule set configuration\')\n  .option(\'-u, --update\', \'Update the rule set if a set with the same name already exists\')\n  .parse(process.argv);\n\nconst options = program.opts();\n\n// --- Supabase Client ---\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  console.error(\'Error: Supabase URL or Service Role Key not found in environment variables.\');\n  console.error(\'Ensure NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are set in .env.local\');\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n// --- Main Logic ---\nasync function main() {\n  console.log(`Processing rule set \'${options.name}\' from file \'${options.file}\'...\`);\n\n  // 1. Read and parse the JSON file\n  let configJson: object;\n  try {\n    const filePath = path.resolve(process.cwd(), options.file);\n    const fileContent = fs.readFileSync(filePath, \'utf-8\');\n    configJson = JSON.parse(fileContent);\n    console.log(\'Successfully parsed JSON config file.\');\n  } catch (error: any) {\n    console.error(`Error reading or parsing JSON file at ${options.file}:`, error.message);\n    process.exit(1);\n  }\n\n  // 2. Prepare data for upsert\n  const ruleSetData = {\n    name: options.name,\n    config: configJson,\n  };\n\n  // 3. Insert or Update in Supabase\n  try {\n    let resultData: any;\n    let resultError: any;\n\n    if (options.update) {\n      console.log(`Attempting to update rule set \'${options.name}\'...`);\n      const { data, error } = await supabase\n        .from(\'rule_sets\')\n        .update(ruleSetData)\n        .eq(\'name\', options.name)\n        .select(\'id, name, updated_at\')\n        .single();\n      resultData = data;\n      resultError = error;\n      if (error && error.code !== \'PGRST116\') { // Ignore \'No rows found\' error for update unless specified\n         throw error;\n      }\n       if (!data && !error) {\n         console.warn(`Warning: Rule set \'${options.name}\' not found for updating. Use insert without --update?`)\n         process.exit(0)\n       }\n\n    } else {\n      console.log(`Attempting to insert rule set \'${options.name}\'...`);\n      const { data, error } = await supabase\n        .from(\'rule_sets\')\n        .insert(ruleSetData)\n        .select(\'id, name, created_at\')\n        .single();\n      resultData = data;\n      resultError = error;\n       if (error) throw error;\n    }\n\n    if (resultData) {\n      console.log(\'\\n✅ Success!\');\n      console.log(`Rule Set Name: ${resultData.name}`);\n      console.log(`Rule Set ID:   ${resultData.id}`);\n      if (options.update) {\n        console.log(`Updated At:    ${resultData.updated_at}`);\n      } else {\n        console.log(`Created At:    ${resultData.created_at}`);\n      }\n      console.log(\'\\nUse the Rule Set ID above to link accounts via connected_accounts.rule_set_id.\');\n    } else if (!options.update) {\n        // Should have thrown error if insert failed\n         console.error(\'\\n❌ Insert operation did not return data, but no error reported.\');\n    }\n\n  } catch (error: any) {\n    console.error(\'\\n❌ Supabase operation failed:\');\n    console.error(`Code: ${error.code || \'N/A\'}`);\n    console.error(`Message: ${error.message}`);\n    console.error(`Details: ${error.details || \'N/A\'}`);\n    console.error(`Hint: ${error.hint || \'N/A\'}`);\n    if (error.code === \'23505\') { // unique_violation\n        console.error(`\\nHint: A rule set with the name \'${options.name}\' might already exist. Use --update flag to overwrite.`);\n    }\n    process.exit(1);\n  }\n}\n\nmain(); 