[{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/callback/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6104,6107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6104,6107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { stripe } from '@/lib/stripe'; // Assuming stripe client is configured\nimport { getErrorRedirect, getStatusRedirect } from '@/utils/helpers'; // Assumed helpers\nimport { Database } from '@/types/supabase'; // Assuming generated types\nimport { createAdminClient } from '@/lib/supabase/admin'; // Assuming admin client for inserts\nimport { createWebhookIfMissing } from '@/lib/stripe/webhooks';\nimport { enqueueBackfill } from '@/lib/guardian/backfill';\n\n// TODO: Import actual functions when created\n// import { enqueueBackfill } from '@/lib/guardian/backfill';\n\nexport async function GET(request: NextRequest) {\n  const requestUrl = new URL(request.url);\n  const code = requestUrl.searchParams.get('code');\n  const error = requestUrl.searchParams.get('error');\n  const errorDescription = requestUrl.searchParams.get('error_description');\n\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: { get: (name) => cookieStore.get(name)?.value } },\n  );\n\n  // 1. Handle OAuth errors from Stripe\n  if (error) {\n    console.error(`Stripe OAuth Error: ${error} - ${errorDescription}`);\n    return NextResponse.redirect(getErrorRedirect(requestUrl.origin, error, errorDescription));\n  }\n\n  // 2. Handle missing code\n  if (!code) {\n    console.error('Missing OAuth code in callback');\n    return NextResponse.redirect(\n      getErrorRedirect(requestUrl.origin, 'OAuth Error', 'No code returned from Stripe.'),\n    );\n  }\n\n  try {\n    // 3. Exchange code for tokens\n    console.log('Exchanging OAuth code for Stripe tokens...');\n    const response = await stripe.oauth.token({\n      grant_type: 'authorization_code',\n      code: code,\n    });\n    console.log('Stripe token exchange successful:', response.stripe_user_id);\n\n    const stripeAccountId = response.stripe_user_id;\n    const refreshToken = response.refresh_token; // Store securely!\n    const accessToken = response.access_token; // Store securely!\n    const scope = response.scope;\n\n    if (!stripeAccountId) {\n      throw new Error('Stripe account ID not found in OAuth response.');\n    }\n\n    // 4. Get Supabase User\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n    if (userError || !user) {\n      console.error('Error fetching user:', userError);\n      return NextResponse.redirect(\n        getErrorRedirect(requestUrl.origin, 'Authentication Error', 'Could not get user session.'),\n      );\n    }\n    console.log('Supabase user found:', user.id);\n\n    // Use Admin client for DB operations from server-side route\n    const supabaseAdmin = createAdminClient();\n\n    // 5. Check account limit (<= 2)\n    console.log(`Checking account limit for user ${user.id}...`);\n    const { count, error: countError } = await supabaseAdmin\n      .from('stripe_accounts') // Assuming this table exists\n      .select('id', { count: 'exact', head: true })\n      .eq('user_id', user.id);\n\n    if (countError) {\n      console.error('Error counting Stripe accounts:', countError);\n      throw new Error('Could not verify account limit.'); // Internal error\n    }\n\n    const MAX_ACCOUNTS = 2;\n    if (count !== null && count >= MAX_ACCOUNTS) {\n      console.warn(`User ${user.id} has reached account limit (${count}/${MAX_ACCOUNTS}).`);\n      return NextResponse.redirect(\n        getErrorRedirect(\n          requestUrl.origin,\n          'Account Limit Reached',\n          `You can connect a maximum of ${MAX_ACCOUNTS} Stripe accounts.`,\n          '/dashboard', // Redirect back to dashboard or settings\n        ),\n      );\n    }\n    console.log(`User ${user.id} has ${count ?? 0} accounts, proceeding.`);\n\n    // 6. Insert/Update Stripe Account Info (encrypt tokens!)\n    const keyId = process.env.SODIUM_ENCRYPTION_KEY_ID;\n    if (!keyId) {\n      console.error('SODIUM_ENCRYPTION_KEY_ID is not set in environment variables.');\n      throw new Error('Server configuration error for encryption.');\n    }\n\n    console.log(`Upserting Stripe account ${stripeAccountId} for user ${user.id}...`);\n    // We need to use raw SQL for encryption as Supabase client doesn't directly support pgsodium bytea functions yet.\n    // Note: Ensure pgsodium is enabled and the key referenced by keyId exists.\n    const { error: upsertError } = await supabaseAdmin.rpc('upsert_stripe_account', {\n      p_user_id: user.id,\n      p_stripe_account_id: stripeAccountId,\n      p_scope: scope,\n      p_refresh_token: refreshToken, // Pass plaintext to function\n      p_access_token: accessToken, // Pass plaintext to function\n      p_key_id: keyId,\n    });\n\n    // We need to define the upsert_stripe_account SQL function in a migration\n    // This function will handle the encryption using pgsodium.crypto_aead_det_encrypt\n\n    if (upsertError) {\n      console.error('Error upserting Stripe account:', upsertError);\n      throw new Error(`Failed to save Stripe account details: ${upsertError.message}`);\n    }\n    console.log(`Successfully upserted Stripe account ${stripeAccountId}`);\n\n    // 7. Provision Webhook\n    console.log(`Provisioning webhook for account ${stripeAccountId}...`);\n    await createWebhookIfMissing(stripeAccountId);\n    console.log(`Webhook provisioning step completed for ${stripeAccountId}.`);\n\n    // 8. Enqueue Backfill & Create initial status record\n    console.log(`Enqueueing backfill for account ${stripeAccountId}...`);\n    await enqueueBackfill(user.id, stripeAccountId);\n    console.log(`Backfill enqueue step completed for ${stripeAccountId}.`);\n\n    // 9. Redirect on success\n    console.log(`Redirecting to dashboard for user ${user.id}, account ${stripeAccountId}`);\n    return NextResponse.redirect(\n      getStatusRedirect(\n        requestUrl.origin,\n        'Stripe Account Connected',\n        `Successfully connected ${stripeAccountId}. Historical data back-fill initiated.`,\n      ),\n    );\n  } catch (err: any) {\n    console.error('Error during Stripe OAuth callback:', err);\n    const message = err.message || 'An unexpected error occurred during Stripe Connect.';\n    return NextResponse.redirect(getErrorRedirect(requestUrl.origin, 'Connection Failed', message));\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/ApiKeysManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":80,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":17},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":132,"column":110,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5509,5620],"text":"\n                                This action cannot be undone. This will permanently revoke the API key named &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5509,5620],"text":"\n                                This action cannot be undone. This will permanently revoke the API key named &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5509,5620],"text":"\n                                This action cannot be undone. This will permanently revoke the API key named &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5509,5620],"text":"\n                                This action cannot be undone. This will permanently revoke the API key named &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":132,"column":121,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5630,5661],"text":"&quot;.\n                            "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5630,5661],"text":"&ldquo;.\n                            "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5630,5661],"text":"&#34;.\n                            "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5630,5661],"text":"&rdquo;.\n                            "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":170,"column":98,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7319,7473],"text":"\n                                Your new API key has been created. Please copy it now, as you won&apos;t be able to see it again.\n                            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7319,7473],"text":"\n                                Your new API key has been created. Please copy it now, as you won&lsquo;t be able to see it again.\n                            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7319,7473],"text":"\n                                Your new API key has been created. Please copy it now, as you won&#39;t be able to see it again.\n                            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7319,7473],"text":"\n                                Your new API key has been created. Please copy it now, as you won&rsquo;t be able to see it again.\n                            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useTransition, ChangeEvent } from 'react';\nimport { toast } from 'sonner';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n    Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger, DialogClose\n} from \"@/components/ui/dialog\";\nimport { \n    AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger\n} from \"@/components/ui/alert-dialog\";\nimport { \n    Table, TableBody, TableCell, TableHead, TableHeader, TableRow\n} from \"@/components/ui/table\";\nimport { Label } from \"@/components/ui/label\";\nimport { Trash2, PlusCircle, Copy } from 'lucide-react';\nimport { ApiKeyInfo } from '@/lib/supabase/user'; // Import type\nimport { \n    generateApiKeyServerAction, \n    revokeApiKeyServerAction \n} from './actions'; // Import the real server actions\n\ninterface ApiKeysManagerProps {\n  initialApiKeys: ApiKeyInfo[];\n}\n\nexport function ApiKeysManager({ initialApiKeys }: ApiKeysManagerProps) {\n  const [apiKeys, setApiKeys] = useState<ApiKeyInfo[]>(initialApiKeys);\n  const [newKeyName, setNewKeyName] = useState('');\n  const [generatedKey, setGeneratedKey] = useState<string | null>(null);\n  const [isGenerating, startGeneratingTransition] = useTransition();\n  const [isRevoking, startRevokingTransition] = useTransition();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n\n  const handleGenerateKey = () => {\n    if (!newKeyName.trim()) {\n        toast.error('Please enter a name for the API key.');\n        return;\n    }\n    startGeneratingTransition(async () => {\n        const formData = new FormData();\n        formData.append('keyName', newKeyName);\n        const result = await generateApiKeyServerAction(formData);\n\n        if (result.success && result.apiKey) {\n            toast.success('API Key generated successfully!');\n            setGeneratedKey(result.apiKey);\n            // Optimistically add (or wait for re-fetch/invalidation)\n            // For simplicity, let's assume revalidation will handle list update\n            // Or manually refetch profile data here\n            setNewKeyName(''); // Clear input\n            // Keep dialog open to show the key\n        } else {\n            toast.error(`Error generating API key: ${result.error || 'Unknown error'}`);\n            setIsCreateDialogOpen(false); // Close dialog on error\n        }\n    });\n  };\n\n   const handleRevokeKey = (keyId: string) => {\n    startRevokingTransition(async () => {\n        const formData = new FormData();\n        formData.append('keyId', keyId);\n        const result = await revokeApiKeyServerAction(formData);\n\n        if (result.success) {\n            toast.success('API Key revoked successfully!');\n            // Optimistically remove from local state\n            setApiKeys(currentKeys => currentKeys.filter(key => key.id !== keyId));\n        } else {\n            toast.error(`Error revoking API key: ${result.error || 'Unknown error'}`);\n        }\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n      .then(() => toast.success('API Key copied to clipboard!'))\n      .catch(err => toast.error('Failed to copy key.'));\n  };\n\n  const closeCreateDialog = () => {\n      setIsCreateDialogOpen(false);\n      setGeneratedKey(null); // Clear generated key when dialog closes\n      setNewKeyName('');\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key List */}\n      <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n                <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Prefix</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n            </TableHeader>\n            <TableBody>\n                {apiKeys.length === 0 && (\n                    <TableRow>\n                        <TableCell colSpan={4} className=\"h-24 text-center text-muted-foreground\">\n                        No API keys created yet.\n                        </TableCell>\n                    </TableRow>\n                )}\n                {apiKeys.map((key) => (\n                <TableRow key={key.id}>\n                    <TableCell className=\"font-medium\">{key.name}</TableCell>\n                    <TableCell>{key.prefix}****</TableCell> {/* Show prefix only */}\n                    <TableCell>{new Date(key.created_at).toLocaleDateString()}</TableCell>\n                    <TableCell className=\"text-right\">\n                    {/* Revoke Button with Confirmation */}\n                    <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                             <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                disabled={isRevoking} \n                                aria-label={`Revoke key ${key.name}`}\n                             >\n                                <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                            <AlertDialogHeader>\n                            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                                This action cannot be undone. This will permanently revoke the API key named \"{key.name}\".\n                            </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction \n                                onClick={() => handleRevokeKey(key.id)} \n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\" \n                                disabled={isRevoking}\n                            >\n                                {isRevoking ? 'Revoking...' : 'Revoke Key'}\n                            </AlertDialogAction>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialog>\n                    </TableCell>\n                </TableRow>\n                ))}\n            </TableBody>\n        </Table>\n      </div>\n\n      {/* Create Key Button & Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n                <Button disabled={isGenerating}>\n                    <PlusCircle className=\"mr-2 h-4 w-4\" /> Create New API Key\n                </Button>\n            </DialogTrigger>\n            <DialogContent onInteractOutside={(e) => { \n                // Prevent closing if we just generated a key to show\n                if (generatedKey) e.preventDefault(); \n            }}>\n                 {generatedKey ? (\n                    <>\n                        <DialogHeader>\n                            <DialogTitle>API Key Generated</DialogTitle>\n                            <DialogDescription>\n                                Your new API key has been created. Please copy it now, as you won't be able to see it again.\n                            </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"flex items-center space-x-2 mt-4 bg-muted p-3 rounded-md\">\n                            <Input \n                                id=\"new-api-key\" \n                                value={generatedKey} \n                                readOnly \n                                className=\"flex-1 font-mono text-sm\"\n                            />\n                            <Button type=\"button\" size=\"sm\" onClick={() => copyToClipboard(generatedKey)}>\n                                <Copy className=\"h-4 w-4\" />\n                            </Button>\n                        </div>\n                        <DialogFooter>\n                             <Button variant=\"outline\" onClick={closeCreateDialog}>Close</Button>\n                        </DialogFooter>\n                    </>\n                 ) : (\n                    <>\n                        <DialogHeader>\n                            <DialogTitle>Create New API Key</DialogTitle>\n                            <DialogDescription>\n                                Give your new API key a descriptive name.\n                            </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"key-name\" className=\"text-right\">\n                                Name\n                            </Label>\n                            <Input \n                                id=\"key-name\" \n                                value={newKeyName} \n                                onChange={(e: ChangeEvent<HTMLInputElement>) => setNewKeyName(e.target.value)} \n                                className=\"col-span-3\"\n                                placeholder=\"e.g., My Production Server\"\n                                disabled={isGenerating}\n                             />\n                            </div>\n                        </div>\n                        <DialogFooter>\n                             <DialogClose asChild>\n                                <Button type=\"button\" variant=\"outline\" disabled={isGenerating}>Cancel</Button>\n                            </DialogClose>\n                            <Button type=\"button\" onClick={handleGenerateKey} disabled={isGenerating || !newKeyName.trim()}>\n                                {isGenerating ? 'Generating...' : 'Generate Key'}\n                            </Button>\n                        </DialogFooter>\n                    </>\n                 )}\n            </DialogContent>\n        </Dialog>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/PasswordForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useTransition } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { toast } from 'sonner';\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n    Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage \n} from \"@/components/ui/form\";\nimport { updatePasswordServerAction } from './actions'; // Import the real server action\n\n// Server Action placeholder removed\n\n// Zod schema for validation\nconst passwordSchema = z.object({\n  // Note: Supabase handles current password verification internally during updateUser\n  // currentPassword: z.string().min(1, 'Current password is required.'),\n  newPassword: z.string()\n    .min(12, 'Password must be at least 12 characters long.')\n    .regex(/[0-9]/, 'Password must contain at least one number.')\n    .regex(/[^a-zA-Z0-9]/, 'Password must contain at least one symbol.'),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"], // Error applies to the confirmation field\n});\n\ntype PasswordFormValues = z.infer<typeof passwordSchema>;\n\nexport function PasswordForm() {\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<PasswordFormValues>({\n    resolver: zodResolver(passwordSchema),\n    defaultValues: {\n      // currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<PasswordFormValues> = (data) => {\n    startTransition(async () => {\n        const formData = new FormData();\n        formData.append('newPassword', data.newPassword);\n\n        // Use the imported server action\n        const result = await updatePasswordServerAction(formData);\n\n        if (result.success) {\n            toast.success('Password updated successfully!');\n            form.reset(); // Clear form on success\n        } else {\n            toast.error(`Error updating password: ${result.error || 'Unknown error'}`);\n        }\n    });\n  };\n\n  return (\n    <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n           {/* Current password field removed - Supabase handles this inherently */}\n            <FormField\n            control={form.control}\n            name=\"newPassword\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>New Password</FormLabel>\n                <FormControl>\n                    <Input type=\"password\" placeholder=\"••••••••••••\" {...field} disabled={isPending} />\n                </FormControl>\n                <FormDescription>\n                    Must be at least 12 characters, including a number and a symbol.\n                </FormDescription>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n\n            <FormField\n            control={form.control}\n            name=\"confirmPassword\"\n            render={({ field }) => (\n                <FormItem>\n                <FormLabel>Confirm New Password</FormLabel>\n                <FormControl>\n                    <Input type=\"password\" placeholder=\"••••••••••••\" {...field} disabled={isPending} />\n                </FormControl>\n                <FormMessage />\n                </FormItem>\n            )}\n            />\n\n            <Button type=\"submit\" disabled={isPending || !form.formState.isDirty}>\n                {isPending ? 'Updating...' : 'Update Password'}\n            </Button>\n        </form>\n    </Form>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/ProfileForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useTransition } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { toast } from 'sonner';\n\nimport { Profile } from '@/lib/supabase/user'; // Import type\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { updateProfileServerAction } from './actions'; // Import the real server action\n\n// Server Action placeholder removed\n\n// Zod schema for validation\nconst profileSchema = z.object({\n  display_name: z\n    .string()\n    .max(50, 'Display name must be 50 characters or less.')\n    .optional()\n    .or(z.literal('')),\n  avatar_url: z.string().url('Please enter a valid URL.').optional().or(z.literal('')),\n});\n\ntype ProfileFormValues = z.infer<typeof profileSchema>;\n\ninterface ProfileFormProps {\n  // Allow profile to be null\n  profile: Profile | null;\n}\n\nexport function ProfileForm({ profile }: ProfileFormProps) {\n  const [isPending, startTransition] = useTransition();\n\n  const form = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileSchema),\n    // Use profile data for defaults only if profile exists\n    defaultValues: {\n      display_name: profile?.display_name ?? '',\n      avatar_url: profile?.avatar_url ?? '',\n    },\n  });\n\n  const onSubmit: SubmitHandler<ProfileFormValues> = (data) => {\n    startTransition(async () => {\n      const formData = new FormData();\n      formData.append('display_name', data.display_name || '');\n      formData.append('avatar_url', data.avatar_url || '');\n\n      // Use the imported server action\n      const result = await updateProfileServerAction(formData);\n\n      if (result.success) {\n        toast.success('Profile updated successfully!');\n      } else {\n        toast.error(`Error updating profile: ${result.error || 'Unknown error'}`);\n      }\n    });\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"display_name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Display Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Your display name\" {...field} disabled={isPending} />\n              </FormControl>\n              <FormDescription>This will be shown publicly on the platform.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"avatar_url\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Avatar URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://...\" {...field} disabled={isPending} />\n              </FormControl>\n              <FormDescription>Enter the URL of your desired avatar image.</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <Button type=\"submit\" disabled={isPending || !form.formState.isDirty}>\n          {isPending ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/ThemeSwitcher.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useTransition, useEffect } from 'react';\nimport { useTheme } from 'next-themes';\nimport { toast } from 'sonner';\nimport { Button } from \"@/components/ui/button\";\nimport {\n  RadioGroup,\n  RadioGroupItem,\n} from \"@/components/ui/radio-group\"\nimport { Label } from \"@/components/ui/label\";\nimport { updateThemeServerAction } from './actions'; // Import the real server action\n\ninterface ThemeSwitcherProps {\n  currentTheme: string; // Passed from server component\n}\n\nexport function ThemeSwitcher({ currentTheme }: ThemeSwitcherProps) {\n  const { setTheme, theme: activeTheme } = useTheme();\n  const [isPending, startTransition] = useTransition();\n  // Use state to manage the radio group value, synced with next-themes\n  const [selectedValue, setSelectedValue] = useState(currentTheme);\n\n  useEffect(() => {\n      // Sync local state if next-themes value changes (e.g., via system change)\n      setSelectedValue(activeTheme ?? 'system');\n  }, [activeTheme]);\n\n  const handleThemeChange = (value: string) => {\n    if (!value) return;\n    setSelectedValue(value); // Update local state immediately for visual feedback\n    setTheme(value); // Update next-themes immediately\n\n    startTransition(async () => {\n        const formData = new FormData();\n        formData.append('theme', value);\n        const result = await updateThemeServerAction(formData);\n\n        if (!result.success) {\n            toast.error(`Error saving theme preference: ${result.error || 'Unknown error'}`);\n            // Revert might be complex if user changes multiple times quickly\n        } else {\n             toast.success('Theme preference saved.');\n        }\n    });\n  };\n\n  return (\n    // Removed form wrapper, action called directly\n    <RadioGroup \n        value={selectedValue} // Control the value via state\n        onValueChange={handleThemeChange}\n        className=\"flex flex-col space-y-1\"\n        disabled={isPending}\n    >\n        <div className=\"flex items-center space-x-3 space-y-0\">\n            <RadioGroupItem value=\"light\" id=\"theme-light\" />\n            <Label htmlFor=\"theme-light\" className=\"font-normal\">Light</Label>\n        </div>\n        <div className=\"flex items-center space-x-3 space-y-0\">\n            <RadioGroupItem value=\"dark\" id=\"theme-dark\" />\n            <Label htmlFor=\"theme-dark\" className=\"font-normal\">Dark</Label>\n        </div>\n        <div className=\"flex items-center space-x-3 space-y-0\">\n            <RadioGroupItem value=\"system\" id=\"theme-system\" />\n            <Label htmlFor=\"theme-system\" className=\"font-normal\">System</Label>\n        </div>\n    </RadioGroup>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/accounts/accounts-client.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { createClient } from '@/utils/supabase/client';\nimport { toast } from 'sonner';\nimport { RefreshCcw, Trash2, AlertCircle, ShieldAlert } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { RuleSetEditor } from '@/components/accounts/RuleSetEditor';\n\ninterface Account {\n  id: number;\n  stripe_account_id: string;\n  business_name: string | null;\n  live: boolean;\n  webhook_secret: string | null;\n  created_at: string;\n  rule_set: Record<string, unknown> | null;\n  alert_channels: {\n    auto_pause: boolean;\n  } | null;\n}\n\nexport default function AccountsClient({ initialAccounts }: { initialAccounts: Account[] }) {\n  const [accounts, setAccounts] = useState<Account[]>(initialAccounts);\n  const [loadingStates, setLoadingStates] = useState<Record<string, boolean>>({});\n  const supabase = createClient();\n\n  // Set up real-time subscription\n  useEffect(() => {\n    const channel = supabase.channel('ca-changes')\n      .on('postgres_changes', \n          { event: '*', schema: 'public', table: 'connected_accounts' }, \n          payload => {\n            // Update accounts when changes occur\n            if (payload.eventType === 'UPDATE' && payload.new) {\n              setAccounts(currentAccounts => \n                currentAccounts.map(account => \n                  account.stripe_account_id === (payload.new as Account).stripe_account_id \n                    ? { ...account, ...payload.new as Account } \n                    : account\n                )\n              );\n            } else if (payload.eventType === 'DELETE' && payload.old) {\n              setAccounts(currentAccounts => \n                currentAccounts.filter(account => \n                  account.stripe_account_id !== (payload.old as Account).stripe_account_id\n                )\n              );\n            }\n          })\n      .subscribe();\n\n    // Also subscribe to alert_channels changes\n    const alertChannel = supabase.channel('alert-changes')\n      .on('postgres_changes', \n          { event: 'UPDATE', schema: 'public', table: 'alert_channels' }, \n          payload => {\n            if (payload.new && payload.new.stripe_account_id) {\n              setAccounts(currentAccounts => \n                currentAccounts.map(account => \n                  account.stripe_account_id === payload.new.stripe_account_id\n                    ? { \n                        ...account, \n                        alert_channels: { \n                          ...account.alert_channels, \n                          auto_pause: payload.new.auto_pause \n                        } \n                      } \n                    : account\n                )\n              );\n            }\n          })\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n      supabase.removeChannel(alertChannel);\n    };\n  }, [supabase]);\n\n  // Toggle auto-pause setting\n  const toggleAutoPause = async (accountId: string, currentValue: boolean) => {\n    setLoadingStates(prev => ({ ...prev, [accountId]: true }));\n    \n    try {\n      const { error } = await supabase\n        .from('alert_channels')\n        .update({ auto_pause: !currentValue })\n        .eq('stripe_account_id', accountId);\n      \n      if (error) throw error;\n      \n      toast.success(`Auto-pause ${!currentValue ? 'enabled' : 'disabled'}`);\n    } catch (error) {\n      console.error('Error updating auto-pause:', error);\n      toast.error('Failed to update auto-pause setting');\n    } finally {\n      setLoadingStates(prev => ({ ...prev, [accountId]: false }));\n    }\n  };\n\n  // Rotate webhook secret\n  const rotateWebhookSecret = async (accountId: string) => {\n    setLoadingStates(prev => ({ ...prev, [`rotate_${accountId}`]: true }));\n    \n    try {\n      const response = await fetch(`/api/accounts/${accountId}/webhook/rotate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      \n      toast.success('Webhook secret rotated successfully');\n    } catch (error) {\n      console.error('Error rotating webhook secret:', error);\n      toast.error('Failed to rotate webhook secret');\n    } finally {\n      setLoadingStates(prev => ({ ...prev, [`rotate_${accountId}`]: false }));\n    }\n  };\n\n  // Disconnect account\n  const disconnectAccount = async (accountId: string) => {\n    if (!confirm('Are you sure you want to disconnect this account? This action cannot be undone.')) {\n      return;\n    }\n    \n    setLoadingStates(prev => ({ ...prev, [`disconnect_${accountId}`]: true }));\n    \n    try {\n      const response = await fetch(`/api/accounts/${accountId}/disconnect`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      \n      // Remove from local state (even though realtime will update it)\n      setAccounts(accounts.filter(a => a.stripe_account_id !== accountId));\n      toast.success('Account disconnected successfully');\n    } catch (error) {\n      console.error('Error disconnecting account:', error);\n      toast.error('Failed to disconnect account');\n    } finally {\n      setLoadingStates(prev => ({ ...prev, [`disconnect_${accountId}`]: false }));\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {accounts.map(account => (\n        <Card key={account.stripe_account_id} className=\"overflow-hidden\">\n          <CardHeader className=\"bg-slate-50 pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg\">\n                  {account.business_name || account.stripe_account_id}\n                </CardTitle>\n                <CardDescription className=\"text-xs mt-1\">\n                  {account.stripe_account_id} · Connected {formatDistanceToNow(new Date(account.created_at), { addSuffix: true })}\n                </CardDescription>\n              </div>\n              \n              <div className=\"flex items-center\">\n                <Badge className={account.live ? 'bg-emerald-100 text-emerald-800' : 'bg-purple-100 text-purple-800'}>\n                  {account.live ? 'Live Mode' : 'Test Mode'}\n                </Badge>\n                <RuleSetEditor accountId={account.stripe_account_id} ruleSet={account.rule_set} />\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <ShieldAlert className=\"h-4 w-4 text-amber-500\" />\n                  <Label htmlFor={`auto-pause-${account.stripe_account_id}`} className=\"font-medium\">\n                    Auto-pause payouts\n                  </Label>\n                </div>\n                <Switch\n                  id={`auto-pause-${account.stripe_account_id}`}\n                  checked={account.alert_channels?.auto_pause || false}\n                  disabled={loadingStates[account.stripe_account_id]}\n                  onCheckedChange={() => toggleAutoPause(\n                    account.stripe_account_id, \n                    account.alert_channels?.auto_pause || false\n                  )}\n                />\n              </div>\n              \n              <p className=\"text-sm text-slate-500\">\n                When enabled, payouts will be automatically paused when high-severity fraud alerts are detected.\n              </p>\n            </div>\n          </CardContent>\n          \n          <CardFooter className=\"flex justify-between border-t bg-slate-50 px-6 py-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => rotateWebhookSecret(account.stripe_account_id)}\n              disabled={loadingStates[`rotate_${account.stripe_account_id}`]}\n            >\n              <RefreshCcw className={`h-4 w-4 mr-2 ${loadingStates[`rotate_${account.stripe_account_id}`] ? 'animate-spin' : ''}`} />\n              {loadingStates[`rotate_${account.stripe_account_id}`] ? 'Rotating...' : 'Rotate Webhook Secret'}\n            </Button>\n            \n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => disconnectAccount(account.stripe_account_id)}\n              disabled={loadingStates[`disconnect_${account.stripe_account_id}`]}\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              {loadingStates[`disconnect_${account.stripe_account_id}`] ? 'Disconnecting...' : 'Disconnect Account'}\n            </Button>\n          </CardFooter>\n        </Card>\n      ))}\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/accounts/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/accounts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/accounts/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/connected-accounts/ConnectedAccountsManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle2' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":53,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used. Allowed unused args must match /^_/u.","line":238,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":567,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[24657,24956],"text":"\n                            Stops Stripe from automatically sending funds to your bank. Guardian may\n                            turn this off automatically when fraud is suspected. You can resume\n                            payouts once you&apos;ve reviewed the transactions.\n                          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[24657,24956],"text":"\n                            Stops Stripe from automatically sending funds to your bank. Guardian may\n                            turn this off automatically when fraud is suspected. You can resume\n                            payouts once you&lsquo;ve reviewed the transactions.\n                          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[24657,24956],"text":"\n                            Stops Stripe from automatically sending funds to your bank. Guardian may\n                            turn this off automatically when fraud is suspected. You can resume\n                            payouts once you&#39;ve reviewed the transactions.\n                          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[24657,24956],"text":"\n                            Stops Stripe from automatically sending funds to your bank. Guardian may\n                            turn this off automatically when fraud is suspected. You can resume\n                            payouts once you&rsquo;ve reviewed the transactions.\n                          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useTransition, useEffect } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport {\n  linkStripeAccountServerAction,\n  disconnectStripeAccountServerAction,\n  resumePayoutsServerAction,\n  pausePayoutsServerAction,\n  toggleAlertsServerAction,\n} from './actions';\nimport { Button } from '@/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { toast } from 'sonner';\nimport { format, formatDistanceToNow } from 'date-fns';\nimport {\n  Loader2,\n  Trash2,\n  Copy,\n  PlusCircle,\n  Info,\n  BellOff,\n  Clock,\n  CheckCircle2,\n  AlertCircle,\n} from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { BackfillProgress } from '@/components/progress/BackfillProgress';\n\n// Define the structure of a connected account based on fetched data\ninterface ConnectedAccount {\n  id: string;\n  stripe_account_id: string;\n  business_name: string | null;\n  created_at: string;\n  payouts_paused: boolean;\n  paused_by: string | null;\n  paused_reason: string | null;\n  alerts_muted_until: string | null;\n}\n\nconst MUTE_OPTIONS = [\n  { value: '60', label: '1 Hour' },\n  { value: '360', label: '6 Hours' },\n  { value: '1440', label: '24 Hours' },\n  { value: 'infinity', label: 'Indefinitely' },\n];\n\nexport function ConnectedAccountsManager({\n  initialAccounts,\n}: {\n  initialAccounts: ConnectedAccount[];\n}) {\n  const [accounts, setAccounts] = useState<ConnectedAccount[]>(initialAccounts);\n  const [isLinking, startLinkTransition] = useTransition();\n  const [isDisconnecting, startDisconnectTransition] = useTransition();\n  const [isTogglingPayouts, startPayoutsToggleTransition] = useTransition();\n  const [togglingPayoutsAccountId, setTogglingPayoutsAccountId] = useState<string | null>(null);\n  const [accountToDisconnect, setAccountToDisconnect] = useState<string | null>(null);\n  const [muteDuration, setMuteDuration] = useState<string>('360');\n  const [isTogglingMute, startMuteToggleTransition] = useTransition();\n  const [togglingMuteAccountId, setTogglingMuteAccountId] = useState<string | null>(null);\n\n  const searchParams = useSearchParams();\n\n  // Update local state if initialAccounts changes (e.g., after revalidation)\n  useEffect(() => {\n    setAccounts(initialAccounts);\n  }, [initialAccounts]);\n\n  // Check for error flags from OAuth callback\n  useEffect(() => {\n    const error = searchParams.get('error');\n    if (error === 'duplicate_link') {\n      toast.error('This Stripe account is already linked.');\n      window.history.replaceState(null, '', '/settings/connected-accounts');\n    }\n  }, [searchParams]);\n\n  const handleAddAccount = () => {\n    startLinkTransition(async () => {\n      try {\n        const result = await linkStripeAccountServerAction();\n        if (result?.url) {\n          window.location.href = result.url;\n        } else {\n          toast.error('Could not start Stripe connection. Please try again.');\n        }\n      } catch (error) {\n        toast.error(error instanceof Error ? error.message : 'An unexpected error occurred.');\n      }\n    });\n  };\n\n  const handleDisconnect = (stripeAccountId: string) => {\n    startDisconnectTransition(async () => {\n      const previousAccounts = accounts;\n      setAccounts((prev) => prev.filter((acc) => acc.stripe_account_id !== stripeAccountId));\n      setAccountToDisconnect(null);\n      try {\n        await disconnectStripeAccountServerAction(stripeAccountId);\n        toast.success('Stripe account disconnected successfully.');\n      } catch (error) {\n        setAccounts(previousAccounts);\n        toast.error(error instanceof Error ? error.message : 'Could not disconnect account.');\n      }\n    });\n  };\n\n  const handleTogglePayouts = (account: ConnectedAccount) => {\n    setTogglingPayoutsAccountId(account.stripe_account_id);\n    startPayoutsToggleTransition(async () => {\n      const action = account.payouts_paused ? resumePayoutsServerAction : pausePayoutsServerAction;\n      const optimisticUpdate = !account.payouts_paused;\n      const previousAccounts = accounts;\n\n      // Optimistic UI Update\n      setAccounts((prev) =>\n        prev.map((acc) =>\n          acc.stripe_account_id === account.stripe_account_id\n            ? { ...acc, payouts_paused: optimisticUpdate }\n            : acc,\n        ),\n      );\n\n      try {\n        await action(account.stripe_account_id);\n        toast.success(`Payouts ${optimisticUpdate ? 'paused' : 'resumed'} successfully.`);\n        // Data will refresh via revalidatePath\n      } catch (error) {\n        setAccounts(previousAccounts); // Rollback optimistic update\n        toast.error(error instanceof Error ? error.message : 'Failed to update payout status.');\n      } finally {\n        setTogglingPayoutsAccountId(null);\n      }\n    });\n  };\n\n  const handleToggleMute = (account: ConnectedAccount) => {\n    setTogglingMuteAccountId(account.stripe_account_id);\n    startMuteToggleTransition(async () => {\n      const isCurrentlyMuted =\n        !!account.alerts_muted_until && new Date(account.alerts_muted_until) > new Date();\n      const action = isCurrentlyMuted ? 'unmute' : 'mute';\n      let durationMinutes: number | undefined = undefined;\n\n      if (action === 'mute') {\n        if (muteDuration === 'infinity') {\n          durationMinutes = Infinity;\n        } else {\n          durationMinutes = parseInt(muteDuration, 10);\n          if (isNaN(durationMinutes)) {\n            console.warn('Invalid mute duration selected, defaulting to 6 hours');\n            durationMinutes = 360; // Default if parse fails\n          }\n        }\n      }\n\n      const optimisticMutedUntil =\n        action === 'mute'\n          ? durationMinutes === Infinity\n            ? 'infinity'\n            : new Date(Date.now() + durationMinutes * 60000).toISOString()\n          : null;\n\n      // Optimistic UI update\n      const previousAccounts = accounts;\n      setAccounts((prev) =>\n        prev.map((acc) =>\n          acc.stripe_account_id === account.stripe_account_id\n            ? { ...acc, alerts_muted_until: optimisticMutedUntil }\n            : acc,\n        ),\n      );\n\n      try {\n        const result = await toggleAlertsServerAction({\n          stripeAccountId: account.stripe_account_id,\n          action,\n          durationMinutes: action === 'mute' ? durationMinutes : undefined,\n        });\n\n        if (result.success) {\n          toast.success(`Alerts ${action === 'mute' ? 'muted' : 'unmuted'} successfully.`);\n          // Update with the exact value from the server if different (e.g., due to default fallback)\n          setAccounts((prev) =>\n            prev.map((acc) =>\n              acc.stripe_account_id === account.stripe_account_id\n                ? { ...acc, alerts_muted_until: result.mutedUntil }\n                : acc,\n            ),\n          );\n        } else {\n          throw new Error('Server action failed'); // Should be caught below\n        }\n        // Data should revalidate via revalidatePath\n      } catch (error) {\n        setAccounts(previousAccounts); // Rollback\n        toast.error(error instanceof Error ? error.message : `Failed to ${action} alerts.`);\n      } finally {\n        setTogglingMuteAccountId(null);\n      }\n    });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => toast.success('Stripe ID copied to clipboard!'))\n      .catch((err) => toast.error('Failed to copy ID.'));\n  };\n\n  const getPauseTooltipContent = (account: ConnectedAccount): string => {\n    if (account.payouts_paused) {\n      let reason = `Paused by ${account.paused_by || 'unknown'}`;\n      if (account.paused_reason) reason += `: ${account.paused_reason.replace(/_/g, ' ')}`;\n      return reason;\n    } else {\n      return 'Automatic payouts active.';\n    }\n  };\n\n  const getMuteStatus = (account: ConnectedAccount): { muted: boolean; text: string } => {\n    if (account.alerts_muted_until) {\n      if (account.alerts_muted_until === 'infinity') {\n        return { muted: true, text: 'Muted indefinitely' };\n      }\n      const muteEndDate = new Date(account.alerts_muted_until);\n      if (muteEndDate > new Date()) {\n        return {\n          muted: true,\n          text: `Muted ${formatDistanceToNow(muteEndDate, { addSuffix: true })}`,\n        };\n      }\n    }\n    return { muted: false, text: 'Alerts active' };\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <div>\n          <CardTitle>Connected Stripe Accounts</CardTitle>\n          <CardDescription>\n            Link multiple Stripe accounts to manage them with DOCK108.\n          </CardDescription>\n        </div>\n        <Button onClick={handleAddAccount} disabled={isLinking}>\n          {isLinking ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Connecting...\n            </>\n          ) : (\n            <>\n              <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Account\n            </>\n          )}\n        </Button>\n      </CardHeader>\n      <CardContent>\n        {accounts.length === 0 ? (\n          <p className=\"text-center text-muted-foreground py-8\">\n            No Stripe accounts connected yet.\n          </p>\n        ) : (\n          <TooltipProvider delayDuration={300}>\n            {/* Desktop Table */}\n            <div className=\"hidden md:block\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Display Name</TableHead>\n                    <TableHead>Stripe Account ID</TableHead>\n                    <TableHead>Payouts</TableHead>\n                    <TableHead>Alerts</TableHead>\n                    <TableHead>Backfill Status</TableHead>\n                    <TableHead>Connected On</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {accounts.map((account) => {\n                    const muteStatus = getMuteStatus(account);\n                    const isLoadingMute =\n                      isTogglingMute && togglingMuteAccountId === account.stripe_account_id;\n                    const isLoadingPayouts =\n                      isTogglingPayouts && togglingPayoutsAccountId === account.stripe_account_id;\n                    return (\n                      <TableRow key={account.id}>\n                        <TableCell className=\"font-medium\">\n                          {account.business_name || 'N/A'}\n                        </TableCell>\n                        <TableCell className=\"flex items-center gap-2\">\n                          <span className=\"font-mono text-sm\">{account.stripe_account_id}</span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6\"\n                            onClick={() => copyToClipboard(account.stripe_account_id)}\n                          >\n                            <Copy className=\"h-3 w-3\" />\n                          </Button>\n                        </TableCell>\n                        <TableCell>\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <div className=\"flex items-center\">\n                                <Switch\n                                  id={`payout-switch-${account.id}`}\n                                  checked={!account.payouts_paused}\n                                  onCheckedChange={() => handleTogglePayouts(account)}\n                                  disabled={isLoadingPayouts || isDisconnecting}\n                                  aria-label={\n                                    account.payouts_paused ? 'Resume payouts' : 'Pause payouts'\n                                  }\n                                />\n                                {isLoadingPayouts &&\n                                  togglingPayoutsAccountId === account.stripe_account_id && (\n                                    <Loader2 className=\"h-4 w-4 animate-spin ml-2\" />\n                                  )}\n                              </div>\n                            </TooltipTrigger>\n                            <TooltipContent>{getPauseTooltipContent(account)}</TooltipContent>\n                          </Tooltip>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-8 w-8\"\n                                  onClick={() => handleToggleMute(account)}\n                                  disabled={isLoadingMute || isDisconnecting}\n                                  aria-label={muteStatus.muted ? 'Unmute alerts' : 'Mute alerts'}\n                                >\n                                  {isLoadingMute ? (\n                                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                  ) : (\n                                    <BellOff\n                                      className={`h-4 w-4 ${muteStatus.muted ? 'text-destructive' : 'text-muted-foreground'}`}\n                                    />\n                                  )}\n                                </Button>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                {muteStatus.muted\n                                  ? 'Click to unmute alerts'\n                                  : 'Click to mute alerts'}\n                                <br />\n                                <span className=\"text-xs text-muted-foreground\">\n                                  Monitoring continues while muted.\n                                </span>\n                              </TooltipContent>\n                            </Tooltip>\n                            {muteStatus.muted ? (\n                              <Badge variant=\"secondary\" className=\"whitespace-nowrap\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {muteStatus.text}\n                              </Badge>\n                            ) : (\n                              <Select\n                                value={muteDuration}\n                                onValueChange={setMuteDuration}\n                                disabled={isLoadingMute}\n                              >\n                                <SelectTrigger className=\"h-8 w-[130px] text-xs\">\n                                  <SelectValue placeholder=\"Select duration\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {MUTE_OPTIONS.map((opt) => (\n                                    <SelectItem\n                                      key={opt.value}\n                                      value={opt.value}\n                                      className=\"text-xs\"\n                                    >\n                                      {opt.label}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <BackfillProgress accountId={account.stripe_account_id} />\n                        </TableCell>\n                        <TableCell>{format(new Date(account.created_at), 'MMM d, yyyy')}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <AlertDialog\n                            open={accountToDisconnect === account.stripe_account_id}\n                            onOpenChange={(open) => !open && setAccountToDisconnect(null)}\n                          >\n                            <AlertDialogTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"text-destructive hover:text-destructive h-8 w-8\"\n                                onClick={() => setAccountToDisconnect(account.stripe_account_id)}\n                                disabled={\n                                  isDisconnecting &&\n                                  accountToDisconnect === account.stripe_account_id\n                                }\n                              >\n                                {isDisconnecting &&\n                                accountToDisconnect === account.stripe_account_id ? (\n                                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                ) : (\n                                  <Trash2 className=\"h-4 w-4\" />\n                                )}\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  This will disconnect the Stripe account{' '}\n                                  <span className=\"font-medium\">\n                                    {account.business_name || account.stripe_account_id}\n                                  </span>{' '}\n                                  from DOCK108. This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel onClick={() => setAccountToDisconnect(null)}>\n                                  Cancel\n                                </AlertDialogCancel>\n                                <AlertDialogAction\n                                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                  onClick={() => handleDisconnect(account.stripe_account_id)}\n                                  disabled={isDisconnecting}\n                                >\n                                  {isDisconnecting ? (\n                                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                  ) : null}\n                                  Disconnect\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n\n            {/* Mobile Cards */}\n            <div className=\"block md:hidden space-y-4\">\n              {accounts.map((account) => {\n                const muteStatus = getMuteStatus(account);\n                const isLoadingMute =\n                  isTogglingMute && togglingMuteAccountId === account.stripe_account_id;\n                const isLoadingPayouts =\n                  isTogglingPayouts && togglingPayoutsAccountId === account.stripe_account_id;\n                return (\n                  <Card key={account.id} className=\"border shadow-sm\">\n                    <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                      <CardTitle className=\"text-lg\">{account.business_name || 'N/A'}</CardTitle>\n                      <AlertDialog\n                        open={accountToDisconnect === account.stripe_account_id}\n                        onOpenChange={(open) => !open && setAccountToDisconnect(null)}\n                      >\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"text-destructive hover:text-destructive h-8 w-8\"\n                            onClick={() => setAccountToDisconnect(account.stripe_account_id)}\n                            disabled={\n                              isDisconnecting && accountToDisconnect === account.stripe_account_id\n                            }\n                          >\n                            {isDisconnecting &&\n                            accountToDisconnect === account.stripe_account_id ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              <Trash2 className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              This will disconnect the Stripe account{' '}\n                              <span className=\"font-medium\">\n                                {account.business_name || account.stripe_account_id}\n                              </span>{' '}\n                              from DOCK108. This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel onClick={() => setAccountToDisconnect(null)}>\n                              Cancel\n                            </AlertDialogCancel>\n                            <AlertDialogAction\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              onClick={() => handleDisconnect(account.stripe_account_id)}\n                              disabled={isDisconnecting}\n                            >\n                              {isDisconnecting ? (\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                              ) : null}\n                              Disconnect\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3 text-sm\">\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <span className=\"font-mono\">{account.stripe_account_id}</span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-6 w-6\"\n                          onClick={() => copyToClipboard(account.stripe_account_id)}\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      <p className=\"text-muted-foreground\">\n                        Connected: {format(new Date(account.created_at), 'MMM d, yyyy')}\n                      </p>\n                      <div className=\"flex items-center justify-between pt-2 border-t\">\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <span className=\"text-muted-foreground flex items-center\">\n                              Payouts\n                              <Info className=\"h-3 w-3 ml-1\" />\n                            </span>\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            Stops Stripe from automatically sending funds to your bank. Guardian may\n                            turn this off automatically when fraud is suspected. You can resume\n                            payouts once you've reviewed the transactions.\n                          </TooltipContent>\n                        </Tooltip>\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <div className=\"flex items-center\">\n                              <Switch\n                                id={`payout-switch-mobile-${account.id}`}\n                                checked={!account.payouts_paused}\n                                onCheckedChange={() => handleTogglePayouts(account)}\n                                disabled={isLoadingPayouts || isDisconnecting}\n                                aria-label={\n                                  account.payouts_paused ? 'Resume payouts' : 'Pause payouts'\n                                }\n                              />\n                              {isLoadingPayouts &&\n                                togglingPayoutsAccountId === account.stripe_account_id && (\n                                  <Loader2 className=\"h-4 w-4 animate-spin ml-2\" />\n                                )}\n                            </div>\n                          </TooltipTrigger>\n                          <TooltipContent>{getPauseTooltipContent(account)}</TooltipContent>\n                        </Tooltip>\n                      </div>\n                      <div className=\"flex items-center justify-between pt-2 border-t\">\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <span className=\"text-muted-foreground flex items-center\">\n                              Alerts\n                              <Info className=\"h-3 w-3 ml-1\" />\n                            </span>\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            Stops e-mail/Slack alerts while you investigate. Monitoring continues.\n                          </TooltipContent>\n                        </Tooltip>\n                        <div className=\"flex items-center space-x-2\">\n                          {muteStatus.muted ? (\n                            <Badge variant=\"secondary\" className=\"whitespace-nowrap text-xs\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {muteStatus.text}\n                            </Badge>\n                          ) : (\n                            <Select\n                              value={muteDuration}\n                              onValueChange={setMuteDuration}\n                              disabled={isLoadingMute}\n                            >\n                              <SelectTrigger className=\"h-8 w-[100px] text-xs\">\n                                <SelectValue placeholder=\"Duration\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {MUTE_OPTIONS.map((opt) => (\n                                  <SelectItem key={opt.value} value={opt.value} className=\"text-xs\">\n                                    {opt.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          )}\n                          <Tooltip>\n                            <TooltipTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-8 w-8\"\n                                onClick={() => handleToggleMute(account)}\n                                disabled={isLoadingMute || isDisconnecting}\n                                aria-label={muteStatus.muted ? 'Unmute alerts' : 'Mute alerts'}\n                              >\n                                {isLoadingMute ? (\n                                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                ) : (\n                                  <BellOff\n                                    className={`h-4 w-4 ${muteStatus.muted ? 'text-destructive' : 'text-muted-foreground'}`}\n                                  />\n                                )}\n                              </Button>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                              {muteStatus.muted ? 'Click to unmute alerts' : 'Click to mute alerts'}\n                            </TooltipContent>\n                          </Tooltip>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between pt-2 border-t\">\n                        <Tooltip>\n                          <TooltipTrigger asChild>\n                            <span className=\"text-muted-foreground flex items-center\">\n                              Backfill Status\n                              <Info className=\"h-3 w-3 ml-1\" />\n                            </span>\n                          </TooltipTrigger>\n                          <TooltipContent className=\"max-w-xs\">\n                            Status of the last backfill operation.\n                          </TooltipContent>\n                        </Tooltip>\n                        <div className=\"flex items-center space-x-2\">\n                          <BackfillProgress accountId={account.stripe_account_id} />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TooltipProvider>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/connected-accounts/actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'redirect' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/types/supabase.schema'.","line":6,"column":26,"nodeType":"Literal","endLine":6,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2460,2463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2460,2463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2572,2575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2572,2575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'returnUrl' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":93,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refreshUrl' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":94,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4748,4751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4748,4751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server';\n\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { createServerClient } from '@supabase/ssr';\nimport { Database } from '@/types/supabase.schema';\nimport { stripe } from '@/lib/stripe'; // Corrected path\nimport { revalidatePath } from 'next/cache';\nimport { Resend } from 'resend'; // Import Resend SDK\n\n// --- Notification Helpers ---\n// Basic Slack helper using fetch\nasync function sendSlackNotificationAction(message: string) {\n  const webhookUrl = process.env.SLACK_WEBHOOK_URL;\n  if (!webhookUrl) {\n    console.warn(\"SLACK_WEBHOOK_URL not set, skipping Slack notification.\");\n    return;\n  }\n  try {\n    const response = await fetch(webhookUrl, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ text: message }),\n    });\n    if (!response.ok) {\n      throw new Error(`Slack webhook failed: ${response.status} ${await response.text()}`);\n    }\n    console.log(\"Slack notification sent successfully via Server Action helper.\");\n  } catch (error) {\n    console.error(\"Error sending Slack notification via Server Action helper:\", error);\n    // Don't throw from helper, just log the error\n  }\n}\n\n// Basic Resend helper\nasync function sendEmailNotificationAction(to: string, subject: string, body: string) {\n  const resendApiKey = process.env.RESEND_API_KEY;\n  if (!resendApiKey) {\n    console.warn(\"RESEND_API_KEY not set, skipping Email notification.\");\n    return;\n  }\n  try {\n    const resend = new Resend(resendApiKey);\n    const { data, error } = await resend.emails.send({\n      from: \"DOCK108 Guardian <guardian@dock108.ai>\", // Replace with your verified sender\n      to: [to],\n      subject: subject,\n      text: body,\n    });\n    if (error) throw error;\n    console.log(`Email notification sent successfully via Server Action helper to ${to}. ID:`, data?.id);\n  } catch (error) {\n    console.error(`Error sending email notification via Server Action helper to ${to}:`, error);\n    // Don't throw from helper, just log the error\n  }\n}\n\n// --- Supabase Client Helper ---\nconst createSupabaseServerClient = () => {\n  const cookieStore = cookies();\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: any) {\n          cookieStore.set({ name, value, ...options });\n        },\n        remove(name: string, options: any) {\n          cookieStore.set({ name, value: '', ...options });\n        },\n      },\n    }\n  );\n};\n\n// --- Server Actions ---\n\nexport async function linkStripeAccountServerAction() {\n  const supabase = createSupabaseServerClient();\n  const { data: { user } } = await supabase.auth.getUser();\n\n  if (!user) {\n    throw new Error('Unauthorized: User not logged in');\n  }\n\n  // Construct the URLs for Stripe callback\n  // Ensure these URLs match your environment (localhost vs production)\n  const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';\n  const returnUrl = `${baseUrl}/settings/connected-accounts`;\n  const refreshUrl = `${baseUrl}/settings/connected-accounts`; // Refresh URL if user aborts/refreshes during OAuth\n\n  try {\n    const accountLink = await stripe.accountLinks.create({\n      // Note: Stripe needs an actual account ID to create a link.\n      // This action seems designed to initiate linking a *new* account,\n      // but accountLinks is typically for existing accounts needing onboarding.\n      //\n      // For initiating a *new* connection via OAuth, you usually redirect directly\n      // to a pre-constructed Stripe Connect OAuth URL, often using stripe.oauth.authorizeUrl()\n      // Let's assume we are using stripe.oauth.authorizeUrl() instead.\n\n      // type: 'account_onboarding', \n      // account: 'acct_xyz' // Needs an actual account ID, which we don't have yet for a new link\n\n      // Redirecting to Stripe Connect OAuth URL construction:\n      // See: https://stripe.com/docs/connect/standard-accounts#integrating-oauth\n      // You need your Stripe Connect Client ID from Stripe Dashboard > Connect > Settings\n      client_id: process.env.STRIPE_CLIENT_ID!,\n      redirect_uri: `${baseUrl}/api/stripe/oauth/callback`, // Your configured callback handler\n      response_type: 'code',\n      scope: 'read_write', // Request necessary permissions\n      // Optional: state parameter for security\n      state: user.id, // Example: Pass user ID for verification in callback\n    });\n\n    // Construct the authorize URL\n    const authorizeUrl = `https://connect.stripe.com/oauth/authorize?${new URLSearchParams(accountLink as any).toString()}`;\n\n    console.log('Generated Stripe Connect OAuth URL:', authorizeUrl);\n    return { url: authorizeUrl };\n\n  } catch (error) {\n    console.error('Error creating Stripe account link:', error);\n    throw new Error('Could not initiate Stripe connection.');\n  }\n}\n\nexport async function disconnectStripeAccountServerAction(stripeAccountId: string) {\n  if (!stripeAccountId) {\n    throw new Error('Stripe Account ID is required.');\n  }\n\n  const supabase = createSupabaseServerClient();\n  const { data: { user } } = await supabase.auth.getUser();\n\n  if (!user) {\n    throw new Error('Unauthorized: User not logged in');\n  }\n\n  try {\n    // 1. Deauthorize the account with Stripe\n    // This revokes the application's access to the Stripe account.\n    // Uses the Stripe Platform's secret key.\n    // See: https://stripe.com/docs/connect/standard-accounts#disconnecting\n    await stripe.oauth.deauthorize({\n      client_id: process.env.STRIPE_CLIENT_ID!,\n      stripe_user_id: stripeAccountId,\n    });\n    console.log(`Deauthorized Stripe account ${stripeAccountId} via Stripe API.`);\n\n    // 2. Delete the account from your database\n    const { error: deleteError } = await supabase\n      .from('connected_accounts')\n      .delete()\n      .match({ user_id: user.id, stripe_account_id: stripeAccountId });\n\n    if (deleteError) {\n      console.error(`Error deleting connected account ${stripeAccountId} from DB:`, deleteError);\n      throw new Error('Failed to remove account from database.');\n    }\n    console.log(`Deleted connected account ${stripeAccountId} for user ${user.id} from DB.`);\n\n    // 3. Revalidate the path to refresh the list\n    revalidatePath('/settings/connected-accounts');\n\n    return { success: true };\n\n  } catch (error) {\n    console.error(`Error disconnecting Stripe account ${stripeAccountId}:`, error);\n    // Determine if the error came from Stripe or DB deletion for better messaging\n    if (error instanceof Error && error.message.includes('database')) {\n       throw new Error('Failed to remove account locally after disconnecting from Stripe.');\n    }\n    if (error instanceof Error && error.message.includes('deauthorize')){\n        throw new Error('Failed to disconnect account from Stripe.');\n    } \n    throw new Error('Could not disconnect Stripe account.');\n  }\n}\n\nexport async function resumePayoutsServerAction(stripeAccountId: string) {\n  if (!stripeAccountId) {\n    throw new Error('Stripe Account ID is required.');\n  }\n\n  const supabase = createSupabaseServerClient();\n  const { data: { user } } = await supabase.auth.getUser();\n\n  if (!user || !user.email) { // Ensure user and email exist\n    throw new Error('Unauthorized or user email missing.');\n  }\n\n  console.log(`User ${user.id} attempting to resume payouts for ${stripeAccountId}`);\n\n  try {\n    // Fetch account details for notification context\n    const { data: account, error: fetchError } = await supabase\n      .from('connected_accounts')\n      .select('business_name')\n      .eq('user_id', user.id)\n      .eq('stripe_account_id', stripeAccountId)\n      .maybeSingle();\n\n    if (fetchError) {\n      console.error(`Failed to fetch account details for ${stripeAccountId}:`, fetchError);\n      // Non-fatal for payout resume, but notifications will lack name\n    }\n    const accountDisplayName = account?.business_name || stripeAccountId; // Use ID as fallback\n\n    // 1. Update Stripe payout schedule to daily (or your default)\n    await stripe.accounts.update(stripeAccountId, {\n      settings: { payouts: { schedule: { interval: 'daily' } } },\n    });\n    console.log(`Updated Stripe payout schedule to daily for ${stripeAccountId}`);\n\n    // 2. Update database record\n    const { error: dbError } = await supabase\n      .from('connected_accounts')\n      .update({\n        payouts_paused: false,\n        paused_by: 'user',\n        paused_reason: null, // Clear the reason\n      })\n      .eq('user_id', user.id) // Ensure user owns this account\n      .eq('stripe_account_id', stripeAccountId);\n\n    if (dbError) {\n      console.error(`Error updating connected_accounts for resume payout for ${stripeAccountId}:`, dbError);\n      throw new Error('Failed to update account status in database.');\n    }\n    console.log(`Updated connected_accounts for resume payout for ${stripeAccountId}`);\n\n    // 3. Trigger notification (Manual resume by user)\n    const subject = `✅ Payouts Resumed for ${accountDisplayName}`;\n    const messageBody = `Payouts have been manually resumed for Stripe account ${accountDisplayName} (${stripeAccountId}) by user ${user.email}.`;\n    \n    // Send notifications (fire and forget, don't block response on these)\n    sendEmailNotificationAction(user.email, subject, messageBody);\n    sendSlackNotificationAction(`✅ Payouts Resumed: Account ${accountDisplayName} (${stripeAccountId}) by user ${user.email}.`);\n    \n    // 4. Revalidate path\n    revalidatePath('/settings/connected-accounts');\n    revalidatePath('/stripe-guardian/alerts'); // Also revalidate dashboard\n\n    return { success: true };\n\n  } catch (error) {\n    console.error(`Error resuming payouts for ${stripeAccountId}:`, error);\n    throw new Error('Could not resume payouts. Please try again.');\n  }\n}\n\nexport async function pausePayoutsServerAction(stripeAccountId: string) {\n  if (!stripeAccountId) {\n    throw new Error('Stripe Account ID is required.');\n  }\n\n  const supabase = createSupabaseServerClient();\n  const { data: { user } } = await supabase.auth.getUser();\n\n  if (!user) {\n    throw new Error('Unauthorized: User not logged in');\n  }\n\n  console.log(`User ${user.id} attempting to manually pause payouts for ${stripeAccountId}`);\n\n  try {\n    // 1. Update Stripe payout schedule to manual\n    await stripe.accounts.update(stripeAccountId, {\n      settings: { payouts: { schedule: { interval: 'manual' } } },\n    });\n    console.log(`Updated Stripe payout schedule to manual for ${stripeAccountId}`);\n\n    // 2. Update database record\n    const { error: dbError } = await supabase\n      .from('connected_accounts')\n      .update({\n        payouts_paused: true,\n        paused_by: 'user',\n        paused_reason: 'manual',\n      })\n      .eq('user_id', user.id) // Ensure user owns this account\n      .eq('stripe_account_id', stripeAccountId);\n\n    if (dbError) {\n      console.error(`Error updating connected_accounts for manual pause for ${stripeAccountId}:`, dbError);\n      throw new Error('Failed to update account status in database.');\n    }\n    console.log(`Updated connected_accounts for manual pause for ${stripeAccountId}`);\n\n    // 3. Revalidate path\n    revalidatePath('/settings/connected-accounts');\n\n    // No notification needed for manual pause by user?\n\n    return { success: true };\n\n  } catch (error) {\n    console.error(`Error manually pausing payouts for ${stripeAccountId}:`, error);\n    throw new Error('Could not pause payouts. Please try again.');\n  }\n}\n\nexport async function toggleAlertsServerAction({\n  stripeAccountId,\n  action,\n  durationMinutes,\n}: {\n  stripeAccountId: string;\n  action: 'mute' | 'unmute';\n  durationMinutes?: number;\n}) {\n  if (!stripeAccountId) {\n    throw new Error('Stripe Account ID is required.');\n  }\n\n  const supabase = createSupabaseServerClient();\n  const { data: { user } } = await supabase.auth.getUser();\n\n  if (!user) {\n    throw new Error('Unauthorized: User not logged in');\n  }\n\n  console.log(`User ${user.id} attempting to ${action} alerts for ${stripeAccountId} for ${durationMinutes || 'indefinite'} minutes.`);\n\n  let newMutedUntil: string | null = null;\n  if (action === 'mute') {\n    if (durationMinutes === Infinity || durationMinutes === undefined || durationMinutes === null) {\n      // PostgreSQL 'infinity' literal for timestamp\n      newMutedUntil = 'infinity'; \n    } else if (typeof durationMinutes === 'number' && durationMinutes > 0) {\n      const now = new Date();\n      now.setMinutes(now.getMinutes() + durationMinutes);\n      newMutedUntil = now.toISOString();\n    } else {\n      // Default to a reasonable time if duration is invalid (e.g., 6 hours)\n      console.warn(`Invalid durationMinutes (${durationMinutes}) provided for mute, defaulting to 360 minutes.`);\n      const now = new Date();\n      now.setMinutes(now.getMinutes() + 360);\n      newMutedUntil = now.toISOString();\n    }\n  } else { // unmute\n    newMutedUntil = null;\n  }\n\n  try {\n    const { error: dbError } = await supabase\n      .from('connected_accounts')\n      .update({\n        alerts_muted_until: newMutedUntil,\n      })\n      .eq('user_id', user.id) // Ensure user owns this account\n      .eq('stripe_account_id', stripeAccountId);\n\n    if (dbError) {\n      console.error(`Error updating connected_accounts for alert toggle (${action}) for ${stripeAccountId}:`, dbError);\n      throw new Error('Failed to update account alert status in database.');\n    }\n    console.log(`Updated connected_accounts for alert toggle (${action}) for ${stripeAccountId} until ${newMutedUntil || 'NULL'}.`);\n\n    revalidatePath('/settings/connected-accounts');\n    // Optionally revalidate dashboard if it displays mute status\n    // revalidatePath('/stripe-guardian/alerts'); \n\n    return { success: true, mutedUntil: newMutedUntil };\n\n  } catch (error) {\n    console.error(`Error toggling alerts (${action}) for ${stripeAccountId}:`, error);\n    throw new Error(`Could not ${action} alerts. Please try again.`);\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/connected-accounts/page.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/types/supabase.schema'.","line":4,"column":26,"nodeType":"Literal","endLine":4,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { createServerClient } from '@supabase/ssr';\nimport { Database } from '@/types/supabase.schema';\nimport { ConnectedAccountsManager } from './ConnectedAccountsManager'; // Client component\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { Terminal } from \"lucide-react\"\n\n// Revalidate data for this page every 0 seconds (dynamic rendering)\nexport const revalidate = 0;\n\nexport default async function ConnectedAccountsPage() {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n      },\n    }\n  );\n\n  const { data: { session } } = await supabase.auth.getSession();\n\n  if (!session) {\n    redirect('/login?next=/settings/connected-accounts');\n  }\n\n  // Fetch connected accounts for the current user\n  const { data: accounts, error } = await supabase\n    .from('connected_accounts')\n    .select('id, stripe_account_id, business_name, created_at, payouts_paused, paused_by, paused_reason')\n    .eq('user_id', session.user.id)\n    .order('created_at', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching connected accounts:', error);\n    // Display an error message within the layout\n    return (\n      <Alert variant=\"destructive\">\n        <Terminal className=\"h-4 w-4\" />\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>\n          Could not load your connected accounts. Please try again later.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <ConnectedAccountsManager initialAccounts={accounts || []} />\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/notifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(auth)/settings/profile/page.tsx","messages":[{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '@/types/supabase.schema'.","line":4,"column":26,"nodeType":"Literal","endLine":4,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { createServerClient } from '@supabase/ssr';\nimport { Database } from '@/types/supabase.schema';\nimport { getProfile } from '@/lib/supabase/user'; // Import helper\n\n// Import Client Components (assuming they are in the same directory or adjusted path)\n// TODO: Adjust paths if these components were moved\nimport { ProfileForm } from '../ProfileForm';\nimport { PasswordForm } from '../PasswordForm';\nimport { ThemeSwitcher } from '../ThemeSwitcher';\nimport { ApiKeysManager } from '../ApiKeysManager';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\n\nexport default async function SettingsProfilePage() {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n      },\n    },\n  );\n\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n\n  // Redirect if not logged in (should be handled by layout/middleware, but good practice)\n  if (!session) {\n    redirect('/login?next=/settings/profile');\n  }\n\n  // Fetch profile data\n  const profile = await getProfile();\n\n  // If profile fetch failed or row doesn't exist, log it, but proceed.\n  // The child components should handle a null/empty profile.\n  if (!profile) {\n    console.error(\n      'Settings profile page: User session found but profile data is missing or failed to load.',\n    );\n    // We won't redirect or return early. Let the page render with profile=null.\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Profile Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Profile</CardTitle>\n          <CardDescription>Update your display name and avatar.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ProfileForm profile={profile} />\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      {/* Password Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Password</CardTitle>\n          <CardDescription>Change your account password.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <PasswordForm />\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      {/* Theme Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Theme</CardTitle>\n          <CardDescription>Select your preferred interface theme.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ThemeSwitcher currentTheme={profile?.theme ?? 'system'} />\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      {/* API Keys Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>API Keys</CardTitle>\n          <CardDescription>Manage API keys for accessing DOCK108 services.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ApiKeysManager initialApiKeys={profile?.api_keys ?? []} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(dashboard)/accounts/ConnectedAccountsManager.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":35},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":57,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":57,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1665,1678],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":73,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":73,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2108,2121],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":97,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":97,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2912,2925],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":99,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":99,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3026,3039],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":129,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":129,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[4259,4272],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":131,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":131,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[4373,4386],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { ConnectedAccountsManager } from './ConnectedAccountsManager';\nimport { SWRConfig } from 'swr';\n\n// Mocks\nvi.mock('next/navigation', () => ({\n  useRouter: () => ({}),\n  useSearchParams: () => new URLSearchParams(),\n}));\nvi.mock('@/app/(auth)/settings/connected-accounts/actions', () => ({\n  linkStripeAccountServerAction: vi.fn(),\n}));\nvi.mock('sonner', () => ({ toast: { success: vi.fn(), error: vi.fn(), info: vi.fn() } }));\n\n// Mock fetch for SWR\nglobal.fetch = vi.fn();\n\nconst mockAccounts = [\n  {\n    id: 'uuid-1',\n    stripe_account_id: 'acct_123',\n    status: 'active',\n    created_at: new Date().toISOString(),\n    rule_set_id: null,\n    rule_set_name: 'Default',\n    backfill_status: 'completed',\n    backfill_progress: 100,\n    backfill_error: null,\n    backfill_updated_at: new Date().toISOString(),\n    business_name: 'Test Business 1',\n  },\n  {\n    id: 'uuid-2',\n    stripe_account_id: 'acct_456',\n    status: 'active',\n    created_at: new Date().toISOString(),\n    rule_set_id: 'ruleset-uuid-1',\n    rule_set_name: 'High Risk',\n    backfill_status: 'running',\n    backfill_progress: 50,\n    backfill_error: null,\n    backfill_updated_at: new Date().toISOString(),\n    business_name: 'Test Business 2',\n  },\n];\n\nconst mockRuleSets = [{ id: 'ruleset-uuid-1', name: 'High Risk' }];\n\ndescribe.skip('ConnectedAccountsManager Component', () => {\n  const renderComponent = (\n    props: Partial<React.ComponentProps<typeof ConnectedAccountsManager>> = {},\n  ) => {\n    // @ts-ignore\n    fetch.mockResolvedValue({ ok: true, json: async () => mockAccounts });\n    return render(\n      <SWRConfig value={{ provider: () => new Map(), dedupingInterval: 0 }}>\n        <ConnectedAccountsManager\n          initialAccounts={mockAccounts}\n          userRole=\"user\"\n          availableRuleSets={mockRuleSets}\n          {...props}\n        />\n      </SWRConfig>,\n    );\n  };\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    // @ts-ignore\n    fetch.mockClear();\n  });\n\n  it('renders the accounts table correctly', async () => {\n    renderComponent();\n    await waitFor(() => {\n      expect(screen.getByText('Test Business 1')).toBeInTheDocument();\n      expect(screen.getByText('acct_456')).toBeInTheDocument();\n      // TODO: Add more assertions for table content\n    });\n    expect(true).toBe(false); // Placeholder\n  });\n\n  it('disables \"Add Account\" button when limit is reached', async () => {\n    renderComponent({ initialAccounts: mockAccounts }); // 2 accounts\n    await waitFor(() => {\n      expect(screen.getByText('Add Stripe Account').closest('button')).toBeDisabled();\n    });\n    // Check tooltip?\n    expect(true).toBe(false); // Placeholder\n  });\n\n  it('calls disconnect action when confirmed', async () => {\n    // @ts-ignore\n    fetch.mockResolvedValueOnce({ ok: true, json: async () => mockAccounts }); // Initial fetch\n    // @ts-ignore\n    fetch.mockResolvedValueOnce({ ok: true, json: async () => ({ message: 'Success' }) }); // DELETE fetch\n\n    renderComponent();\n    // TODO: Find disconnect button for acct_123, click it\n    // TODO: Find confirm button in dialog, click it\n    // await waitFor(() => expect(fetch).toHaveBeenCalledWith('/api/accounts/acct_123', { method: 'DELETE' }));\n    expect(true).toBe(false); // Placeholder\n  });\n\n  it('shows rule set dropdown for admin users', async () => {\n    renderComponent({ userRole: 'admin' });\n    await waitFor(() => {\n      // Check if SelectTrigger is present (might need specific selector)\n      expect(screen.getAllByRole('combobox').length).toBeGreaterThan(0);\n    });\n    expect(true).toBe(false); // Placeholder\n  });\n\n  it('shows read-only rule set badge for non-admin users', async () => {\n    renderComponent({ userRole: 'user' });\n    await waitFor(() => {\n      expect(screen.queryByRole('combobox')).not.toBeInTheDocument();\n      expect(screen.getByText('Default')).toBeInTheDocument();\n      expect(screen.getByText('High Risk')).toBeInTheDocument();\n    });\n    expect(true).toBe(false); // Placeholder\n  });\n\n  it('calls patch action when admin changes rule set', async () => {\n    // @ts-ignore\n    fetch.mockResolvedValueOnce({ ok: true, json: async () => mockAccounts }); // Initial fetch\n    // @ts-ignore\n    fetch.mockResolvedValueOnce({ ok: true, json: async () => ({ message: 'Success' }) }); // PATCH fetch\n\n    renderComponent({ userRole: 'admin' });\n    // TODO: Find select dropdown for acct_123, open it, select a new value\n    // await waitFor(() => expect(fetch).toHaveBeenCalledWith('/api/accounts/acct_123', expect.objectContaining({ method: 'PATCH' })));\n    expect(true).toBe(false); // Placeholder\n  });\n\n  // TODO: Add tests for mobile/card view rendering\n  // TODO: Add tests for error states (API fetch errors, disconnect/patch errors)\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(dashboard)/accounts/ConnectedAccountsManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used. Allowed unused vars must match /^_/u.","line":40,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":84,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useTransition, useEffect } from 'react';\nimport { useRouter } from 'next/navigation'; // For potential revalidation\nimport useSWR, { mutate } from 'swr'; // For data fetching and optimistic updates\nimport { Database } from '@/types/supabase';\nimport { linkStripeAccountServerAction } from '@/app/(auth)/settings/connected-accounts/actions'; // Reuse existing action\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { toast } from 'sonner';\nimport { format } from 'date-fns';\nimport { Loader2, Trash2, Copy, PlusCircle, Info, Settings } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { BackfillProgress } from '@/components/progress/BackfillProgress';\n\n// --- Types (assuming structure from GET /api/accounts) ---\ntype AccountWithStatus = {\n  id: string;\n  stripe_account_id: string;\n  status: string; // 'active' | 'disconnected'\n  created_at: string;\n  rule_set_id: string | null;\n  rule_set_name: string; // 'Default' or actual name\n  backfill_status: string; // 'pending' | 'running' | 'completed' | 'failed' | 'unknown'\n  backfill_progress: number;\n  backfill_error: string | null;\n  backfill_updated_at: string | null;\n  business_name?: string | null; // Make optional if not always present\n};\n\ntype RuleSet = {\n  id: string;\n  name: string;\n};\n\ninterface ConnectedAccountsManagerProps {\n  initialAccounts: AccountWithStatus[];\n  userRole: string; // e.g., 'user', 'admin'\n  availableRuleSets?: RuleSet[]; // Pass this from server component if admin\n}\n\n// --- SWR Fetcher ---\nconst ACCOUNTS_API_ENDPOINT = '/api/accounts';\nconst fetcher = (url: string) =>\n  fetch(url).then((res) => {\n    if (!res.ok) throw new Error('Failed to fetch accounts');\n    return res.json();\n  });\n\n// --- Component Implementation ---\nexport function ConnectedAccountsManager({\n  initialAccounts,\n  userRole,\n  availableRuleSets = [], // Default to empty if not admin/provided\n}: ConnectedAccountsManagerProps) {\n  const router = useRouter();\n  const { data: accounts = initialAccounts, error: accountsError } = useSWR<AccountWithStatus[]>(\n    ACCOUNTS_API_ENDPOINT,\n    fetcher,\n    {\n      fallbackData: initialAccounts,\n      refreshInterval: 15000, // Refresh list periodically\n    },\n  );\n\n  const [isLinking, startLinkTransition] = useTransition();\n  const [isOperating, startOperatingTransition] = useTransition(); // For disconnect/patch\n  const [operatingAccountId, setOperatingAccountId] = useState<string | null>(null);\n  const [accountToDisconnect, setAccountToDisconnect] = useState<string | null>(null);\n\n  const isAdmin = userRole === 'admin';\n  const canAddAccount = accounts.length < 2;\n\n  // --- Handlers ---\n  const handleAddAccount = () => {\n    if (!canAddAccount) {\n      toast.info('Beta Feature Limit', {\n        description: 'You can connect a maximum of 2 Stripe accounts during the beta.',\n      });\n      return;\n    }\n    startLinkTransition(async () => {\n      try {\n        const result = await linkStripeAccountServerAction();\n        if (result?.url) {\n          window.location.href = result.url;\n        } else {\n          toast.error('Could not start Stripe connection. Please try again.');\n        }\n      } catch (error) {\n        toast.error(error instanceof Error ? error.message : 'An unexpected error occurred.');\n      }\n    });\n  };\n\n  const handleDisconnect = async (stripeAccountId: string) => {\n    setOperatingAccountId(stripeAccountId);\n    startOperatingTransition(async () => {\n      // Optimistic update\n      mutate(\n        ACCOUNTS_API_ENDPOINT,\n        (currentData) =>\n          currentData?.map((acc) =>\n            acc.stripe_account_id === stripeAccountId ? { ...acc, status: 'disconnecting' } : acc,\n          ),\n        false, // Don't revalidate yet\n      );\n\n      try {\n        const res = await fetch(`/api/accounts/${stripeAccountId}`, { method: 'DELETE' });\n        if (!res.ok) {\n          const errData = await res.json();\n          throw new Error(errData.error || 'Failed to disconnect account');\n        }\n        toast.success(`Account ${stripeAccountId} disconnected.`);\n        // Trigger SWR revalidation\n        mutate(ACCOUNTS_API_ENDPOINT);\n      } catch (error) {\n        toast.error(error instanceof Error ? error.message : 'Could not disconnect account.');\n        // Revert optimistic update on error\n        mutate(\n          ACCOUNTS_API_ENDPOINT,\n          (currentData) =>\n            currentData?.map((acc) =>\n              acc.stripe_account_id === stripeAccountId ? { ...acc, status: 'active' } : acc,\n            ),\n          false,\n        );\n      } finally {\n        setOperatingAccountId(null);\n        setAccountToDisconnect(null);\n      }\n    });\n  };\n\n  const handleRuleSetChange = async (stripeAccountId: string, newRuleSetId: string | null) => {\n    setOperatingAccountId(stripeAccountId);\n    const originalRuleSetId = accounts.find(\n      (a) => a.stripe_account_id === stripeAccountId,\n    )?.rule_set_id;\n    const newRuleSetName =\n      availableRuleSets.find((rs) => rs.id === newRuleSetId)?.name ?? 'Default';\n\n    startOperatingTransition(async () => {\n      // Optimistic update\n      mutate(\n        ACCOUNTS_API_ENDPOINT,\n        (currentData) =>\n          currentData?.map((acc) =>\n            acc.stripe_account_id === stripeAccountId\n              ? { ...acc, rule_set_id: newRuleSetId, rule_set_name: newRuleSetName }\n              : acc,\n          ),\n        false,\n      );\n\n      try {\n        const res = await fetch(`/api/accounts/${stripeAccountId}`, {\n          method: 'PATCH',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ rule_set_id: newRuleSetId }),\n        });\n        if (!res.ok) {\n          const errData = await res.json();\n          throw new Error(errData.error || 'Failed to update rule set');\n        }\n        toast.success(`Rule set updated for ${stripeAccountId}.`);\n        mutate(ACCOUNTS_API_ENDPOINT); // Revalidate\n      } catch (error) {\n        toast.error(error instanceof Error ? error.message : 'Could not update rule set.');\n        // Revert optimistic update\n        mutate(\n          ACCOUNTS_API_ENDPOINT,\n          (currentData) =>\n            currentData?.map((acc) =>\n              acc.stripe_account_id === stripeAccountId\n                ? {\n                    ...acc,\n                    rule_set_id: originalRuleSetId,\n                    rule_set_name:\n                      accounts.find((a) => a.id === acc.id)?.rule_set_name ?? 'Default',\n                  }\n                : acc,\n            ),\n          false,\n        );\n      } finally {\n        setOperatingAccountId(null);\n      }\n    });\n  };\n\n  // --- Render Logic ---\n  if (accountsError) {\n    return (\n      <div className=\"text-destructive p-4\">Error loading accounts. Please try again later.</div>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        {/* Title/Desc already in page.tsx */}\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <span>\n                {' '}\n                {/* Span needed for Tooltip when Button is disabled */}\n                <Button onClick={handleAddAccount} disabled={isLinking || !canAddAccount}>\n                  {isLinking ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Connecting...\n                    </>\n                  ) : (\n                    <>\n                      <PlusCircle className=\"mr-2 h-4 w-4\" /> Add Stripe Account\n                    </>\n                  )}\n                </Button>\n              </span>\n            </TooltipTrigger>\n            {!canAddAccount && (\n              <TooltipContent>\n                <p>Beta Limit: You can connect up to 2 accounts.</p>\n              </TooltipContent>\n            )}\n          </Tooltip>\n        </TooltipProvider>\n      </CardHeader>\n      <CardContent>\n        {accounts.length === 0 ? (\n          <p className=\"text-center text-muted-foreground py-8\">\n            No Stripe accounts connected yet.\n          </p>\n        ) : (\n          <>\n            {' '}\n            {/* TODO: Add Responsive Wrapper for Table/Cards */}\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Account Name</TableHead>\n                  <TableHead>Stripe ID</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Rule Set</TableHead>\n                  <TableHead>Backfill</TableHead>\n                  <TableHead>Connected</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {accounts.map((account) => {\n                  const isCurrentOperating =\n                    operatingAccountId === account.stripe_account_id && isOperating;\n                  const isDisconnected = account.status === 'disconnected';\n                  return (\n                    <TableRow\n                      key={account.stripe_account_id}\n                      className={isDisconnected ? 'opacity-50' : ''}\n                    >\n                      <TableCell className=\"font-medium\">\n                        {account.business_name || 'N/A'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <span className=\"font-mono text-xs mr-1\">\n                            {account.stripe_account_id}\n                          </span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon-xs\"\n                            onClick={() => copyToClipboard(account.stripe_account_id)}\n                          >\n                            <Copy className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={isDisconnected ? 'outline' : 'success'}>\n                          {account.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {isAdmin ? (\n                          <Select\n                            value={account.rule_set_id ?? 'default'}\n                            onValueChange={(value) =>\n                              handleRuleSetChange(\n                                account.stripe_account_id,\n                                value === 'default' ? null : value,\n                              )\n                            }\n                            disabled={isCurrentOperating || isDisconnected}\n                          >\n                            <SelectTrigger className=\"h-8 w-[150px] text-xs\">\n                              <SelectValue placeholder=\"Select Rule Set\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"default\" className=\"text-xs\">\n                                Default\n                              </SelectItem>\n                              {availableRuleSets.map((rs) => (\n                                <SelectItem key={rs.id} value={rs.id} className=\"text-xs\">\n                                  {rs.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        ) : (\n                          <Badge variant=\"secondary\">{account.rule_set_name}</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <BackfillProgress accountId={account.stripe_account_id} />\n                      </TableCell>\n                      <TableCell className=\"text-xs text-muted-foreground\">\n                        {format(new Date(account.created_at), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <AlertDialog\n                          open={accountToDisconnect === account.stripe_account_id}\n                          onOpenChange={(open) => !open && setAccountToDisconnect(null)}\n                        >\n                          <TooltipProvider>\n                            <Tooltip>\n                              <TooltipTrigger asChild>\n                                <span>\n                                  {' '}\n                                  {/* Required for Tooltip on disabled Button */}\n                                  <AlertDialogTrigger asChild>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"text-destructive hover:text-destructive h-8 w-8\"\n                                      onClick={() =>\n                                        setAccountToDisconnect(account.stripe_account_id)\n                                      }\n                                      disabled={isCurrentOperating || isDisconnected}\n                                    >\n                                      <Trash2 className=\"h-4 w-4\" />\n                                    </Button>\n                                  </AlertDialogTrigger>\n                                </span>\n                              </TooltipTrigger>\n                              <TooltipContent>\n                                {isDisconnected\n                                  ? 'Account already disconnected'\n                                  : 'Disconnect Account'}\n                              </TooltipContent>\n                            </Tooltip>\n                          </TooltipProvider>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>\n                                Disconnect {account.stripe_account_id}?\n                              </AlertDialogTitle>\n                              <AlertDialogDescription>\n                                This will stop all monitoring and alerts for this Stripe account.\n                                You can reconnect it later if needed. Are you sure?\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel onClick={() => setAccountToDisconnect(null)}>\n                                Cancel\n                              </AlertDialogCancel>\n                              <AlertDialogAction\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                onClick={() => handleDisconnect(account.stripe_account_id)}\n                                disabled={isCurrentOperating}\n                              >\n                                {isCurrentOperating ? (\n                                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                ) : null}\n                                Disconnect\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                        {/* Add other actions like Edit/Settings link if needed */}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/(dashboard)/accounts/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Suspense' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AccountsLoadingSkeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Suspense } from 'react';\nimport { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { Database } from '@/types/supabase';\nimport { ConnectedAccountsManager } from './ConnectedAccountsManager'; // We'll create this client component\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Re-use the query from the API route for consistency\nconst ACCOUNTS_QUERY = `\n  id,\n  stripe_account_id,\n  status,\n  scope,\n  created_at,\n  rule_set_id,\n  rule_sets ( id, name ),\n  account_backfill_status ( status, progress, error_message, updated_at )\n`;\n\n// Function to fetch data server-side\nasync function getConnectedAccounts(supabase: ReturnType<typeof createServerClient>) {\n  // RLS ensures user only gets their own accounts\n  const { data, error } = await supabase\n    .from('stripe_accounts')\n    .select(ACCOUNTS_QUERY)\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error('Error fetching connected accounts server-side:', error);\n    // Handle error appropriately, maybe throw or return empty/error state\n    return [];\n  }\n\n  // Transform data\n  const transformedAccounts =\n    data?.map((acc) => ({\n      id: acc.id,\n      stripe_account_id: acc.stripe_account_id,\n      status: acc.status,\n      created_at: acc.created_at,\n      rule_set_id: acc.rule_set_id,\n      rule_set_name: acc.rule_sets?.name ?? 'Default',\n      backfill_status: acc.account_backfill_status[0]?.status ?? 'unknown',\n      backfill_progress: acc.account_backfill_status[0]?.progress ?? 0,\n      backfill_error: acc.account_backfill_status[0]?.error_message ?? null,\n      backfill_updated_at: acc.account_backfill_status[0]?.updated_at ?? null,\n      // Include other needed fields directly (e.g., business_name if added)\n      // business_name: acc.business_name,\n    })) ?? [];\n\n  return transformedAccounts;\n}\n\n// Loading Skeleton Component\nfunction AccountsLoadingSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      <Skeleton className=\"h-10 w-1/4\" />\n      <Skeleton className=\"h-40 w-full\" />\n      <Skeleton className=\"h-40 w-full\" />\n    </div>\n  );\n}\n\n// The Page Component (Server Component)\nexport default async function AccountsPage() {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: { get: (name) => cookieStore.get(name)?.value } },\n  );\n\n  // Fetch initial data on the server\n  const initialAccounts = await getConnectedAccounts(supabase);\n\n  // We might need user role info for the client component\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n  const userRole = user?.app_metadata?.role ?? 'user'; // Example: Get role from metadata\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-6\">\n      <h1 className=\"text-2xl font-semibold\">Connected Accounts</h1>\n      {/* Use Suspense for better loading UX if client component does heavy lifting */}\n      {/* <Suspense fallback={<AccountsLoadingSkeleton />}> */}\n      <ConnectedAccountsManager initialAccounts={initialAccounts} userRole={userRole} />\n      {/* </Suspense> */}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/accounts/[id]/settings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1457,1460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1457,1460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { toast } from '@/components/ui/use-toast';\nimport { ArrowLeft, Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  is_active: z.boolean().default(true),\n  rule_set_id: z.string().nullable(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface RuleSet {\n  id: string;\n  name: string;\n}\n\nexport default function AccountSettingsPage({ params }: { params: { id: string } }) {\n  const router = useRouter();\n  const supabase = createClientComponentClient<Database>();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [account, setAccount] = useState<any>(null);\n  const [ruleSets, setRuleSets] = useState<RuleSet[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      is_active: true,\n      rule_set_id: null,\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Fetch account details\n        const { data: accountData, error: accountError } = await supabase\n          .from('accounts')\n          .select('*')\n          .eq('id', params.id)\n          .single();\n\n        if (accountError) {\n          throw new Error(`Error fetching account: ${accountError.message}`);\n        }\n\n        if (!accountData) {\n          throw new Error('Account not found');\n        }\n\n        setAccount(accountData);\n\n        // Fetch rule sets\n        const { data: ruleSetsData, error: ruleSetsError } = await supabase\n          .from('rule_sets')\n          .select('id, name')\n          .order('name', { ascending: true });\n\n        if (ruleSetsError) {\n          throw new Error(`Error fetching rule sets: ${ruleSetsError.message}`);\n        }\n\n        setRuleSets(ruleSetsData || []);\n\n        // Set form default values\n        form.reset({\n          is_active: accountData.is_active,\n          rule_set_id: accountData.rule_set_id,\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error occurred');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [params.id, supabase, form]);\n\n  const onSubmit = async (values: FormValues) => {\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Update account settings\n      const { error: updateError } = await supabase\n        .from('accounts')\n        .update({\n          is_active: values.is_active,\n          rule_set_id: values.rule_set_id,\n        })\n        .eq('id', params.id);\n\n      if (updateError) {\n        throw new Error(updateError.message);\n      }\n\n      toast({\n        title: 'Settings updated',\n        description: 'Account settings have been updated successfully.',\n      });\n\n      // Refresh account data\n      const { data: accountData, error: accountError } = await supabase\n        .from('accounts')\n        .select('*')\n        .eq('id', params.id)\n        .single();\n\n      if (!accountError && accountData) {\n        setAccount(accountData);\n      }\n    } catch (error) {\n      console.error('Error updating account settings:', error);\n      setError(error instanceof Error ? error.message : 'Unknown error occurred');\n      toast({\n        title: 'Error',\n        description: `Failed to update settings: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\" asChild>\n            <Link href=\"/admin/accounts\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Back</span>\n            </Link>\n          </Button>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Error</h1>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-destructive\">{error}</p>\n            <Button className=\"mt-4\" onClick={() => router.push('/admin/accounts')}>\n              Return to Accounts\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2\">\n        <Button variant=\"outline\" size=\"icon\" asChild>\n          <Link href=\"/admin/accounts\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Back</span>\n          </Link>\n        </Button>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Account Settings</h1>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>{account?.display_name || 'Unnamed Account'}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-6 text-sm\">\n            <div className=\"grid grid-cols-2 gap-1\">\n              <div className=\"text-muted-foreground\">Stripe ID:</div>\n              <div className=\"font-mono\">{account?.stripe_id}</div>\n              <div className=\"text-muted-foreground\">Created:</div>\n              <div>{new Date(account?.created_at).toLocaleDateString()}</div>\n            </div>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"is_active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                    <FormControl>\n                      <Checkbox checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Active</FormLabel>\n                      <FormDescription>\n                        When active, alerts will be processed for this account\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"rule_set_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rule Set</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value || ''}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a rule set\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"\">Default (No custom rules)</SelectItem>\n                        {ruleSets.map((ruleSet) => (\n                          <SelectItem key={ruleSet.id} value={ruleSet.id}>\n                            {ruleSet.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Assign a rule set to customize alert behavior for this account\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => router.push('/admin/accounts')}\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/accounts/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardFooter' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Metadata } from 'next';\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\nimport Link from 'next/link';\nimport { Database } from '@/types/supabase';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertCircle, Settings } from 'lucide-react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\nexport const metadata: Metadata = {\n  title: 'Connected Accounts | Guardian Admin',\n  description: 'Manage connected Stripe accounts and rule set assignments',\n};\n\n// Fetch accounts and their assigned rule sets\nasync function getAccounts() {\n  const cookieStore = cookies();\n\n  const supabase = createServerClient<Database>({\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    cookies: {\n      get(name: string) {\n        return cookieStore.get(name)?.value;\n      },\n    },\n  });\n\n  const { data, error } = await supabase\n    .from('accounts')\n    .select(\n      `\n      *,\n      rule_sets (\n        id,\n        name\n      )\n    `,\n    )\n    .order('display_name', { ascending: true });\n\n  if (error) {\n    console.error('Error fetching accounts:', error);\n    throw new Error('Failed to fetch accounts');\n  }\n\n  return data || [];\n}\n\nexport default async function AdminAccountsPage() {\n  const accounts = await getAccounts();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Connected Accounts</h1>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Manage Account Settings</CardTitle>\n          <CardDescription>Configure rule sets for connected Stripe accounts</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {accounts.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n              <p className=\"text-muted-foreground mb-4\">No accounts connected yet</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Connect Stripe accounts to start applying rule sets\n              </p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Account Name</TableHead>\n                  <TableHead>Stripe ID</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Rule Set</TableHead>\n                  <TableHead className=\"w-[100px]\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {accounts.map((account) => (\n                  <TableRow key={account.id}>\n                    <TableCell className=\"font-medium\">\n                      {account.display_name || 'Unnamed Account'}\n                    </TableCell>\n                    <TableCell className=\"font-mono text-xs\">{account.stripe_id}</TableCell>\n                    <TableCell>\n                      <Badge variant={account.is_active ? 'default' : 'secondary'}>\n                        {account.is_active ? 'Active' : 'Disabled'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {account.rule_sets && account.rule_sets.length > 0\n                        ? account.rule_sets.map((rs) => rs.name).join(', ')\n                        : 'No rule set assigned'}\n                    </TableCell>\n                    <TableCell>\n                      <Button variant=\"outline\" size=\"icon\" asChild>\n                        <Link href={`/admin/accounts/${account.id}/settings`}>\n                          <Settings className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">Settings</span>\n                        </Link>\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/notification-channels/create-notification-channel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/notification-channels/notification-channel-actions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/notification-channels/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'format' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Metadata } from 'next';\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\nimport { Database } from '@/types/supabase';\nimport { format } from 'date-fns';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Trash2, Edit } from 'lucide-react';\nimport Link from 'next/link';\nimport { Badge } from '@/components/ui/badge';\nimport { CreateNotificationChannel } from './create-notification-channel';\nimport { NotificationChannelActions } from './notification-channel-actions';\n\nexport const metadata: Metadata = {\n  title: 'Notification Channels | Admin Dashboard',\n  description: 'Manage notification channels for Stripe Guardian alerts',\n};\n\nasync function getNotificationChannels() {\n  const cookieStore = cookies();\n\n  const supabase = createServerClient<Database>({\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    cookies: {\n      get(name: string) {\n        return cookieStore.get(name)?.value;\n      },\n    },\n  });\n\n  const { data, error } = await supabase\n    .from('notification_channels')\n    .select('*')\n    .order('created_at', { ascending: false });\n\n  if (error) {\n    console.error('Error fetching notification channels:', error);\n    throw new Error('Failed to fetch notification channels');\n  }\n\n  return data || [];\n}\n\nexport default async function NotificationChannelsPage() {\n  const channels = await getNotificationChannels();\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Notification Channels</h1>\n        <CreateNotificationChannel />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Manage Notification Channels</CardTitle>\n          <CardDescription>Configure where alerts and notifications are sent</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {channels.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n              <p className=\"text-muted-foreground mb-4\">No notification channels configured yet</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Add your first channel to start receiving alerts\n              </p>\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Destination</TableHead>\n                  <TableHead className=\"w-[100px]\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {channels.map((channel) => (\n                  <TableRow key={channel.id}>\n                    <TableCell className=\"font-medium\">{channel.name}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {channel.type}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"font-mono text-xs\">\n                      {channel.type === 'slack'\n                        ? channel.destination.length > 40\n                          ? `${channel.destination.substring(0, 40)}...`\n                          : channel.destination\n                        : channel.destination}\n                    </TableCell>\n                    <TableCell>\n                      <NotificationChannelActions\n                        channelId={channel.id}\n                        channelName={channel.name}\n                      />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/rule-sets/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardFooter' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'RuleSet' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Metadata } from 'next';\nimport { cookies } from 'next/headers';\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\nimport Link from 'next/link';\nimport { Database } from '@/types/supabase';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { AlertCircle, Plus } from 'lucide-react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\n\nexport const metadata: Metadata = {\n  title: 'Rule Sets | Guardian Admin',\n  description: 'Create and manage rule sets for Stripe Guardian accounts',\n};\n\ninterface RuleSet {\n  id: string;\n  name: string;\n  description: string;\n  created_at: string;\n  updated_at: string;\n  created_by: string;\n  account_count: number;\n}\n\nexport default async function AdminRuleSetsPage() {\n  const cookieStore = cookies();\n  const supabase = createServerComponentClient<Database>({ cookies: () => cookieStore });\n\n  // Fetch rule sets with account count\n  const { data: ruleSets, error } = await supabase.rpc('get_rule_sets_with_account_count');\n\n  // If the RPC doesn't exist, provide SQL to create it\n  const rpcNotFoundError = error?.message?.includes(\n    'function get_rule_sets_with_account_count() does not exist',\n  );\n  const createRpcSQL = `\n-- Create the RPC function to get rule sets with account counts\nCREATE OR REPLACE FUNCTION get_rule_sets_with_account_count()\nRETURNS TABLE (\n  id uuid,\n  name text,\n  description text,\n  created_at timestamptz,\n  updated_at timestamptz,\n  created_by uuid,\n  account_count bigint\n) AS $$\nBEGIN\n  RETURN QUERY\n  SELECT \n    rs.id, \n    rs.name, \n    rs.description, \n    rs.created_at,\n    rs.updated_at,\n    rs.created_by,\n    COUNT(ca.id) as account_count\n  FROM \n    public.rule_sets rs\n  LEFT JOIN \n    public.connected_accounts ca ON rs.id = ca.rule_set_id\n  GROUP BY \n    rs.id\n  ORDER BY \n    rs.name ASC;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n  `;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Rule Sets</h1>\n          <p className=\"text-muted-foreground\">\n            Create and manage rule sets for connected accounts\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button asChild>\n            <Link href=\"/admin/rule-sets/new\">\n              <Plus className=\"mr-2 h-4 w-4\" /> Create Rule Set\n            </Link>\n          </Button>\n          <Button asChild variant=\"outline\">\n            <Link href=\"/admin\">Back to Dashboard</Link>\n          </Button>\n        </div>\n      </div>\n\n      {rpcNotFoundError && (\n        <Card className=\"bg-amber-50 dark:bg-amber-950/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertCircle className=\"mr-2 h-5 w-5\" />\n              RPC Function Not Found\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>\n              The function <code>get_rule_sets_with_account_count</code> does not exist in your\n              Supabase instance.\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Please create it using the SQL below:\n            </p>\n            <pre className=\"mt-4 p-4 bg-slate-900 text-slate-100 rounded-md overflow-auto text-xs\">\n              {createRpcSQL}\n            </pre>\n          </CardContent>\n        </Card>\n      )}\n\n      {error && !rpcNotFoundError && (\n        <Card className=\"bg-destructive/10\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertCircle className=\"mr-2 h-5 w-5\" />\n              Error Loading Rule Sets\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>{error.message || 'Unknown error occurred'}</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {ruleSets && ruleSets.length === 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>No Rule Sets</CardTitle>\n            <CardDescription>There are no rule sets defined yet</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p>Rule sets define which alerts are triggered for connected accounts.</p>\n            <div className=\"mt-4\">\n              <Button asChild>\n                <Link href=\"/admin/rule-sets/new\">\n                  <Plus className=\"mr-2 h-4 w-4\" /> Create Your First Rule Set\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {ruleSets && ruleSets.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Rule Sets ({ruleSets.length})</CardTitle>\n            <CardDescription>Manage rule sets and view account assignments</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Accounts</TableHead>\n                  <TableHead>Last Updated</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {ruleSets.map((ruleSet) => (\n                  <TableRow key={ruleSet.id}>\n                    <TableCell className=\"font-medium\">{ruleSet.name}</TableCell>\n                    <TableCell>\n                      <div className=\"max-w-md truncate\">\n                        {ruleSet.description || 'No description'}\n                      </div>\n                    </TableCell>\n                    <TableCell>{ruleSet.account_count}</TableCell>\n                    <TableCell>{new Date(ruleSet.updated_at).toLocaleDateString()}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button asChild variant=\"outline\" size=\"sm\">\n                          <Link href={`/admin/rule-sets/${ruleSet.id}/edit`}>Edit</Link>\n                        </Button>\n                        <Button asChild variant=\"outline\" size=\"sm\">\n                          <Link href={`/admin/rule-sets/${ruleSet.id}/view`}>View Details</Link>\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/rulesets/[id]/edit/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'currentChannelError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":104,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":104,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":139,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { toast } from '@/components/ui/use-toast';\nimport { ArrowLeft, Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),\n  description: z.string().optional(),\n  is_active: z.boolean().default(true),\n  rules_config: z.string().optional(),\n  notification_channel_id: z.string().nullable().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\ninterface NotificationChannel {\n  id: string;\n  name: string;\n  type: string;\n}\n\nexport default function EditRuleSetPage({ params }: { params: { id: string } }) {\n  const router = useRouter();\n  const supabase = createClientComponentClient<Database>();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [notificationChannels, setNotificationChannels] = useState<NotificationChannel[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      is_active: true,\n      rules_config: '',\n      notification_channel_id: null,\n    },\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Fetch rule set details\n        const { data: ruleSet, error: ruleSetError } = await supabase\n          .from('rule_sets')\n          .select('*')\n          .eq('id', params.id)\n          .single();\n\n        if (ruleSetError) {\n          throw new Error(`Error fetching rule set: ${ruleSetError.message}`);\n        }\n\n        if (!ruleSet) {\n          throw new Error('Rule set not found');\n        }\n\n        // Fetch notification channels\n        const { data: channels, error: channelsError } = await supabase\n          .from('notification_channels')\n          .select('id, name, type')\n          .order('name', { ascending: true });\n\n        if (channelsError) {\n          throw new Error(`Error fetching notification channels: ${channelsError.message}`);\n        }\n\n        setNotificationChannels(channels || []);\n\n        // Fetch the current notification channel for this rule set\n        const { data: currentChannel, error: currentChannelError } = await supabase\n          .from('rule_set_notification_channels')\n          .select('notification_channel_id')\n          .eq('rule_set_id', params.id)\n          .maybeSingle();\n\n        // Set form values\n        form.reset({\n          name: ruleSet.name,\n          description: ruleSet.description || '',\n          is_active: ruleSet.is_active,\n          rules_config: JSON.stringify(ruleSet.rules_config || {}, null, 2),\n          notification_channel_id: currentChannel?.notification_channel_id || null,\n        });\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error occurred');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [params.id, supabase, form]);\n\n  const onSubmit = async (values: FormValues) => {\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Parse the rules_config to ensure it's valid JSON\n      let rulesConfig = {};\n      if (values.rules_config) {\n        try {\n          rulesConfig = JSON.parse(values.rules_config);\n        } catch (err) {\n          form.setError('rules_config', {\n            message: 'Invalid JSON format',\n          });\n          setIsSubmitting(false);\n          return;\n        }\n      }\n\n      // Update the rule set\n      const { error: updateError } = await supabase\n        .from('rule_sets')\n        .update({\n          name: values.name,\n          description: values.description || null,\n          is_active: values.is_active,\n          rules_config: rulesConfig,\n        })\n        .eq('id', params.id);\n\n      if (updateError) {\n        throw new Error(updateError.message);\n      }\n\n      // Update notification channel association (first delete existing, then add new if selected)\n      await supabase.from('rule_set_notification_channels').delete().eq('rule_set_id', params.id);\n\n      if (values.notification_channel_id) {\n        const { error: channelError } = await supabase\n          .from('rule_set_notification_channels')\n          .insert({\n            rule_set_id: params.id,\n            notification_channel_id: values.notification_channel_id,\n          });\n\n        if (channelError) {\n          throw new Error(channelError.message);\n        }\n      }\n\n      toast({\n        title: 'Rule set updated',\n        description: `${values.name} has been updated successfully.`,\n      });\n\n      // Redirect to the rule set details page\n      router.push(`/admin/rulesets/${params.id}`);\n    } catch (error) {\n      console.error('Error updating rule set:', error);\n      toast({\n        title: 'Error',\n        description: `Failed to update rule set: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\" asChild>\n            <Link href={`/admin/rulesets/${params.id}`}>\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Back</span>\n            </Link>\n          </Button>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Error</h1>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-destructive\">{error}</p>\n            <Button className=\"mt-4\" onClick={() => router.push(`/admin/rulesets/${params.id}`)}>\n              Return to Rule Set Details\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2\">\n        <Button variant=\"outline\" size=\"icon\" asChild>\n          <Link href={`/admin/rulesets/${params.id}`}>\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Back</span>\n          </Link>\n        </Button>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Edit Rule Set</h1>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Edit Rule Set</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormDescription>A unique name for this rule set</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea className=\"min-h-24\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Provide details about when this rule set should be used\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"is_active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                    <FormControl>\n                      <Checkbox checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Active</FormLabel>\n                      <FormDescription>\n                        Enable this rule set for immediate use with accounts\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"notification_channel_id\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notification Channel</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value || ''}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a notification channel\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"\">None</SelectItem>\n                        {notificationChannels.map((channel) => (\n                          <SelectItem key={channel.id} value={channel.id}>\n                            {channel.name} ({channel.type})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Select a channel to receive notifications for alerts triggered by this rule\n                      set\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"rules_config\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rules Configuration (JSON)</FormLabel>\n                    <FormControl>\n                      <Textarea className=\"font-mono min-h-48\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Specify rule configurations in valid JSON format\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => router.push(`/admin/rulesets/${params.id}`)}\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/rulesets/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[876,879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[876,879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[931,934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[931,934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5257,5260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5257,5260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Edit, Loader2 } from 'lucide-react';\n\nexport default function RuleSetDetailsPage({ params }: { params: { id: string } }) {\n  const router = useRouter();\n  const supabase = createClientComponentClient<Database>();\n  const [isLoading, setIsLoading] = useState(true);\n  const [ruleSet, setRuleSet] = useState<any>(null);\n  const [accounts, setAccounts] = useState<any[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Fetch rule set details\n        const { data: ruleSetData, error: ruleSetError } = await supabase\n          .from('rule_sets')\n          .select(`\n            *,\n            notification_channels (\n              id,\n              name,\n              type\n            )\n          `)\n          .eq('id', params.id)\n          .single();\n\n        if (ruleSetError) {\n          throw new Error(`Error fetching rule set: ${ruleSetError.message}`);\n        }\n\n        if (!ruleSetData) {\n          throw new Error('Rule set not found');\n        }\n\n        setRuleSet(ruleSetData);\n\n        // Fetch accounts using this rule set\n        const { data: accountsData, error: accountsError } = await supabase\n          .from('accounts')\n          .select('*')\n          .eq('rule_set_id', params.id)\n          .order('display_name', { ascending: true });\n\n        if (accountsError) {\n          throw new Error(`Error fetching accounts: ${accountsError.message}`);\n        }\n\n        setAccounts(accountsData || []);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error occurred');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [params.id, supabase]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[60vh]\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\" asChild>\n            <Link href=\"/admin/rulesets\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Back</span>\n            </Link>\n          </Button>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Error</h1>\n        </div>\n        <Card>\n          <CardContent className=\"pt-6\">\n            <p className=\"text-destructive\">{error}</p>\n            <Button\n              className=\"mt-4\"\n              onClick={() => router.push('/admin/rulesets')}\n            >\n              Return to Rule Sets\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\" asChild>\n            <Link href=\"/admin/rulesets\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Back</span>\n            </Link>\n          </Button>\n          <h1 className=\"text-3xl font-bold tracking-tight\">{ruleSet.name}</h1>\n        </div>\n        <Button asChild>\n          <Link href={`/admin/rulesets/${params.id}/edit`}>\n            <Edit className=\"h-4 w-4 mr-2\" /> Edit Rule Set\n          </Link>\n        </Button>\n      </div>\n\n      <div className=\"grid gap-6 grid-cols-1 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Rule Set Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-sm text-muted-foreground\">Description</h3>\n                <p className=\"mt-1\">{ruleSet.description || 'No description provided'}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-sm text-muted-foreground\">Status</h3>\n                <Badge \n                  className=\"mt-1\"\n                  variant={ruleSet.is_active ? \"default\" : \"secondary\"}\n                >\n                  {ruleSet.is_active ? 'Active' : 'Inactive'}\n                </Badge>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-sm text-muted-foreground\">Notification Channel</h3>\n                <p className=\"mt-1\">\n                  {ruleSet.notification_channels && ruleSet.notification_channels.length > 0\n                    ? ruleSet.notification_channels.map((channel: any) => (\n                        <Badge key={channel.id} variant=\"outline\" className=\"mr-2\">\n                          {channel.name} ({channel.type})\n                        </Badge>\n                      ))\n                    : 'No notification channel assigned'}\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-sm text-muted-foreground\">Created</h3>\n                <p className=\"mt-1\">{new Date(ruleSet.created_at).toLocaleString()}</p>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-sm text-muted-foreground\">Last Modified</h3>\n                <p className=\"mt-1\">{new Date(ruleSet.updated_at).toLocaleString()}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Rules Configuration</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <pre className=\"bg-muted p-4 rounded-md overflow-auto text-xs font-mono h-[300px]\">\n              {JSON.stringify(ruleSet.rules_config, null, 2) || '{}'}\n            </pre>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Accounts Using This Rule Set</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {accounts.length === 0 ? (\n            <p className=\"text-muted-foreground\">No accounts are currently using this rule set.</p>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Account Name</TableHead>\n                  <TableHead>Stripe ID</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"w-[100px]\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {accounts.map((account) => (\n                  <TableRow key={account.id}>\n                    <TableCell className=\"font-medium\">\n                      {account.display_name || 'Unnamed Account'}\n                    </TableCell>\n                    <TableCell className=\"font-mono text-xs\">{account.stripe_id}</TableCell>\n                    <TableCell>\n                      <Badge variant={account.is_active ? 'default' : 'secondary'}>\n                        {account.is_active ? 'Active' : 'Disabled'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Button variant=\"outline\" size=\"sm\" asChild>\n                        <Link href={`/admin/accounts/${account.id}/settings`}>\n                          View Settings\n                        </Link>\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/rulesets/create/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":87,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { toast } from '@/components/ui/use-toast';\nimport { ArrowLeft } from 'lucide-react';\n\nconst formSchema = z.object({\n  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),\n  description: z.string().optional(),\n  is_active: z.boolean().default(true),\n  rules_config: z.string().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function CreateRuleSetPage() {\n  const router = useRouter();\n  const supabase = createClientComponentClient<Database>();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      is_active: true,\n      rules_config: JSON.stringify(\n        {\n          // Default empty rule configuration\n          rules: [],\n        },\n        null,\n        2,\n      ),\n    },\n  });\n\n  const onSubmit = async (values: FormValues) => {\n    setIsSubmitting(true);\n\n    try {\n      // Check if a rule set with this name already exists\n      const { data: existing, error: checkError } = await supabase\n        .from('rule_sets')\n        .select('id')\n        .eq('name', values.name)\n        .maybeSingle();\n\n      if (checkError) {\n        throw new Error(checkError.message);\n      }\n\n      if (existing) {\n        form.setError('name', {\n          message: 'A rule set with this name already exists',\n        });\n        setIsSubmitting(false);\n        return;\n      }\n\n      // Parse the rules_config to ensure it's valid JSON\n      let rulesConfig = {};\n      if (values.rules_config) {\n        try {\n          rulesConfig = JSON.parse(values.rules_config);\n        } catch (err) {\n          form.setError('rules_config', {\n            message: 'Invalid JSON format',\n          });\n          setIsSubmitting(false);\n          return;\n        }\n      }\n\n      // Create the new rule set\n      const { error: insertError } = await supabase.from('rule_sets').insert({\n        name: values.name,\n        description: values.description || null,\n        is_active: values.is_active,\n        rules_config: rulesConfig,\n      });\n\n      if (insertError) {\n        throw new Error(insertError.message);\n      }\n\n      toast({\n        title: 'Rule set created',\n        description: `${values.name} has been created successfully.`,\n      });\n\n      // Redirect to the rule sets listing page\n      router.push('/admin/rulesets');\n    } catch (error) {\n      console.error('Error creating rule set:', error);\n      toast({\n        title: 'Error',\n        description: `Failed to create rule set: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-2\">\n        <Button variant=\"outline\" size=\"icon\" asChild>\n          <Link href=\"/admin/rulesets\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Back</span>\n          </Link>\n        </Button>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Create Rule Set</h1>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Rule Set</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter rule set name\" {...field} />\n                    </FormControl>\n                    <FormDescription>A unique name for this rule set</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Enter a description (optional)\"\n                        className=\"min-h-24\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Provide details about when this rule set should be used\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"is_active\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                    <FormControl>\n                      <Checkbox checked={field.value} onCheckedChange={field.onChange} />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Active</FormLabel>\n                      <FormDescription>\n                        Enable this rule set for immediate use with accounts\n                      </FormDescription>\n                    </div>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"rules_config\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rules Configuration (JSON)</FormLabel>\n                    <FormControl>\n                      <Textarea className=\"font-mono min-h-48\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Specify rule configurations in valid JSON format\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => router.push('/admin/rulesets')}\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={isSubmitting}>\n                  {isSubmitting ? 'Creating...' : 'Create Rule Set'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/rulesets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/settings/notification-settings-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1682,1685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1682,1685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'notificationChannels' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3793,3796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3793,3796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { useRouter } from 'next/navigation';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport * as z from 'zod';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Separator } from '@/components/ui/separator';\nimport { AlertCircle, Loader2 } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\n// Define form schema\nconst formSchema = z.object({\n  default_notification_channels: z.array(z.string()).optional(),\n  alert_threshold: z.coerce.number().min(0).max(100).optional(),\n  email_recipients: z.string().optional(),\n  slack_webhook_url: z.string().url().optional().or(z.literal('')),\n  teams_webhook_url: z.string().url().optional().or(z.literal('')),\n  send_daily_summary: z.boolean().default(false),\n  summary_time: z.string().optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport type NotificationChannel = {\n  id: string;\n  name: string;\n  type: string;\n  created_at: string;\n};\n\ninterface NotificationSettingsFormProps {\n  initialSettings: any;\n  notificationChannels: NotificationChannel[];\n}\n\nexport default function NotificationSettingsForm({\n  initialSettings,\n  notificationChannels,\n}: NotificationSettingsFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n  const supabase = createClientComponentClient<Database>();\n\n  // Convert email_recipients array to string for form\n  const emailRecipientsStr = initialSettings.email_recipients\n    ? Array.isArray(initialSettings.email_recipients)\n      ? initialSettings.email_recipients.join(', ')\n      : initialSettings.email_recipients\n    : '';\n\n  // Initialize form with existing settings\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      default_notification_channels: initialSettings.default_notification_channels || [],\n      alert_threshold: initialSettings.alert_threshold || 3,\n      email_recipients: emailRecipientsStr,\n      slack_webhook_url: initialSettings.slack_webhook_url || '',\n      teams_webhook_url: initialSettings.teams_webhook_url || '',\n      send_daily_summary: initialSettings.send_daily_summary || false,\n      summary_time: initialSettings.summary_time || '08:00',\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Process email recipients\n      const emailRecipients = values.email_recipients\n        ? values.email_recipients.split(',').map((email) => email.trim())\n        : null;\n\n      const settingsData = {\n        ...values,\n        email_recipients: emailRecipients,\n        updated_at: new Date().toISOString(),\n      };\n\n      // Always UPSERT the global settings row\n      const { error: upsertError } = await supabase\n        .from('settings')\n        .upsert({ ...settingsData, id: 'global_settings' })\n        .eq('id', 'global_settings'); // Match on ID for upsert\n\n      if (upsertError) throw upsertError;\n\n      toast.success('Global settings updated successfully');\n      router.refresh();\n    } catch (err: any) {\n      console.error('Error saving settings:', err);\n      setError(err.message || 'Failed to save settings');\n      toast.error('Failed to update settings');\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Error</AlertTitle>\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Alert Notification Settings</h3>\n            <Separator />\n\n            <FormField\n              control={form.control}\n              name=\"alert_threshold\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Alert Threshold</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" min={0} max={100} {...field} />\n                  </FormControl>\n                  <FormDescription>\n                    Number of alerts required before sending notifications\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"slack_webhook_url\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Slack Webhook URL</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"https://hooks.slack.com/...\" {...field} />\n                    </FormControl>\n                    <FormDescription>Webhook URL for Slack notifications</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"teams_webhook_url\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Microsoft Teams Webhook URL</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"https://outlook.office.com/webhook/...\" {...field} />\n                    </FormControl>\n                    <FormDescription>Webhook URL for Microsoft Teams notifications</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email_recipients\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Recipients</FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"email1@example.com, email2@example.com\" {...field} />\n                  </FormControl>\n                  <FormDescription>Comma-separated list of email addresses</FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Daily Summary Settings</h3>\n            <Separator />\n\n            <FormField\n              control={form.control}\n              name=\"send_daily_summary\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                  <FormControl>\n                    <Checkbox checked={field.value} onCheckedChange={field.onChange} />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <FormLabel>Send Daily Summary</FormLabel>\n                    <FormDescription>\n                      Send a daily summary of alerts to all notification channels\n                    </FormDescription>\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            {form.watch('send_daily_summary') && (\n              <FormField\n                control={form.control}\n                name=\"summary_time\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Summary Time (UTC)</FormLabel>\n                    <FormControl>\n                      <Input type=\"time\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Time of day to send the summary (in UTC timezone)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n          </div>\n\n          <div className=\"flex justify-end\">\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Save Settings\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/admin/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/accounts/[id]/disconnect/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/accounts/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3494,3497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3494,3497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6019,6022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6019,6022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { Database } from '@/types/supabase';\nimport { createAdminClient } from '@/lib/supabase/admin'; // Use admin for updates?\nimport { z } from 'zod';\n\n// Placeholder for pausing rules/notifications\nasync function pauseAccountMonitoring(accountId: string) {\n  console.warn(`TODO: Implement pauseAccountMonitoring for ${accountId}`);\n  // This function would interact with your rule engine or notification system\n  // to stop processing/alerting for the disconnected account.\n}\n\n// Schema to validate the PATCH request body\nconst updateSchema = z.object({\n  rule_set_id: z.string().uuid().nullable(), // Allow null to set back to default\n});\n\n// Helper function to check user role (Replace with your actual implementation)\nasync function checkUserRole(userId: string, role: string): Promise<boolean> {\n  console.warn(`TODO: Implement checkUserRole for user ${userId}, role ${role}. Returning false.`);\n  // Example using raw_app_meta_data:\n  // const supabaseAdmin = createAdminClient();\n  // const { data, error } = await supabaseAdmin.auth.admin.getUserById(userId);\n  // if (error) return false;\n  // return data.user?.user_metadata?.role === role;\n  return false; // Placeholder\n}\n\nexport async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {\n  const accountId = params.id; // This is the Stripe Account ID (e.g., acct_...)\n\n  // Basic validation\n  if (!accountId || !accountId.startsWith('acct_')) {\n    return NextResponse.json({ error: 'Invalid account ID format.' }, { status: 400 });\n  }\n\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: { get: (name) => cookieStore.get(name)?.value } },\n  );\n\n  try {\n    // Get current user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n\n    // Use Admin client to update status, RLS might block user update\n    const supabaseAdmin = createAdminClient();\n\n    // Update the status in the database\n    // We select 'id' to check if the update affected any row owned by the user\n    // Note: RLS on SELECT applies even when using admin client if not bypassed?\n    // Alternative: check ownership before update.\n    const { data, error: updateError } = await supabaseAdmin\n      .from('stripe_accounts')\n      .update({ status: 'disconnected' })\n      .eq('stripe_account_id', accountId)\n      .eq('user_id', user.id) // Ensure user owns this account before updating\n      .select('id')\n      .maybeSingle();\n\n    if (updateError) {\n      console.error(`Error disconnecting account ${accountId}:`, updateError);\n      return NextResponse.json({ error: 'Failed to disconnect account.' }, { status: 500 });\n    }\n\n    if (!data) {\n      // This means no row was found matching the accountId AND userId\n      return NextResponse.json(\n        { error: 'Account not found or permission denied.' },\n        { status: 404 },\n      );\n    }\n\n    // Successfully marked as disconnected, now pause monitoring\n    await pauseAccountMonitoring(accountId);\n\n    return NextResponse.json({ message: 'Account disconnected successfully.' }, { status: 200 });\n  } catch (error: any) {\n    console.error(`Unexpected error disconnecting ${accountId}:`, error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\nexport async function PATCH(request: NextRequest, { params }: { params: { id: string } }) {\n  const accountId = params.id; // Stripe Account ID\n\n  // Basic validation\n  if (!accountId || !accountId.startsWith('acct_')) {\n    return NextResponse.json({ error: 'Invalid account ID format.' }, { status: 400 });\n  }\n\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: { get: (name) => cookieStore.get(name)?.value } },\n  );\n\n  try {\n    // Get current user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n\n    // Authorization: Check if user has 'admin' role\n    const isAdmin = await checkUserRole(user.id, 'admin');\n    if (!isAdmin) {\n      return NextResponse.json({ error: 'Forbidden: Requires admin role.' }, { status: 403 });\n    }\n\n    // Validate request body\n    const body = await request.json();\n    const validationResult = updateSchema.safeParse(body);\n    if (!validationResult.success) {\n      return NextResponse.json(\n        { error: 'Invalid request body', details: validationResult.error.flatten() },\n        { status: 400 },\n      );\n    }\n\n    const { rule_set_id } = validationResult.data;\n\n    // Use Admin client to perform the update\n    const supabaseAdmin = createAdminClient();\n\n    // Update the rule_set_id\n    const { error: updateError } = await supabaseAdmin\n      .from('stripe_accounts')\n      .update({ rule_set_id: rule_set_id })\n      .eq('stripe_account_id', accountId);\n    // No user_id check here as admin can update any account\n\n    if (updateError) {\n      // Handle specific errors like foreign key violation if rule_set_id doesn't exist\n      if (updateError.code === '23503') {\n        // foreign_key_violation\n        return NextResponse.json({ error: 'Invalid rule_set_id provided.' }, { status: 400 });\n      }\n      console.error(`Error updating rule_set_id for ${accountId}:`, updateError);\n      return NextResponse.json({ error: 'Failed to update rule set.' }, { status: 500 });\n    }\n\n    return NextResponse.json({ message: 'Rule set updated successfully.' }, { status: 200 });\n  } catch (error: any) {\n    if (error instanceof SyntaxError) {\n      // Handle JSON parsing error\n      return NextResponse.json({ error: 'Invalid JSON in request body' }, { status: 400 });\n    }\n    console.error(`Unexpected error updating ${accountId}:`, error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/accounts/[id]/webhook/rotate/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Stripe' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/utils/supabase/server';\nimport { supabaseAdmin } from '@/lib/supabase-admin';\nimport Stripe from 'stripe';\nimport { rotateAccountWebhook } from '@/lib/stripe-webhook';\nimport { logger } from '@/lib/logger';\n\n// Helper to get the authenticated user\nasync function getUser() {\n  const supabase = createClient();\n  return await supabase.auth.getUser();\n}\n\nexport async function POST(req: Request, { params }: { params: { id: string } }) {\n  try {\n    // Verify user is authenticated\n    const {\n      data: { user },\n    } = await getUser();\n    if (!user) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    // Verify ownership of the account\n    const { data: ca } = await supabaseAdmin\n      .from('connected_accounts')\n      .select('access_token')\n      .eq('stripe_account_id', params.id)\n      .eq('user_id', user.id)\n      .maybeSingle();\n\n    if (!ca) {\n      logger.warn({ userId: user.id, accountId: params.id }, 'Unauthorized account access attempt');\n      return new Response('Forbidden', { status: 403 });\n    }\n\n    // Rotate the webhook endpoint\n    const { id: webhookId, secret } = await rotateAccountWebhook(params.id, ca.access_token!);\n\n    // Update the webhook secret in the database\n    await supabaseAdmin\n      .from('connected_accounts')\n      .update({ webhook_secret: secret })\n      .eq('stripe_account_id', params.id);\n\n    logger.info(\n      { accountId: params.id, webhookId: webhookId },\n      'Webhook secret rotated successfully',\n    );\n\n    return Response.json({ id: webhookId, success: true });\n  } catch (error) {\n    logger.error({ accountId: params.id, error }, 'Error rotating webhook secret');\n    return new Response('Internal Server Error', { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/accounts/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2349,2352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2349,2352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { Database } from '@/types/supabase';\n\n// Select fields needed by the frontend\n// Join stripe_accounts with account_backfill_status\nconst ACCOUNTS_QUERY = `\n  id, \n  stripe_account_id, \n  status, \n  scope, \n  created_at, \n  rule_set_id,\n  rule_sets ( id, name ), \n  account_backfill_status ( status, progress, error_message, updated_at )\n`;\n\nexport async function GET(request: NextRequest) {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: { get: (name) => cookieStore.get(name)?.value } },\n  );\n\n  try {\n    // Get current user - RLS relies on this being set\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n\n    // Fetch accounts for the user\n    // RLS on stripe_accounts ensures user can only select their own.\n    const { data: accountsData, error: accountsError } = await supabase\n      .from('stripe_accounts')\n      .select(ACCOUNTS_QUERY)\n      .order('created_at', { ascending: false });\n\n    if (accountsError) {\n      console.error('Error fetching connected accounts:', accountsError);\n      return NextResponse.json({ error: 'Failed to fetch accounts' }, { status: 500 });\n    }\n\n    // Transform data slightly for frontend consistency?\n    // e.g., flatten backfill status\n    const transformedAccounts =\n      accountsData?.map((acc) => ({\n        ...acc,\n        backfill_status: acc.account_backfill_status[0]?.status ?? 'unknown',\n        backfill_progress: acc.account_backfill_status[0]?.progress ?? 0,\n        backfill_error: acc.account_backfill_status[0]?.error_message ?? null,\n        backfill_updated_at: acc.account_backfill_status[0]?.updated_at ?? null,\n        rule_set_name: acc.rule_sets?.name ?? 'Default', // Provide default name if null/no join\n        // Remove nested objects if not needed\n        account_backfill_status: undefined,\n        rule_sets: undefined,\n      })) ?? [];\n\n    return NextResponse.json(transformedAccounts);\n  } catch (error: any) {\n    console.error('Unexpected error in /api/accounts GET:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/admin/accounts/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":24,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2000,2003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2000,2003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used. Allowed unused args must match /^_/u.","line":71,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4682,4685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4682,4685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { z } from 'zod';\n\n// Helper function to check admin role (can be shared/imported)\nasync function checkAdmin(\n  supabase: ReturnType<typeof createRouteHandlerClient<Database>>,\n): Promise<boolean> {\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser();\n  return !userError && !!user && user.app_metadata?.role === 'admin';\n}\n\n// Zod schema for updating account's rule set\nconst updateAccountSchema = z.object({\n  rule_set_id: z.string().uuid({ message: 'Invalid Rule Set ID.' }).nullable(), // Allow setting to null\n});\n\n// GET: Fetch all accounts with their assigned rule set names\nexport async function GET(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  try {\n    // Fetch accounts and join with rule_sets to get the name\n    // Adjust column names ('stripe_account_id', 'account_name', 'status') as per your actual schema\n    const { data, error } = await supabase\n      .from('accounts')\n      .select(\n        `\n        id, \n        stripe_account_id, \n        account_name, \n        status, \n        created_at, \n        rule_set_id,\n        rule_sets ( name )\n      `,\n      )\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n\n    // Process data to flatten the rule set name\n    const processedData = data.map((account) => ({\n      ...account,\n      rule_set_name: account.rule_sets?.name || 'Default', // Show 'Default' or similar if null/no rule set\n      rule_sets: undefined, // Remove the nested object\n    }));\n\n    return NextResponse.json(processedData);\n  } catch (error: any) {\n    console.error('Error fetching accounts:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch accounts', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n\n// PATCH: Update the rule_set_id for a specific account\nexport async function PATCH(request: Request, { params }: { params: { accountId?: string } }) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  // Get account ID from URL path (e.g., /api/admin/accounts/[accountId])\n  // This requires the route file to be named `app/api/admin/accounts/[accountId]/route.ts`\n  // OR extract from query/body if not using dynamic route segments.\n  // For simplicity, let's assume it comes in the request body for now, similar to PUT.\n  // Revisit this if using dynamic route segments.\n\n  // Let's expect the account ID in the URL search params like /api/admin/accounts?id=xxx\n  const { searchParams } = new URL(request.url);\n  const accountId = searchParams.get('id');\n\n  if (!accountId || !z.string().uuid().safeParse(accountId).success) {\n    return NextResponse.json(\n      { error: 'Valid Account ID is required in query parameters' },\n      { status: 400 },\n    );\n  }\n\n  try {\n    const body = await request.json();\n    const validation = updateAccountSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Invalid input', details: validation.error.errors },\n        { status: 400 },\n      );\n    }\n\n    const { rule_set_id } = validation.data;\n\n    // If rule_set_id is provided, verify it exists before assigning\n    if (rule_set_id) {\n      const { data: ruleSetExists, error: ruleSetError } = await supabase\n        .from('rule_sets')\n        .select('id')\n        .eq('id', rule_set_id)\n        .maybeSingle();\n\n      if (ruleSetError) throw ruleSetError;\n      if (!ruleSetExists) {\n        return NextResponse.json(\n          { error: 'Specified Rule Set ID does not exist.' },\n          { status: 404 },\n        );\n      }\n    }\n\n    // Update the account\n    const { data, error } = await supabase\n      .from('accounts')\n      .update({ rule_set_id: rule_set_id })\n      .eq('id', accountId)\n      .select('id, rule_set_id') // Select updated fields\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        // Not found\n        return NextResponse.json({ error: 'Account not found' }, { status: 404 });\n      }\n      throw error;\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error updating account rule set:', error);\n    return NextResponse.json(\n      { error: 'Failed to update account rule set', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/admin/retention-status/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextResponse } from 'next/server';\nimport { Database } from '@/types/supabase';\n\nconst JOB_NAME = 'guardian_retention'; // Match the job name used in the procedure\n\nexport async function GET(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, // Use anon key for user context\n    {\n      cookies: {\n        get: (name: string) => cookieStore.get(name)?.value,\n      },\n    },\n  );\n\n  // Check user authentication\n  const {\n    data: { session },\n    error: sessionError,\n  } = await supabase.auth.getSession();\n  if (sessionError || !session) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  // Optional: Add admin role check if this API is only for admins\n  // const isAdmin = session.user?.user_metadata?.role === 'admin';\n  // if (!isAdmin) {\n  //   return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  // }\n\n  // Fetch the last run time for the specific job\n  // Assumes RLS allows authenticated users to read this table/row\n  const { data, error } = await supabase\n    .from('job_heartbeat')\n    .select('ran_at')\n    .eq('job_name', JOB_NAME)\n    .maybeSingle();\n\n  if (error) {\n    console.error('Error fetching retention job heartbeat:', error);\n    return NextResponse.json({ error: 'Failed to fetch retention status' }, { status: 500 });\n  }\n\n  // If no heartbeat found, return null or a specific indicator\n  if (!data) {\n    // You might return 404 or just null ranAt depending on how UI handles it\n    return NextResponse.json({\n      ranAt: null,\n      message: 'Retention job has not run yet or heartbeat not found.',\n    });\n  }\n\n  // Return the last run timestamp\n  return NextResponse.json({ ranAt: data.ran_at });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/admin/rule-sets/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1693,1696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1693,1696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3080,3083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3080,3083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5492,5495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5492,5495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7535,7538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7535,7538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { Database, Json } from '@/types/supabase';\nimport { z } from 'zod';\n\n// Zod schema for basic JSON object validation (can be refined)\nconst ruleSetConfigSchema = z\n  .record(z.any())\n  .refine((val) => typeof val === 'object' && val !== null && !Array.isArray(val), {\n    message: 'Rule config must be a valid JSON object.',\n  });\n\n// Zod schema for POST/PUT payload\nconst ruleSetPayloadSchema = z.object({\n  id: z.string().uuid().optional(), // Optional for POST, required for PUT\n  name: z.string().min(1, { message: 'Rule set name cannot be empty.' }),\n  config: ruleSetConfigSchema,\n});\n\n// Helper function to check admin role\nasync function checkAdmin(\n  supabase: ReturnType<typeof createRouteHandlerClient<Database>>,\n): Promise<boolean> {\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser();\n  if (userError || !user) {\n    return false;\n  }\n  // Adjust based on where the role is stored (e.g., user.app_metadata?.role)\n  return user.app_metadata?.role === 'admin';\n}\n\n// GET: Fetch all rule sets\nexport async function GET(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  try {\n    const { data, error } = await supabase.from('rule_sets').select('*').order('name');\n\n    if (error) throw error;\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error fetching rule sets:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch rule sets', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n\n// POST: Create a new rule set\nexport async function POST(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  try {\n    const body = await request.json();\n    const validation = ruleSetPayloadSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Invalid input', details: validation.error.errors },\n        { status: 400 },\n      );\n    }\n\n    const { name, config } = validation.data;\n\n    // Prevent creating another rule set named 'default' (case-insensitive check)\n    if (name.toLowerCase() === 'default') {\n      return NextResponse.json(\n        { error: \"Cannot create another rule set named 'default'.\" },\n        { status: 400 },\n      );\n    }\n\n    const { data, error } = await supabase\n      .from('rule_sets')\n      .insert({ name, config: config as Json })\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    return NextResponse.json(data, { status: 201 });\n  } catch (error: any) {\n    console.error('Error creating rule set:', error);\n    if (error.code === '23505') {\n      // Unique constraint violation (e.g., name)\n      return NextResponse.json({ error: 'Rule set name already exists' }, { status: 409 });\n    }\n    return NextResponse.json(\n      { error: 'Failed to create rule set', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT: Update an existing rule set\nexport async function PUT(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  try {\n    const body = await request.json();\n    // Add id validation for PUT\n    const validation = ruleSetPayloadSchema\n      .extend({\n        id: z.string().uuid({ message: 'Valid Rule Set ID is required for update.' }),\n      })\n      .safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Invalid input', details: validation.error.errors },\n        { status: 400 },\n      );\n    }\n\n    const { id, name, config } = validation.data;\n\n    // Prevent renaming the 'default' rule set or renaming another TO 'default'\n    if (id) {\n      const { data: existingRuleSet, error: fetchError } = await supabase\n        .from('rule_sets')\n        .select('name')\n        .eq('id', id)\n        .single();\n\n      if (fetchError || !existingRuleSet) {\n        return NextResponse.json({ error: 'Rule set not found' }, { status: 404 });\n      }\n\n      if (existingRuleSet.name === 'default' && name !== 'default') {\n        return NextResponse.json(\n          { error: \"Cannot rename the 'default' rule set.\" },\n          { status: 400 },\n        );\n      }\n      if (existingRuleSet.name !== 'default' && name.toLowerCase() === 'default') {\n        return NextResponse.json(\n          { error: \"Cannot rename a rule set to 'default'.\" },\n          { status: 400 },\n        );\n      }\n    }\n\n    const { data, error } = await supabase\n      .from('rule_sets')\n      .update({ name, config: config as Json })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n\n    if (!data) {\n      return NextResponse.json({ error: 'Rule set not found' }, { status: 404 });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error updating rule set:', error);\n    if (error.code === '23505') {\n      // Unique constraint violation (e.g., name)\n      return NextResponse.json({ error: 'Rule set name already exists' }, { status: 409 });\n    }\n    return NextResponse.json(\n      { error: 'Failed to update rule set', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n\n// DELETE: Delete a rule set\nexport async function DELETE(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get('id');\n\n  if (!id || !z.string().uuid().safeParse(id).success) {\n    return NextResponse.json({ error: 'Valid Rule Set ID is required' }, { status: 400 });\n  }\n\n  try {\n    // Check if it's the 'default' rule set before deleting\n    const { data: ruleSet, error: fetchError } = await supabase\n      .from('rule_sets')\n      .select('name')\n      .eq('id', id)\n      .single();\n\n    if (fetchError) {\n      if (fetchError.code === 'PGRST116') {\n        // Not found\n        return NextResponse.json({ error: 'Rule set not found' }, { status: 404 });\n      }\n      throw fetchError; // Other fetch error\n    }\n\n    if (ruleSet?.name === 'default') {\n      return NextResponse.json({ error: \"Cannot delete the 'default' rule set.\" }, { status: 400 });\n    }\n\n    // TODO: Check if the rule set is currently assigned to any accounts before deleting?\n    // This might require querying the `accounts` table (or wherever rule sets are assigned).\n    // If assigned, return a 409 Conflict or similar error.\n\n    const { error: deleteError } = await supabase.from('rule_sets').delete().eq('id', id);\n\n    if (deleteError) throw deleteError;\n\n    return NextResponse.json({ message: 'Rule set deleted successfully' }, { status: 200 });\n  } catch (error: any) {\n    console.error('Error deleting rule set:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete rule set', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/admin/settings/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":37,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2016,2019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2016,2019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3357,3360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3357,3360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { z } from 'zod';\n\n// Zod schema for settings payload validation\nconst settingsSchema = z.object({\n  id: z.string().min(1), // Assuming a primary key like 'global_settings' or a UUID\n  slack_webhook_url: z\n    .string()\n    .url({ message: 'Invalid Slack Webhook URL format.' })\n    .or(z.literal(''))\n    .nullable(),\n  notification_emails: z\n    .array(z.string().email({ message: 'Invalid email format found.' }))\n    .nullable(),\n  slack_notifications_enabled: z.boolean().nullable(),\n  email_notifications_enabled: z.boolean().nullable(),\n  // Add other settings fields here if needed\n});\n\n// Helper function to check admin role (can be shared/imported)\nasync function checkAdmin(\n  supabase: ReturnType<typeof createRouteHandlerClient<Database>>,\n): Promise<boolean> {\n  const {\n    data: { user },\n    error: userError,\n  } = await supabase.auth.getUser();\n  return !userError && !!user && user.app_metadata?.role === 'admin';\n}\n\nconst SETTINGS_ROW_ID = 'global_settings'; // Define a constant for the settings row ID\n\n// GET: Fetch global settings\nexport async function GET(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  try {\n    // Attempt to fetch the specific settings row\n    const { data, error } = await supabase\n      .from('settings')\n      .select('*')\n      .eq('id', SETTINGS_ROW_ID) // Use the constant ID\n      .maybeSingle(); // Use maybeSingle as it might not exist initially\n\n    if (error) throw error;\n\n    // Return the found settings or an empty object if null (doesn't exist yet)\n    return NextResponse.json(data || {});\n  } catch (error: any) {\n    console.error('Error fetching settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch settings', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n\n// PUT: Update (or create) global settings\nexport async function PUT(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  const isAdmin = await checkAdmin(supabase);\n  if (!isAdmin) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  try {\n    const body = await request.json();\n\n    // Ensure the ID matches the expected global ID\n    if (body.id !== SETTINGS_ROW_ID) {\n      return NextResponse.json(\n        { error: `Invalid settings ID. Expected '${SETTINGS_ROW_ID}'.` },\n        { status: 400 },\n      );\n    }\n\n    const validation = settingsSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Invalid input', details: validation.error.errors },\n        { status: 400 },\n      );\n    }\n\n    const validatedData = validation.data;\n\n    // Upsert the settings using the constant ID\n    const { data, error } = await supabase.from('settings').upsert(validatedData).select().single();\n\n    if (error) throw error;\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error saving settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to save settings', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/alerts/[id]/[alertId]/notification-status/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/alerts/[id]/[alertId]/retry/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/alerts/[id]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cookies' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createClient } from '@/utils/supabase/server';\n\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const alertId = params.id;\n    const { resolved } = await request.json();\n\n    // Get the user session\n    const supabase = createClient();\n    const { data: { session } } = await supabase.auth.getSession();\n\n    if (!session) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const userId = session.user.id;\n\n    // First, get the alert to verify ownership\n    const { data: alert, error: fetchError } = await supabase\n      .from('alerts')\n      .select('*, account:stripe_account_id')\n      .eq('id', alertId)\n      .single();\n\n    if (fetchError || !alert) {\n      return NextResponse.json(\n        { error: 'Alert not found' },\n        { status: 404 }\n      );\n    }\n\n    // Get user's connected accounts to verify ownership\n    const { data: userAccounts, error: accountsError } = await supabase\n      .from('connected_accounts')\n      .select('stripe_account_id')\n      .eq('user_id', userId);\n\n    if (accountsError) {\n      return NextResponse.json(\n        { error: 'Failed to verify account ownership' },\n        { status: 500 }\n      );\n    }\n\n    // Check if this alert belongs to one of the user's accounts\n    const userAccountIds = userAccounts.map(account => account.stripe_account_id);\n    if (!userAccountIds.includes(alert.stripe_account_id)) {\n      return NextResponse.json(\n        { error: 'You do not have permission to update this alert' },\n        { status: 403 }\n      );\n    }\n\n    // Update the alert\n    const { data, error: updateError } = await supabase\n      .from('alerts')\n      .update({ resolved })\n      .eq('id', alertId)\n      .select()\n      .single();\n\n    if (updateError) {\n      return NextResponse.json(\n        { error: 'Failed to update alert' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error('Error updating alert:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/backfill-status/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2294,2297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2294,2297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { Database } from '@/types/supabase';\nimport { z } from 'zod';\n\n// Input validation schema\nconst schema = z.object({\n  accountId: z.string().startsWith('acct_'),\n});\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const accountId = searchParams.get('accountId');\n\n  // Validate input\n  const validationResult = schema.safeParse({ accountId });\n  if (!validationResult.success) {\n    return NextResponse.json({ error: 'Invalid account ID format.' }, { status: 400 });\n  }\n\n  const validatedAccountId = validationResult.data.accountId;\n\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: { get: (name) => cookieStore.get(name)?.value } },\n  );\n\n  try {\n    // Get current user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });\n    }\n\n    // Fetch status for the specific account for this user\n    // RLS policy ensures the user can only fetch their own records\n    const { data: statusData, error: statusError } = await supabase\n      .from('account_backfill_status')\n      .select('account_id, status, progress, error_message, updated_at') // Select only needed fields\n      .eq('account_id', validatedAccountId)\n      .maybeSingle(); // Expect 0 or 1 result due to RLS + accountId filter\n\n    if (statusError) {\n      console.error('Error fetching backfill status:', statusError);\n      return NextResponse.json({ error: 'Failed to fetch status' }, { status: 500 });\n    }\n\n    if (!statusData) {\n      // This can happen if the account exists but the status record hasn't been created yet,\n      // or if the accountId doesn't belong to the user (due to RLS)\n      return NextResponse.json(\n        { error: 'Backfill status not found for this account.' },\n        { status: 404 },\n      );\n    }\n\n    // Return the status data\n    return NextResponse.json(statusData);\n  } catch (error: any) {\n    console.error('Unexpected error in /api/backfill-status:', error);\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/billing/checkout/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4328,4331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4328,4331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport Stripe from 'stripe';\n\n// Initialize Stripe client (ensure STRIPE_SECRET_KEY is set)\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {\n  apiVersion: '2024-04-10', // Use the latest API version\n  typescript: true,\n});\n\nconst stripePriceIdPro = process.env.STRIPE_PRICE_PRO;\nconst stripeWebhookSecretBilling = process.env.STRIPE_WEBHOOK_BILLING;\nconst siteUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';\n\n// Log required env vars on cold start (will log once per instance)\nif (!stripePriceIdPro || !stripeWebhookSecretBilling) {\n  // Only show warning in production, not in development or preview\n  if (process.env.VERCEL_ENV === 'production') {\n    console.warn(`\n      ************************************************************\n      * WARNING: Missing Stripe Billing Environment Variables!   *\n      * Please add the following to your .env.local file:        *\n      * STRIPE_PRICE_PRO=<your_stripe_pro_plan_price_id>         *\n      * STRIPE_WEBHOOK_BILLING=<your_stripe_billing_webhook_secret> *\n      ************************************************************\n      `);\n  }\n}\n\nexport async function POST(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Fetch settings to get the Stripe Customer ID if it exists\n    const { data: settings, error: settingsError } = await supabase\n      .from('settings')\n      .select('stripe_customer_id')\n      .eq('id', 'global_settings') // Assuming global settings linked to the authenticated user?\n      // OR: .eq('user_id', user.id) if settings are per-user\n      .single();\n\n    if (settingsError && settingsError.code !== 'PGRST116') {\n      // Ignore 'not found' error\n      throw settingsError;\n    }\n\n    let customerId = settings?.stripe_customer_id;\n\n    // Create a Stripe Customer if one doesn't exist for this user\n    if (!customerId) {\n      const customer = await stripe.customers.create({\n        email: user.email,\n        // Add metadata to link Stripe Customer to your Supabase user/account\n        metadata: {\n          supabaseUserId: user.id,\n          // Add other identifiers if needed\n        },\n      });\n      customerId = customer.id;\n\n      // Update the settings table with the new Stripe Customer ID\n      // Note: This assumes a single 'global_settings' row. Adjust if settings are per-user.\n      const { error: updateError } = await supabase\n        .from('settings')\n        .update({ stripe_customer_id: customerId })\n        .eq('id', 'global_settings');\n      // OR: .eq('user_id', user.id);\n\n      if (updateError) {\n        console.error('Failed to update settings with Stripe Customer ID:', updateError);\n        // Proceed with checkout anyway, but log the error\n      }\n    }\n\n    if (!stripePriceIdPro) {\n      throw new Error('Stripe Price ID for Pro plan is not configured.');\n    }\n\n    // Create a Stripe Checkout session for subscription\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      mode: 'subscription',\n      customer: customerId,\n      line_items: [\n        {\n          price: stripePriceIdPro, // The Price ID for your Pro plan\n          quantity: 1,\n        },\n      ],\n      success_url: `${siteUrl}/billing?success=true`, // Redirect URL on successful payment\n      cancel_url: `${siteUrl}/billing?cancelled=true`, // Redirect URL if the user cancels\n      // Allow promotion codes if desired\n      // allow_promotion_codes: true,\n      // Add metadata if needed\n      // subscription_data: {\n      //   metadata: { supabaseUserId: user.id }\n      // },\n    });\n\n    if (!session.url) {\n      throw new Error('Failed to create Stripe Checkout session URL.');\n    }\n\n    // Return the session URL to redirect the user\n    return NextResponse.json({ sessionId: session.id, url: session.url });\n  } catch (error: any) {\n    console.error('Stripe Checkout Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create checkout session', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/billing/portal/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'request' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2741,2744],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2741,2744],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport Stripe from 'stripe';\n\n// Initialize Stripe client\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {\n  apiVersion: '2024-04-10',\n  typescript: true,\n});\n\nconst siteUrl = process.env.NEXT_PUBLIC_URL || 'http://localhost:3000';\n\n// Log required env vars on cold start (duplicate from checkout, but ok)\nif (!process.env.STRIPE_PRICE_PRO || !process.env.STRIPE_WEBHOOK_BILLING) {\n  // Only show warning in production, not in development or preview\n  if (process.env.VERCEL_ENV === 'production') {\n    console.warn(`\n      ************************************************************\n      * WARNING: Missing Stripe Billing Environment Variables!   *\n      * (STRIPE_PRICE_PRO, STRIPE_WEBHOOK_BILLING)               *\n      * See console logs from /api/billing/checkout for details. *\n      ************************************************************\n      `);\n  }\n}\n\nexport async function POST(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore });\n\n  try {\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Fetch the Stripe Customer ID from settings\n    const { data: settings, error: settingsError } = await supabase\n      .from('settings')\n      .select('stripe_customer_id')\n      .eq('id', 'global_settings') // Adjust if settings are per-user\n      // .eq('user_id', user.id)\n      .single();\n\n    if (settingsError || !settings?.stripe_customer_id) {\n      console.error(\n        'Billing Portal Error: Stripe Customer ID not found for user:',\n        user.id,\n        settingsError,\n      );\n      // Optionally, redirect to a page explaining the issue or try creating the customer again.\n      return NextResponse.json(\n        { error: 'Stripe customer information not found.' },\n        { status: 404 },\n      );\n    }\n\n    const stripeCustomerId = settings.stripe_customer_id;\n\n    // Create a Stripe Billing Portal session\n    const portalSession = await stripe.billingPortal.sessions.create({\n      customer: stripeCustomerId,\n      return_url: `${siteUrl}/billing`, // URL to return to after managing subscription\n    });\n\n    if (!portalSession.url) {\n      throw new Error('Failed to create Stripe Billing Portal session URL.');\n    }\n\n    // Return the portal session URL\n    return NextResponse.json({ url: portalSession.url });\n  } catch (error: any) {\n    console.error('Stripe Billing Portal Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to create billing portal session', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/contact/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/feedback/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":44,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { NextResponse } from 'next/server';\nimport { Database } from '@/types/supabase';\nimport { Resend } from 'resend';\n\nconst RESEND_API_KEY = process.env.RESEND_API_KEY;\nconst FEEDBACK_RECIPIENT_EMAIL = process.env.FEEDBACK_RECIPIENT_EMAIL; // e.g., 'founders@example.com'\nconst RATE_LIMIT_MINUTES = 10;\n\nlet resend: Resend | null = null;\nif (RESEND_API_KEY) {\n  resend = new Resend(RESEND_API_KEY);\n} else {\n  console.warn('[API/Feedback] RESEND_API_KEY not set. Feedback email notifications disabled.');\n}\n\nexport async function POST(request: Request) {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get: (name: string) => cookieStore.get(name)?.value,\n      },\n    },\n  );\n\n  const {\n    data: { session },\n    error: sessionError,\n  } = await supabase.auth.getSession();\n\n  if (sessionError || !session) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const userId = session.user.id;\n  let feedbackData: { message?: string; email?: string };\n\n  try {\n    feedbackData = await request.json();\n  } catch (e) {\n    return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 });\n  }\n\n  const { message, email } = feedbackData;\n\n  if (!message || typeof message !== 'string' || message.trim().length === 0) {\n    return NextResponse.json({ error: 'Message is required and cannot be empty' }, { status: 400 });\n  }\n  if (email && typeof email !== 'string') {\n    return NextResponse.json({ error: 'Invalid email format' }, { status: 400 });\n  }\n\n  // --- Rate Limiting Check ---\n  try {\n    const rateLimitCutoff = new Date(Date.now() - RATE_LIMIT_MINUTES * 60 * 1000).toISOString();\n\n    const { data: recentFeedback, error: rateLimitError } = await supabase\n      .from('feedback')\n      .select('created_at')\n      .eq('user_id', userId)\n      .gte('created_at', rateLimitCutoff) // Check for feedback within the window\n      .limit(1); // Only need to know if at least one exists\n\n    if (rateLimitError) {\n      console.error('[API/Feedback] Rate limit check failed:', rateLimitError);\n      // Proceed cautiously, maybe allow submission but log the error\n    } else if (recentFeedback && recentFeedback.length > 0) {\n      console.log(`[API/Feedback] Rate limit hit for user: ${userId}`);\n      return NextResponse.json(\n        { error: `Rate limit exceeded. Please wait ${RATE_LIMIT_MINUTES} minutes.` },\n        { status: 429 },\n      );\n    }\n  } catch (e) {\n    console.error('[API/Feedback] Exception during rate limit check:', e);\n    // Fail open or closed? Failing open here.\n  }\n  // --- End Rate Limiting Check ---\n\n  // Insert feedback into the database\n  const { error: insertError } = await supabase.from('feedback').insert({\n    user_id: userId,\n    message: message.trim(),\n    email: email?.trim() || session.user.email, // Use provided email or user's auth email\n  });\n\n  if (insertError) {\n    console.error('[API/Feedback] Failed to insert feedback:', insertError);\n    return NextResponse.json(\n      { error: 'Failed to submit feedback', details: insertError.message },\n      { status: 500 },\n    );\n  }\n\n  // Send notification (Email via Resend)\n  if (resend && FEEDBACK_RECIPIENT_EMAIL) {\n    try {\n      await resend.emails.send({\n        from: 'Guardian Feedback <feedback@noreply.dock108.ai>', // TODO: Configure verified sender domain\n        to: FEEDBACK_RECIPIENT_EMAIL,\n        subject: `New Guardian Feedback from ${session.user.email}`,\n        html: `\n                    <p><strong>User:</strong> ${session.user.email} (${userId})</p>\n                    <p><strong>Provided Email:</strong> ${email || 'N/A'}</p>\n                    <p><strong>Message:</strong></p>\n                    <pre>${message.trim()}</pre>\n                `,\n      });\n      console.log(`[API/Feedback] Sent feedback notification for user: ${userId}`);\n    } catch (emailError) {\n      console.error('[API/Feedback] Failed to send feedback email notification:', emailError);\n      // Don't fail the request if email fails, just log it.\n    }\n  } else if (!resend) {\n    console.warn('[API/Feedback] Skipping email notification (Resend not configured).');\n  } else if (!FEEDBACK_RECIPIENT_EMAIL) {\n    console.warn('[API/Feedback] Skipping email notification (FEEDBACK_RECIPIENT_EMAIL not set).');\n  }\n\n  return NextResponse.json({ message: 'Feedback submitted successfully' }, { status: 201 });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/guardian-reactor/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/guardian/alerts/feedback/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2608,2611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2608,2611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5199,5202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5199,5202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5583,5586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5583,5586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9000,9003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9000,9003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@supabase/ssr';\nimport { supabaseAdmin } from '@/lib/supabase-admin'; // Use admin for upsert/read counts\nimport { Database } from '@/types/supabase';\n// import { logger } from '@/lib/logger'; // Assuming logger exists\n\n// --- Metrics Setup (Placeholder - Requires actual prom-client integration) --- //\nimport { register, Counter } from 'prom-client'; // Assuming metrics setup\n\n// Ensure this is only registered once\nlet falsePositiveCounter = register.getSingleMetric(\n  'guardian_alert_false_positive_feedback_total',\n) as Counter | undefined;\nif (!falsePositiveCounter) {\n  falsePositiveCounter = new Counter({\n    name: 'guardian_alert_false_positive_feedback_total',\n    help: 'Total number of alerts marked as false positive, partitioned by rule type.',\n    labelNames: ['rule'],\n  });\n}\n// --- End Metrics Setup --- //\n\n// Explicitly mark route as dynamic to prevent caching issues\nexport const dynamic = 'force-dynamic';\n\n// --- POST Handler (Submit/Update Feedback) --- //\nexport async function POST(req: Request) {\n  const cookieStore = cookies();\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get: (name) => cookieStore.get(name)?.value,\n      },\n    },\n  );\n\n  // logger.info('Received POST request to /api/guardian/alerts/feedback');\n  console.log('Received POST request to /api/guardian/alerts/feedback');\n\n  const {\n    data: { session },\n    error: sessionError,\n  } = await supabase.auth.getSession();\n\n  if (!session || sessionError) {\n    // logger.warn('Unauthorized feedback submission attempt', { error: sessionError });\n    console.warn('Unauthorized feedback submission attempt', { error: sessionError });\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  let body: { alertId: string; verdict: 'false_positive' | 'legit'; comment?: string };\n  try {\n    body = await req.json();\n    if (\n      !body.alertId ||\n      typeof body.alertId !== 'string' ||\n      !body.verdict ||\n      (body.verdict !== 'false_positive' && body.verdict !== 'legit')\n    ) {\n      throw new Error('Missing or invalid alertId or verdict');\n    }\n    // logger.info('Parsed feedback request body', { userId: session.user.id, alertId: body.alertId, verdict: body.verdict });\n    console.log('Parsed feedback request body', {\n      userId: session.user.id,\n      alertId: body.alertId,\n      verdict: body.verdict,\n    });\n  } catch (error: any) {\n    // logger.warn('Invalid feedback request body', { error: error.message });\n    console.warn('Invalid feedback request body', { error: error.message });\n    return NextResponse.json(\n      { error: 'Invalid request body', details: error.message },\n      { status: 400 },\n    );\n  }\n\n  try {\n    const feedbackData: Database['public']['Tables']['alert_feedback']['Insert'] = {\n      alert_id: body.alertId,\n      user_id: session.user.id,\n      verdict: body.verdict,\n      comment: body.comment || null,\n      // created_at and updated_at are handled by DB defaults/triggers\n    };\n\n    const { data, error: upsertError } = await supabaseAdmin\n      .from('alert_feedback')\n      .upsert(feedbackData, {\n        onConflict: 'alert_id, user_id', // Specify conflict target\n      })\n      .select('id') // Select something to confirm success\n      .single(); // Expect one row affected\n\n    if (upsertError) {\n      // logger.error('Error upserting alert feedback', { userId: session.user.id, alertId: body.alertId, error: upsertError });\n      console.error('Error upserting alert feedback', {\n        userId: session.user.id,\n        alertId: body.alertId,\n        error: upsertError,\n      });\n      throw upsertError;\n    }\n\n    // logger.info('Successfully recorded alert feedback', { userId: session.user.id, alertId: body.alertId, feedbackId: data?.id });\n    console.log('Successfully recorded alert feedback', {\n      userId: session.user.id,\n      alertId: body.alertId,\n      feedbackId: data?.id,\n    });\n\n    // --- Metrics Increment --- //\n    // Increment counter if it was a false positive\n    if (body.verdict === 'false_positive' && falsePositiveCounter) {\n      try {\n        // Need to fetch the alert rule type\n        const { data: alertData, error: alertFetchError } = await supabaseAdmin\n          .from('alerts')\n          .select('alert_type')\n          .eq('id', body.alertId)\n          .maybeSingle();\n\n        if (alertFetchError || !alertData) {\n          // logger.error('Failed to fetch alert type for metrics', { alertId: body.alertId, error: alertFetchError });\n          console.error('Failed to fetch alert type for metrics', {\n            alertId: body.alertId,\n            error: alertFetchError,\n          });\n        } else {\n          falsePositiveCounter.labels(alertData.alert_type || 'unknown').inc();\n          // logger.info('Incremented false_positive_total metric', { rule: alertData.alert_type });\n          console.log('Incremented false_positive_total metric', { rule: alertData.alert_type });\n        }\n      } catch (metricError: any) {\n        // logger.error('Error incrementing metrics counter', { error: metricError });\n        console.error('Error incrementing metrics counter', { error: metricError.message });\n      }\n    }\n    // --- End Metrics Increment --- //\n\n    return NextResponse.json({ success: true, feedbackId: data?.id }, { status: 200 }); // 200 OK indicates update/creation\n  } catch (error: any) {\n    // logger.error('Internal server error processing feedback', { userId: session.user.id, alertId: body.alertId, error: error.message });\n    console.error('Internal server error processing feedback', {\n      userId: session.user.id,\n      alertId: body.alertId,\n      error: error.message,\n    });\n    return NextResponse.json(\n      { error: 'Failed to record feedback', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n\n// --- GET Handler (Fetch Feedback Counts) --- //\nexport async function GET(req: Request) {\n  const cookieStore = cookies();\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get: (name) => cookieStore.get(name)?.value,\n      },\n    },\n  );\n\n  // logger.info('Received GET request to /api/guardian/alerts/feedback');\n  console.log('Received GET request to /api/guardian/alerts/feedback');\n\n  const {\n    data: { session },\n    error: sessionError,\n  } = await supabase.auth.getSession();\n\n  if (!session || sessionError) {\n    // logger.warn('Unauthorized feedback count request', { error: sessionError });\n    console.warn('Unauthorized feedback count request', { error: sessionError });\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  const url = new URL(req.url);\n  const alertId = url.searchParams.get('alertId');\n\n  if (!alertId || typeof alertId !== 'string') {\n    // logger.warn('Missing or invalid alertId query parameter for GET feedback');\n    console.warn('Missing or invalid alertId query parameter for GET feedback');\n    return NextResponse.json({ error: 'Missing or invalid alertId parameter' }, { status: 400 });\n  }\n\n  // logger.info('Fetching feedback counts', { userId: session.user.id, alertId });\n  console.log('Fetching feedback counts', { userId: session.user.id, alertId });\n\n  try {\n    // Use an RPC function for aggregation might be more efficient, but direct query is fine for now.\n    const { data, error: countError } = await supabaseAdmin\n      .from('alert_feedback')\n      .select('verdict, count', { count: 'exact' }) // Select verdict and count\n      .eq('alert_id', alertId)\n      .in('verdict', ['false_positive', 'legit']) // Ensure we only count valid verdicts\n      .filter('user_id', 'not.is', 'null') // Exclude potentially null user_ids if set null on delete\n      .returns<{ verdict: string; count: number }[]>(); // Type the return\n\n    if (countError) {\n      // logger.error('Error fetching feedback counts', { userId: session.user.id, alertId, error: countError });\n      console.error('Error fetching feedback counts', {\n        userId: session.user.id,\n        alertId,\n        error: countError,\n      });\n      throw countError;\n    }\n\n    // Process the counts into the desired format\n    const counts = {\n      false_positive: 0,\n      legit: 0,\n    };\n\n    data?.forEach((row) => {\n      if (row.verdict === 'false_positive') {\n        counts.false_positive = row.count;\n      } else if (row.verdict === 'legit') {\n        counts.legit = row.count;\n      }\n    });\n\n    // logger.info('Successfully fetched feedback counts', { userId: session.user.id, alertId, counts });\n    console.log('Successfully fetched feedback counts', {\n      userId: session.user.id,\n      alertId,\n      counts,\n    });\n\n    return NextResponse.json(counts, { status: 200 });\n  } catch (error: any) {\n    // logger.error('Internal server error fetching feedback counts', { userId: session.user.id, alertId, error: error.message });\n    console.error('Internal server error fetching feedback counts', {\n      userId: session.user.id,\n      alertId,\n      error: error.message,\n    });\n    return NextResponse.json(\n      { error: 'Failed to fetch feedback counts', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/guardian/alerts/mark-read/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/metrics/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":27,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2890,2893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2890,2893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3251,3254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3251,3254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { register, retentionLastRunTimestampSeconds } from '@/lib/metrics/registry';\nimport { Buffer } from 'buffer'; // Node.js Buffer for basic auth decoding\nimport { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { Database } from '@/types/supabase';\n\nconst JOB_NAME = 'guardian_retention'; // Must match the job name in the heartbeat table\n\n// Helper function for Basic Auth check\nfunction checkAuth(request: Request): boolean {\n  const expectedKey = process.env.PROM_METRICS_KEY;\n  // If no key is set, allow access only in non-production environments\n  if (!expectedKey) {\n    return process.env.NODE_ENV !== 'production';\n  }\n\n  const authHeader = request.headers.get('Authorization');\n  if (!authHeader || !authHeader.startsWith('Basic ')) {\n    return false;\n  }\n\n  try {\n    const base64Credentials = authHeader.substring(6);\n    const credentials = Buffer.from(base64Credentials, 'base64').toString('utf8');\n    // Expecting format like '_:YOUR_PROM_METRICS_KEY' or 'user:YOUR_PROM_METRICS_KEY'\n    const [user, key] = credentials.split(':');\n    return key === expectedKey;\n  } catch (e) {\n    console.error('Error decoding Basic Auth credentials:', e);\n    return false;\n  }\n}\n\nexport async function GET(request: Request) {\n  // Environment/Auth Check\n  if (process.env.NODE_ENV === 'production' && !checkAuth(request)) {\n    return new NextResponse('Unauthorized', {\n      status: 401,\n      headers: { 'WWW-Authenticate': 'Basic realm=\"Restricted Area\"' },\n    });\n  }\n\n  // --- Update dynamic gauges before serving --- //\n  try {\n    const cookieStore = cookies();\n    // Use service role key for direct DB access if needed, or anon key if RLS allows\n    const supabase = createServerClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      // Use service role key if RLS prevents anon key reading job_heartbeat\n      process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: { get: (name: string) => cookieStore.get(name)?.value },\n        auth: { persistSession: false }, // Don't persist session for metrics endpoint\n      },\n    );\n\n    const { data, error } = await supabase\n      .from('job_heartbeat')\n      .select('ran_at')\n      .eq('job_name', JOB_NAME)\n      .maybeSingle();\n\n    if (error) {\n      console.error('[Metrics API] Error fetching retention heartbeat:', error.message);\n      // Don't update gauge if fetch fails, it will keep its last value or be absent\n    } else if (data?.ran_at) {\n      const lastRunTimestamp = new Date(data.ran_at).getTime() / 1000; // Convert to Unix seconds\n      retentionLastRunTimestampSeconds.set(lastRunTimestamp);\n    } else {\n      // Job hasn't run yet, explicitly set to 0 or a known value?\n      retentionLastRunTimestampSeconds.set(0);\n    }\n  } catch (dbError: any) {\n    console.error('[Metrics API] Exception fetching retention heartbeat:', dbError.message);\n  }\n  // --- End dynamic gauge update --- //\n\n  // Return metrics\n  try {\n    const metrics = await register.metrics();\n    return new NextResponse(metrics, {\n      status: 200,\n      headers: { 'Content-Type': register.contentType },\n    });\n  } catch (error: any) {\n    console.error('[Metrics API] Error generating metrics:', error);\n    return new NextResponse(`Error generating metrics: ${error.message}`, {\n      status: 500,\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/og/route.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2230,2233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2230,2233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ImageResponse } from '@vercel/og';\nimport { NextRequest } from 'next/server';\n\nexport const runtime = 'edge';\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const title = searchParams.get('title') || 'DOCK108'; // Default title\n\n  // Optional: Load custom font\n  // const interRegular = fetch(new URL('../../assets/Inter-Regular.ttf', import.meta.url)).then((res) => res.arrayBuffer());\n  // const interBold = fetch(new URL('../../assets/Inter-Bold.ttf', import.meta.url)).then((res) => res.arrayBuffer());\n\n  try {\n    // Fetch font data if using custom fonts\n    // const [regularFontData, boldFontData] = await Promise.all([interRegular, interBold]);\n\n    return new ImageResponse(\n      (\n        <div\n          style={{\n            height: '100%',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: '#0f172a', // slate-900\n            color: '#cbd5e1', // slate-300\n            fontFamily: 'sans-serif', // Use default or specify loaded font\n            padding: '60px',\n          }}\n        >\n          {/* Optional: Add Logo */}\n          {/* <img \n                src={`${process.env.NEXT_PUBLIC_SITE_URL}/logo-dark-mode.png`} \n                alt=\"DOCK108 Logo\"\n                width={150} // Adjust size\n                style={{ marginBottom: '30px' }} \n            /> */}\n          <h1\n            style={{\n              fontSize: '60px',\n              fontWeight: 700,\n              textAlign: 'center',\n              lineHeight: 1.2,\n              marginBottom: '20px',\n              color: '#f8fafc', // slate-50\n            }}\n          >\n            {title}\n          </h1>\n          <p style={{ fontSize: '24px', color: '#94a3b8' /* slate-400 */ }}>dock108.ai</p>\n        </div>\n      ),\n      {\n        width: 1200,\n        height: 630,\n        // Optional: Add fonts if loaded\n        // fonts: [\n        //     { name: 'Inter', data: regularFontData, weight: 400, style: 'normal' },\n        //     { name: 'Inter', data: boldFontData, weight: 700, style: 'normal' },\n        // ],\n      },\n    );\n  } catch (e: any) {\n    console.error('Failed to generate OG image:', e.message);\n    // Optional: Fallback to redirecting to the static default image\n    // return Response.redirect(new URL('/images/og-default.png', process.env.NEXT_PUBLIC_SITE_URL).toString(), 302);\n    return new Response(`Failed to generate the image`, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/stripe/billing-webhook/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2486,2489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2486,2489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4892,4895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4892,4895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { headers } from 'next/headers';\nimport Stripe from 'stripe';\nimport { createClient } from '@supabase/supabase-js';\nimport { Database } from '@/types/supabase';\n\n// Initialize Stripe client\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {\n  apiVersion: '2024-04-10',\n  typescript: true,\n});\n\nconst webhookSecret = process.env.STRIPE_WEBHOOK_BILLING;\n\n// Initialize Supabase client directly for webhook handling (no user context)\n// Use SERVICE_ROLE_KEY for elevated privileges needed to update any settings row\nconst supabaseAdmin = createClient<Database>(\n  process.env.NEXT_PUBLIC_SUPABASE_URL || '',\n  process.env.SUPABASE_SERVICE_ROLE_KEY || '',\n);\n\n// Helper function to update settings based on Stripe Customer ID\n// Adjust the query based on your settings table structure (global vs per-user)\nasync function updateSettingsByCustomerId(\n  customerId: string,\n  dataToUpdate: Partial<Database['public']['Tables']['settings']['Row']>,\n) {\n  const { data, error } = await supabaseAdmin\n    .from('settings')\n    .update(dataToUpdate)\n    .eq('stripe_customer_id', customerId)\n    // If settings are global and might not have customer ID yet, alternative logic needed\n    // Maybe: .eq('id', 'global_settings') and then update customer_id too?\n    // This assumes customer_id is reliably populated before subscription events.\n    .select('id') // Select something to confirm update occurred\n    .maybeSingle(); // Use maybeSingle in case the customer ID isn't found (shouldn't happen ideally)\n\n  if (error) {\n    console.error(`Webhook Error: Failed to update settings for customer ${customerId}:`, error);\n    throw error; // Re-throw to signal failure\n  }\n  if (!data) {\n    console.warn(`Webhook Warning: No settings found for customer ${customerId} during update.`);\n  }\n  console.log(`Webhook: Successfully updated settings for customer ${customerId}.`);\n}\n\nexport async function POST(request: Request) {\n  if (!webhookSecret) {\n    console.error('Webhook Error: STRIPE_WEBHOOK_BILLING secret is not set.');\n    return NextResponse.json({ error: 'Webhook secret not configured' }, { status: 500 });\n  }\n\n  const signature = headers().get('stripe-signature');\n  let event: Stripe.Event;\n\n  try {\n    const body = await request.text();\n    if (!signature) {\n      throw new Error('Missing stripe-signature header');\n    }\n    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);\n  } catch (err: any) {\n    console.error(`Webhook signature verification failed: ${err.message}`);\n    return NextResponse.json({ error: `Webhook Error: ${err.message}` }, { status: 400 });\n  }\n\n  console.log(`Webhook Received: ${event.type}`);\n\n  try {\n    const subscription = event.data.object as Stripe.Subscription;\n    const customerId = subscription.customer as string;\n\n    switch (event.type) {\n      case 'customer.subscription.created':\n      case 'customer.subscription.updated':\n        // Check subscription status\n        const status = subscription.status;\n        const isPro = status === 'active' || status === 'trialing';\n\n        await updateSettingsByCustomerId(customerId, {\n          tier: isPro ? 'pro' : 'free',\n          stripe_subscription_id: subscription.id,\n          // Reset Slack webhook if plan becomes inactive/non-pro?\n          // slack_webhook_url: isPro ? settings.slack_webhook_url : null, // Requires fetching existing settings first\n        });\n        console.log(\n          `Webhook: Set tier to ${isPro ? 'pro' : 'free'} for customer ${customerId} (Sub ID: ${subscription.id})`,\n        );\n        break;\n\n      case 'customer.subscription.deleted':\n        // Subscription cancelled or ended\n        await updateSettingsByCustomerId(customerId, {\n          tier: 'free',\n          stripe_subscription_id: null,\n          // Consider nulling out Slack URL here too if it shouldn't persist for free users\n          // slack_webhook_url: null,\n        });\n        console.log(`Webhook: Set tier to free for customer ${customerId} (Sub Deleted)`);\n        break;\n\n      // Optional: Handle payment failures specifically if needed\n      // case 'invoice.payment_failed':\n      //     // Check if it's related to a subscription\n      //     if (subscription.id) {\n      //         // Could set tier to free or a specific 'payment_failed' status\n      //         await updateSettingsByCustomerId(customerId, {\n      //             tier: 'free', // Or a custom status\n      //             // Consider keeping subscription ID for reactivation attempts?\n      //         });\n      //         console.log(`Webhook: Payment failed for subscription ${subscription.id}, customer ${customerId}`);\n      //     }\n      //     break;\n\n      default:\n        console.log(`Webhook: Unhandled event type ${event.type}`);\n    }\n\n    return NextResponse.json({ received: true });\n  } catch (error: any) {\n    console.error('Webhook Handler Error:', error);\n    return NextResponse.json(\n      { error: 'Webhook handler failed', details: error.message },\n      { status: 500 },\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/stripe/mock/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/stripe/oauth/callback/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'headers' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8970,8973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8970,8973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { cookies, headers } from 'next/headers';\nimport Stripe from 'stripe';\nimport { createServerClient } from '@supabase/ssr';\nimport { supabaseAdmin } from '@/lib/supabase-admin';\n// import { createAccountWebhook } from '@/lib/stripe-webhook'; // Removed as we don't create webhooks programmatically per account\n// import { logger } from '@/lib/logger'; // Temporarily commented out\n\n// Explicitly mark this route as dynamic\nexport const dynamic = 'force-dynamic';\n\nexport async function GET(req: Request) {\n  const url = new URL(req.url); // Define url early for use in error redirects\n  console.log('Starting Stripe OAuth callback processing.'); // Replaced logger.info\n  try {\n    // Parse URL params\n    const code = url.searchParams.get('code');\n    const state = url.searchParams.get('state');\n    const cookieStore = cookies();\n    const storedState = (await cookieStore).get('guardian_oauth_state')?.value;\n\n    // Validate state to prevent CSRF attacks\n    if (!code || !state || state !== storedState) {\n      console.warn('OAuth state mismatch or missing code', { code, state, storedState }); // Replaced logger.warn\n      const redirectUrl = new URL('/login', url.origin);\n      redirectUrl.searchParams.set('error', 'oauth_state_mismatch');\n      return NextResponse.redirect(redirectUrl);\n    }\n    console.log('OAuth state validated successfully.'); // Replaced logger.info\n\n    // --- 1️⃣ Read session from cookie (server-side) ---\n    const supabase = createServerClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: {\n          async get(name: string) {\n            return (await cookieStore).get(name)?.value;\n          },\n          // No need for set/remove in read-only scenario\n        },\n      },\n    );\n    console.log('Attempting to fetch Supabase session...'); // Replaced logger.info\n    const {\n      data: { session },\n      error: sessionError,\n    } = await supabase.auth.getSession();\n\n    if (!session || sessionError) {\n      console.warn('No valid session found during OAuth callback', {\n        error: sessionError,\n        hasSession: !!session,\n      }); // Replaced logger.warn\n      const redirectUrl = new URL('/login', url.origin);\n      redirectUrl.searchParams.set('error', 'session_expired');\n      redirectUrl.searchParams.set('redirectTo', '/stripe-guardian/onboard');\n      return NextResponse.redirect(redirectUrl);\n    }\n    console.log('Supabase session fetched successfully.', { userId: session.user.id }); // Replaced logger.info\n\n    // --- 2️⃣ Exchange OAuth code for tokens ---\n    const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n      apiVersion: '2023-10-16',\n    });\n    console.log('Exchanging OAuth code for Stripe tokens...'); // Replaced logger.info\n    const token = await stripe.oauth.token({\n      grant_type: 'authorization_code',\n      code,\n    });\n    console.log('Exchanged OAuth code for Stripe tokens successfully.', {\n      accountId: token.stripe_user_id,\n      userId: session.user.id,\n    }); // Replaced logger.info\n\n    // --- 2.5️⃣ Retrieve account details to get business name ---\n    let businessName: string | null = null;\n    // Ensure stripe_user_id exists before retrieving\n    if (token.stripe_user_id) {\n      try {\n        console.log('Retrieving Stripe Account details...', { accountId: token.stripe_user_id });\n        const account = await stripe.accounts.retrieve(token.stripe_user_id);\n        businessName = account.business_profile?.name ?? null;\n        console.log('Retrieved Stripe Account details successfully.', {\n          accountId: token.stripe_user_id,\n          businessName,\n        });\n      } catch (retrieveError) {\n        console.error('Error retrieving Stripe account details:', {\n          accountId: token.stripe_user_id,\n          error: retrieveError,\n        });\n        // Decide if this is fatal. For now, let's continue without the business name.\n      }\n    } else {\n      console.warn(\n        'Missing stripe_user_id in OAuth token response, cannot retrieve account details.',\n      );\n    }\n\n    // --- 3️⃣ Upsert connected account row ---\n    const accountData = {\n      user_id: session.user.id,\n      stripe_account_id: token.stripe_user_id,\n      access_token: token.access_token,\n      refresh_token: token.refresh_token,\n      live: token.livemode,\n      business_name: businessName, // Use the existing business_name column\n    };\n    console.log('Attempting to upsert connected_accounts record...', { accountData }); // Replaced logger.info\n    const { error: upsertAccountError } = await supabaseAdmin\n      .from('connected_accounts')\n      .upsert(accountData);\n\n    if (upsertAccountError) {\n      console.error('Error upserting connected_accounts record.', {\n        error: upsertAccountError,\n        accountData,\n      }); // Replaced logger.error\n      throw upsertAccountError; // Re-throw to be caught by the main catch block\n    }\n    console.log('Upserted connected_accounts record successfully.', {\n      accountId: token.stripe_user_id,\n    }); // Replaced logger.info\n\n    // Seed alert_channels row if missing\n    const channelData = {\n      stripe_account_id: token.stripe_user_id,\n      email_to: session.user.email,\n    };\n    console.log('Attempting to upsert alert_channels record...', { channelData }); // Replaced logger.info\n    const { error: upsertChannelError } = await supabaseAdmin\n      .from('alert_channels')\n      .upsert(channelData);\n\n    if (upsertChannelError) {\n      console.error('Error upserting alert_channels record.', {\n        error: upsertChannelError,\n        channelData,\n      }); // Replaced logger.error\n      // Decide if this is critical - maybe just log and continue? Or throw?\n      // For now, let's log and continue, as the account connection is the primary goal.\n    } else {\n      console.log('Upserted alert_channels record successfully.', {\n        accountId: token.stripe_user_id,\n      }); // Replaced logger.info\n    }\n\n    // --- Trigger Backfill (G-22) --- //\n    const acctId = token.stripe_user_id;\n    if (acctId) {\n      console.log(`Initiating backfill process for account: ${acctId}`);\n      try {\n        // 1. Create/update the status record\n        const { error: statusUpsertError } = await supabaseAdmin.from('backfill_status').upsert(\n          {\n            stripe_account_id: acctId,\n            status: 'pending',\n            last_error: null, // Clear previous errors on new attempt\n            completed_at: null, // Clear completion time\n          },\n          {\n            onConflict: 'stripe_account_id',\n          },\n        );\n\n        if (statusUpsertError) {\n          throw new Error(`Failed to create/update backfill_status: ${statusUpsertError.message}`);\n        }\n        console.log(`Set backfill status to pending for ${acctId}`);\n\n        // 2. Trigger the backfill function (fire-and-forget)\n        // Ensure SUPABASE_URL is correctly set in environment for fetch\n        const edgeFunctionUrl = `${process.env.SUPABASE_URL}/functions/v1/guardian-backfill`;\n        console.log(`Calling edge function: ${edgeFunctionUrl}`);\n\n        fetch(edgeFunctionUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            // Pass service role key for secure function invocation\n            Authorization: `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`,\n          },\n          body: JSON.stringify({ stripe_account_id: acctId }),\n        }).catch((fetchError) => {\n          // Log failure to trigger, but don't fail the main OAuth flow\n          console.error(`Failed to trigger guardian-backfill function for ${acctId}:`, fetchError);\n          // Optionally: update status back to error here? Or rely on retry cron?\n        });\n\n        console.log(`Successfully triggered guardian-backfill for ${acctId}`);\n      } catch (backfillTriggerError) {\n        // Log error initiating backfill, but don't fail the OAuth redirect\n        console.error(`Error initiating backfill process for ${acctId}:`, backfillTriggerError);\n      }\n    } else {\n      console.warn('Missing stripe_user_id, cannot trigger backfill.');\n    }\n\n    // --- 4️⃣ Cleanup + redirect ---\n    console.log('OAuth flow complete, preparing redirect.', { accountId: token.stripe_user_id }); // Replaced logger.info\n    const redirectUrl = new URL('/stripe-guardian/alerts', url.origin);\n    redirectUrl.searchParams.set('first', '1');\n    const response = NextResponse.redirect(redirectUrl);\n\n    // Clear the state cookie using the Response object for proper Set-Cookie header\n    response.cookies.set({\n      name: 'guardian_oauth_state',\n      value: '',\n      path: '/',\n      maxAge: -1, // Expire the cookie immediately\n    });\n\n    console.log('Redirecting user to alerts page.', { accountId: token.stripe_user_id }); // Replaced logger.info\n    return response;\n  } catch (error: any) {\n    // Catch any error type\n    // Log the specific error that occurred\n    console.error('Caught error during OAuth callback process.', {\n      // Replaced logger.error\n      error: error,\n      message: error?.message,\n      stack: error?.stack,\n    });\n\n    // Redirect to login page with a generic error\n    const redirectUrl = new URL('/login', url.origin); // Use url defined at the start\n    redirectUrl.searchParams.set('error', 'oauth_failed');\n    redirectUrl.searchParams.set('details', 'Check server logs for specifics.'); // Add hint for debugging\n    return NextResponse.redirect(redirectUrl);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/stripe/oauth/start/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/stripe/webhook/__tests__/route.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): app/api/stripe/webhook/__tests__/route.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { NextRequest } from 'next/server';\nimport { POST, GET } from '../route';\n\n// Mock the stripe instance and supabase\njest.mock('@/lib/stripe', () => {\n  const mockStripe = {\n    webhooks: {\n      constructEvent: jest.fn(),\n    },\n  };\n  return { stripe: mockStripe, Stripe: { errors: { StripeSignatureVerificationError: class {} } } };\n});\n\njest.mock('@/lib/supabase-admin', () => ({\n  supabaseAdmin: {\n    from: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockResolvedValue({ error: null }),\n  },\n}));\n\n// Import mocks after mocking\nimport { stripe, Stripe } from '@/lib/stripe';\nimport { supabaseAdmin } from '@/lib/supabase-admin';\n\n// TODO: Re-enable after fixing test stabilization issues (Response undefined) in #<issue_number>\ndescribe.skip('Stripe webhook handler', () => {\n  const originalEnv = process.env;\n  \n  beforeEach(() => {\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n    jest.resetModules();\n    process.env = { ...originalEnv };\n    process.env.STRIPE_SECRET_KEY = 'test_key';\n    process.env.STRIPE_WEBHOOK_SECRET = 'whsec_test_secret';\n    \n    // Reset mock state\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    (console.error as jest.Mock).mockRestore();\n    process.env = originalEnv;\n  });\n\n  it('returns 405 for GET method', async () => {\n    const req = new NextRequest('https://example.com/api/stripe/webhook', {\n      method: 'GET',\n    });\n    \n    const response = await GET();\n    expect(response.status).toBe(405);\n    const body = await response.json();\n    expect(body.error).toBe('Method Not Allowed');\n  });\n\n  it('returns 400 for missing signature', async () => {\n    const req = new NextRequest('https://example.com/api/stripe/webhook', {\n      method: 'POST',\n      body: JSON.stringify({ id: 'evt_test' }),\n    });\n    \n    const response = await POST(req);\n    expect(response.status).toBe(400);\n    const body = await response.json();\n    expect(body.error).toBe('Signature verification failed');\n  });\n\n  it('returns 400 for invalid signature', async () => {\n    const mockBody = JSON.stringify({ id: 'evt_test' });\n    const req = new NextRequest('https://example.com/api/stripe/webhook', {\n      method: 'POST',\n      body: mockBody,\n      headers: {\n        'stripe-signature': 'invalid_signature',\n      },\n    });\n    \n    // Mock the signature verification to fail\n    (stripe.webhooks.constructEvent as any).mockImplementation(() => {\n      throw new Error('Invalid signature');\n    });\n    \n    const response = await POST(req);\n    expect(response.status).toBe(400);\n    const body = await response.json();\n    expect(body.error).toBe('Signature verification failed');\n  });\n\n  it('returns 200 for valid signature', async () => {\n    const mockEvent = {\n      id: 'evt_test',\n      type: 'payout.paid',\n      created: Math.floor(Date.now() / 1000),\n      data: {\n        object: {\n          id: 'po_test',\n          amount: 1000,\n        },\n      },\n    };\n    \n    const mockBody = JSON.stringify(mockEvent);\n    const req = new NextRequest('https://example.com/api/stripe/webhook', {\n      method: 'POST',\n      body: mockBody,\n      headers: {\n        'stripe-signature': 'valid_signature',\n      },\n    });\n    \n    // Mock the signature verification to succeed\n    (stripe.webhooks.constructEvent as any).mockReturnValue(mockEvent);\n    \n    // Mock the Supabase insert success\n    (supabaseAdmin.from('payout_events').insert as any).mockResolvedValue({ error: null });\n    \n    const response = await POST(req);\n    expect(response.status).toBe(200);\n    const body = await response.json();\n    expect(body.received).toBe(true);\n    \n    // Verify that constructEvent was called with the right arguments\n    expect(stripe.webhooks.constructEvent).toHaveBeenCalledWith(\n      mockBody,\n      'valid_signature',\n      process.env.STRIPE_WEBHOOK_SECRET,\n    );\n    \n    // Verify that database insert was called\n    expect(supabaseAdmin.from).toHaveBeenCalledWith('payout_events');\n    expect(supabaseAdmin.from('payout_events').insert).toHaveBeenCalled();\n  });\n\n  it('returns 500 if database insert fails', async () => {\n    const mockEvent = {\n      id: 'evt_test',\n      type: 'payout.paid',\n      created: Math.floor(Date.now() / 1000),\n      data: {\n        object: {\n          id: 'po_test',\n          amount: 1000,\n        },\n      },\n    };\n    \n    const mockBody = JSON.stringify(mockEvent);\n    const req = new NextRequest('https://example.com/api/stripe/webhook', {\n      method: 'POST',\n      body: mockBody,\n      headers: {\n        'stripe-signature': 'valid_signature',\n      },\n    });\n    \n    // Mock the signature verification to succeed\n    (stripe.webhooks.constructEvent as any).mockReturnValue(mockEvent);\n    \n    // Mock the Supabase insert to fail\n    (supabaseAdmin.from('payout_events').insert as any).mockResolvedValue({ \n      error: new Error('Database error'),\n    });\n    \n    const response = await POST(req);\n    expect(response.status).toBe(500);\n    const body = await response.json();\n    expect(body.error).toBe('Database error');\n  });\n}); \n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/stripe/webhook/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2096,2099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2096,2099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3231,3234],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3231,3234],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6095,6098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6095,6098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8653,8656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8653,8656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9346,9349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9346,9349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { stripe } from '@/lib/stripe'; // Assuming stripe instance is correctly initialized\nimport Stripe from 'stripe'; // Import Stripe for types\nimport { supabaseAdmin } from '@/lib/supabase-admin';\nimport { log, generateRequestId } from '@/lib/logger';\nimport { isGuardianSupportedEvent } from '@/lib/guardian/stripeEvents';\nimport { validateStripeEvent, isStrictValidationEnabled } from '@/lib/guardian/validateStripeEvent';\nimport { ZodError } from 'zod';\nimport { Database, TablesInsert } from '@/types/supabase'; // Use generated types\n\nexport const runtime = 'edge';\nexport const maxDuration = 5; // 5 seconds maximum for the webhook handler\n\n// Print environment variable hint on startup using the logger\nif (isStrictValidationEnabled()) {\n  log.info('Stripe event validation is ENABLED (default)');\n  log.info('Add to .env if you need to disable validation locally: STRICT_STRIPE_VALIDATION=false');\n} else {\n  log.warn('Stripe event validation is DISABLED - This should only be used for development');\n}\n\n/**\n * Handles Stripe webhook events\n * - Verifies signature\n * - Identifies source account\n * - Checks if event type is supported\n * - Validates event shape against schema\n * - Stores raw event payload in event_buffer\n * - Forwards to guardian-reactor\n * - Returns 200 OK quickly\n */\nexport async function POST(req: NextRequest) {\n  const startTime = performance.now();\n  const reqId = generateRequestId();\n  const baseLogData: Record<string, any> = { req_id: reqId, service: 'webhook-handler' }; // Base data for logs\n\n  log.info({ ...baseLogData, method: req.method, url: req.url }, 'Incoming webhook request');\n\n  if (req.method !== 'POST') {\n    log.warn({ ...baseLogData, status: 405 }, 'Method not allowed');\n    return NextResponse.json({ error: 'Method Not Allowed' }, { status: 405 });\n  }\n\n  const sig = req.headers.get('stripe-signature');\n  const accountIdHeader = req.headers.get('stripe-account'); // Stripe Connect account ID\n  let rawBody: string;\n\n  try {\n    rawBody = await req.text();\n  } catch (err: any) {\n    log.error({ ...baseLogData, err: err?.message, status: 400 }, 'Failed to read request body');\n    return NextResponse.json({ error: 'Invalid body' }, { status: 400 });\n  }\n\n  let event: Stripe.Event | null = null; // Use Stripe.Event type\n  let verifiedAccountId: string | null = null;\n  let status = 500; // Default to internal error\n  let eventId: string | undefined;\n  let eventType: string | undefined;\n\n  try {\n    if (!sig) {\n      log.error({ ...baseLogData, status: 400 }, 'Missing Stripe signature header');\n      status = 400;\n      return NextResponse.json({ error: 'Missing signature header' }, { status: 400 });\n    }\n\n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n    if (!webhookSecret) {\n      log.error(\n        { ...baseLogData, status: 500 },\n        'Missing STRIPE_WEBHOOK_SECRET environment variable',\n      );\n      throw new Error('Webhook secret not configured');\n    }\n\n    try {\n      // Use the specific Stripe type\n      event = stripe.webhooks.constructEvent(rawBody, sig, webhookSecret) as Stripe.Event;\n      eventId = event.id;\n      eventType = event.type;\n    } catch (err: any) {\n      log.error(\n        { ...baseLogData, err: err?.message, status: 400 },\n        'Webhook signature verification failed',\n      );\n      status = 400;\n      return NextResponse.json({ error: 'Signature verification failed' }, { status: 400 });\n    }\n\n    const eventLogData = { ...baseLogData, stripe_event_id: eventId, event_type: eventType };\n\n    if (!eventType || !isGuardianSupportedEvent(eventType)) {\n      log.warn({ ...eventLogData, status: 200 }, 'Unsupported event type received, skipping.'); // Return 200 OK to Stripe\n      status = 200;\n      return NextResponse.json({ message: 'Unsupported event type' }, { status: 200 });\n    }\n\n    // Optional: Strict validation\n    if (isStrictValidationEnabled()) {\n      try {\n        validateStripeEvent(event); // Pass the strongly-typed event\n      } catch (err) {\n        status = 400;\n        if (err instanceof ZodError) {\n          log.error(\n            { ...eventLogData, zodErrors: err.errors, status: 400 },\n            'Event validation failed',\n          );\n          // Return 200 to Stripe, but log error. Don't buffer invalid events.\n          return NextResponse.json({ message: 'Event validation failed' }, { status: 200 });\n        }\n        // Check for specific error message if validateStripeEvent throws it\n        if (err instanceof Error && err.message.includes('Unsupported event type')) {\n          log.warn(\n            { ...eventLogData, status: 200 },\n            'Unsupported event type received (validation), skipping.',\n          );\n          return NextResponse.json({ message: 'Unsupported event type' }, { status: 200 });\n        }\n        // For unknown validation errors, log and potentially let it bubble up (or return 500)\n        log.error({ ...eventLogData, err, status: 500 }, 'Unknown validation error');\n        throw err; // Re-throw unknown errors for outer catch\n      }\n    }\n\n    // Determine the responsible account ID\n    verifiedAccountId = accountIdHeader ?? event.account ?? null;\n\n    if (!verifiedAccountId) {\n      log.error({ ...eventLogData, status: 400 }, 'Missing account ID in header or event');\n      // Return 200 to Stripe, cannot process without account ID.\n      return NextResponse.json({ message: 'Missing account ID' }, { status: 200 });\n    }\n\n    const finalLogData = { ...eventLogData, stripe_account_id: verifiedAccountId };\n    log.info(\n      { ...finalLogData, validation_enabled: isStrictValidationEnabled() },\n      'Webhook signature and payload verified',\n    );\n\n    // Store the raw event in the buffer\n    // Use generated types for insert payload\n    const bufferData: TablesInsert<'event_buffer'> = {\n      stripe_event_id: eventId, // eventId is string | undefined, checked above\n      stripe_account_id: verifiedAccountId, // checked above\n      type: eventType, // checked above\n      payload: event.data as any, // Store original data part - needs careful typing or use Json\n      received_at: new Date().toISOString(),\n    };\n\n    const { data: insertedEvent, error: insertError } = await supabaseAdmin\n      .from('event_buffer')\n      .upsert(bufferData, { onConflict: 'stripe_event_id' })\n      .select('id') // Select the primary key (assuming it's 'id' and type number/bigint)\n      .single<{ id: number }>(); // Specify return type\n\n    if (insertError) {\n      log.error(\n        { ...finalLogData, db_error: insertError.message },\n        'Failed to insert event into buffer',\n      );\n      // Acknowledge receipt to Stripe, but log the error internally\n      status = 200; // Treat as success for Stripe\n    } else if (insertedEvent?.id) {\n      const eventBufferId = insertedEvent.id;\n      log.info({ ...finalLogData, event_buffer_id: eventBufferId }, 'Event stored in buffer');\n\n      // Async dispatch to reactor - Don't await, respond to Stripe quickly\n      // Ensure Supabase URL and Service Role Key are defined\n      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n      const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n      if (supabaseUrl && serviceRoleKey) {\n        fetch(`${supabaseUrl}/functions/v1/guardian-reactor`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${serviceRoleKey}`,\n            // apikey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, // Anon key likely not needed for service role calls\n          },\n          body: JSON.stringify({ event_buffer_id: eventBufferId }),\n        })\n          .then(async (response) => {\n            if (!response.ok && response.status !== 204) {\n              // Allow 204 (already processed)\n              const responseText = await response.text();\n              log.error(\n                {\n                  ...finalLogData,\n                  event_buffer_id: eventBufferId,\n                  reactor_status: response.status,\n                  reactor_response: responseText,\n                },\n                'Guardian reactor async dispatch failed',\n              );\n              // DLQ insertion happens within the reactor now\n            } else {\n              log.info(\n                {\n                  ...finalLogData,\n                  event_buffer_id: eventBufferId,\n                  reactor_status: response.status,\n                },\n                'Guardian reactor async dispatch initiated',\n              );\n            }\n          })\n          .catch((err: any) => {\n            log.error(\n              { ...finalLogData, event_buffer_id: eventBufferId, err: err?.message },\n              'Guardian reactor async dispatch exception',\n            );\n            // DLQ insertion happens within the reactor now\n          });\n      } else {\n        log.error(\n          { ...finalLogData, event_buffer_id: eventBufferId },\n          'Cannot trigger reactor: Missing Supabase URL or Service Role Key',\n        );\n      }\n      status = 200; // Success from webhook perspective\n    } else {\n      log.error({ ...finalLogData }, 'Failed to get inserted event buffer ID after upsert');\n      status = 200; // Still success for Stripe\n    }\n  } catch (err: any) {\n    status = status >= 400 ? status : 500; // Keep 4xx if already set, otherwise 500\n    log.error(\n      {\n        ...baseLogData,\n        stripe_event_id: eventId,\n        stripe_account_id: verifiedAccountId,\n        err: err?.message,\n        stack: err?.stack, // Log stack for internal errors\n        status,\n      },\n      'Unhandled webhook processing error',\n    );\n    // Return generic 500 for internal errors\n    const errorResponse = { error: 'Internal Server Error' };\n    return NextResponse.json(errorResponse, { status: 500 });\n  }\n\n  // Calculate total processing time\n  const durationMs = Math.round(performance.now() - startTime);\n  log.info(\n    {\n      ...baseLogData,\n      stripe_event_id: eventId,\n      stripe_account_id: verifiedAccountId,\n      duration_ms: durationMs,\n      status,\n    },\n    'Webhook processing complete',\n  );\n\n  // Return 200 OK quickly to Stripe\n  return NextResponse.json({ received: true }, { status });\n}\n\n// Note: Removed GET handler for /api/metrics as it needs separate implementation\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/api/waitlist/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/billing/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'XCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2516,2519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2516,2519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3512,3515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3512,3515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4204,4207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4204,4207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'; // Needs client-side interaction for button clicks\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation'; // Use App Router's navigation\nimport { Container } from '@/components/Container';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n} from '@/components/ui/card';\nimport { toast } from 'react-hot-toast';\nimport { Loader2, ExternalLink, CheckCircle, XCircle } from 'lucide-react';\nimport { useUser } from '@/lib/hooks/useUser'; // Assuming a hook to get user state\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Database } from '@/types/supabase';\nimport { isPro } from '@/lib/guardian/plan'; // Import the plan helper\n\n// Define settings type again or import\ninterface SettingsRow {\n  id: string;\n  tier?: string | null;\n  stripe_customer_id?: string | null;\n  // Add other fields if needed to display usage/caps\n}\n\nexport default function BillingPage() {\n  const router = useRouter();\n  const { user, isLoading: isLoadingUser } = useUser();\n  const [settings, setSettings] = useState<SettingsRow | null>(null);\n  const [isLoadingSettings, setIsLoadingSettings] = useState(true);\n  const [isRedirectingCheckout, setIsRedirectingCheckout] = useState(false);\n  const [isRedirectingPortal, setIsRedirectingPortal] = useState(false);\n  const supabase = createClientComponentClient<Database>();\n\n  useEffect(() => {\n    // Display toast messages based on query params from Stripe redirects\n    const searchParams = new URLSearchParams(window.location.search);\n    if (searchParams.get('success')) {\n      toast.success('Subscription successful! Welcome to Pro.');\n      // Clear query params after showing toast\n      router.replace('/billing', { scroll: false });\n    }\n    if (searchParams.get('cancelled')) {\n      toast.error('Checkout cancelled.');\n      router.replace('/billing', { scroll: false });\n    }\n  }, [router]);\n\n  useEffect(() => {\n    async function fetchSettings() {\n      if (!user) return; // Only fetch if user is loaded\n\n      setIsLoadingSettings(true);\n      try {\n        // Fetch settings - Adjust query if settings are not global\n        const { data, error } = await supabase\n          .from('settings')\n          .select('*')\n          .eq('id', 'global_settings') // Or .eq('user_id', user.id)\n          .maybeSingle();\n\n        if (error) throw error;\n        setSettings(data);\n      } catch (error: any) {\n        console.error('Error fetching settings:', error);\n        toast.error('Failed to load billing information.');\n      } finally {\n        setIsLoadingSettings(false);\n      }\n    }\n\n    if (!isLoadingUser && user) {\n      fetchSettings();\n    }\n    if (!isLoadingUser && !user) {\n      // Handle case where user is definitely not logged in\n      setIsLoadingSettings(false);\n      // Optionally redirect to login\n      // router.push('/login?redirectTo=/billing');\n    }\n  }, [user, isLoadingUser, supabase, router]);\n\n  const handleUpgrade = async () => {\n    setIsRedirectingCheckout(true);\n    toast.loading('Redirecting to checkout...');\n    try {\n      const response = await fetch('/api/billing/checkout', { method: 'POST' });\n      const data = await response.json();\n      if (!response.ok || !data.url) {\n        throw new Error(data.error || 'Failed to initiate checkout.');\n      }\n      window.location.href = data.url; // Redirect to Stripe Checkout\n    } catch (error: any) {\n      toast.dismiss();\n      toast.error(`Checkout failed: ${error.message}`);\n      setIsRedirectingCheckout(false);\n    }\n    // No finally block needed as successful redirect leaves the page\n  };\n\n  const handleManageSubscription = async () => {\n    setIsRedirectingPortal(true);\n    toast.loading('Redirecting to billing portal...');\n    try {\n      const response = await fetch('/api/billing/portal', { method: 'POST' });\n      const data = await response.json();\n      if (!response.ok || !data.url) {\n        throw new Error(data.error || 'Failed to open billing portal.');\n      }\n      window.location.href = data.url; // Redirect to Stripe Billing Portal\n    } catch (error: any) {\n      toast.dismiss();\n      toast.error(`Failed to open portal: ${error.message}`);\n      setIsRedirectingPortal(false);\n    }\n  };\n\n  const isLoading = isLoadingUser || isLoadingSettings;\n  const userIsPro = settings ? isPro(settings) : false;\n\n  return (\n    <Container className=\"py-10 max-w-3xl mx-auto\">\n      <h1 className=\"text-3xl font-bold tracking-tight mb-6\">Billing & Plan</h1>\n\n      {isLoading ? (\n        <div className=\"flex justify-center items-center h-40\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-slate-500\" />\n        </div>\n      ) : !user ? (\n        <Card>\n          <CardHeader>\n            <CardTitle>Authentication Required</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>Please log in to manage your billing information.</p>\n          </CardContent>\n          <CardFooter>\n            <Button onClick={() => router.push('/login?redirectTo=/billing')}>Log In</Button>\n          </CardFooter>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Your Current Plan</CardTitle>\n            <CardDescription>\n              You are currently on the{' '}\n              <span className={`font-semibold ${userIsPro ? 'text-green-600' : 'text-blue-600'}`}>\n                {userIsPro ? 'Pro' : 'Free'}\n              </span>{' '}\n              plan.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {userIsPro ? (\n              <div>\n                <p className=\"text-sm text-slate-600 mb-4\">\n                  You have full access to all Guardian features. Manage your subscription, view\n                  invoices, or update payment methods via the Stripe Billing Portal.\n                </p>\n                <Button onClick={handleManageSubscription} disabled={isRedirectingPortal}>\n                  {isRedirectingPortal ? (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  ) : (\n                    <ExternalLink className=\"mr-2 h-4 w-4\" />\n                  )}\n                  Manage Subscription\n                </Button>\n              </div>\n            ) : (\n              <div>\n                <p className=\"text-sm text-slate-600 mb-1\">The Free plan includes:</p>\n                <ul className=\"list-disc list-inside text-sm text-slate-600 mb-4\">\n                  <li>Up to 50 alerts per month</li>\n                  <li>Core fraud detection rules</li>\n                  <li>Email notifications</li>\n                </ul>\n                <p className=\"text-sm text-slate-600 mb-4\">\n                  Upgrade to Pro for unlimited alerts, Slack notifications, advanced rules, and\n                  priority support.\n                </p>\n                <Button\n                  onClick={handleUpgrade}\n                  disabled={isRedirectingCheckout}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  {isRedirectingCheckout ? (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  ) : (\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                  )}\n                  Upgrade to Pro\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/blog/[slug]/opengraph-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/blog/[slug]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Post' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'compileMDX' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Image' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'format' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { notFound } from 'next/navigation';\nimport { getAllPosts, getPostBySlug, getPrevNextPosts, Post } from '@/lib/blog';\nimport { MDXRemote , compileMDX } from 'next-mdx-remote/rsc';\nimport mdxComponents from '@/components/mdx'; // Import custom components\nimport { Container } from '@/components/Container';\nimport { Badge } from '@/components/ui/badge';\nimport { formatDate } from '@/lib/date';\nimport Link from 'next/link';\nimport { ArrowLeft, ArrowRight, Clock } from 'lucide-react';\nimport type { Metadata } from 'next';\nimport siteConfig from '@/lib/siteConfig';\nimport Image from 'next/image';\nimport { format } from 'date-fns';\nimport DemoCTA from '@/components/mdx/DemoCTA';\n\ninterface BlogPostPageProps {\n  params: { slug: string };\n}\n\n// Generate static paths for all blog posts\nexport async function generateStaticParams() {\n  const posts = getAllPosts(); // Gets only metadata including slugs\n  return posts.map((post) => ({\n    slug: post.slug,\n  }));\n}\n\n// Generate metadata for the page\nexport async function generateMetadata({ params }: BlogPostPageProps): Promise<Metadata> {\n  const post = getPostBySlug(params.slug);\n\n  if (!post) {\n    return { title: 'Post not found' };\n  }\n\n  const ogImageUrl = post.image\n    ? `${siteConfig.url}${post.image}` // Use absolute URL for OG\n    : `${siteConfig.url}/api/og?title=${encodeURIComponent(post.title)}`; // Fallback to dynamic OG\n\n  return {\n    title: post.title,\n    description: post.excerpt,\n    openGraph: {\n      title: post.title,\n      description: post.excerpt,\n      type: 'article',\n      publishedTime: post.date,\n      url: `${siteConfig.url}/blog/${post.slug}`,\n      images: [\n        {\n          url: ogImageUrl,\n          width: 1200, // Adjust if dynamic OG size is different\n          height: 630,\n          alt: post.title,\n        },\n      ],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: post.title,\n      description: post.excerpt,\n      images: [ogImageUrl],\n    },\n  };\n}\n\n// Render the blog post page\nexport default async function BlogPostPage({ params }: BlogPostPageProps) {\n  const post = getPostBySlug(params.slug);\n\n  if (!post) {\n    notFound(); // Trigger 404 if post not found\n  }\n\n  const { prev, next } = getPrevNextPosts(params.slug);\n\n  const components = {\n    ...mdxComponents,\n    DemoCTA,\n  };\n\n  return (\n    <Container className=\"py-12 md:py-16 max-w-3xl mx-auto\">\n      <article>\n        {/* Header */}\n        <header className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight mb-3\">{post.title}</h1>\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <time dateTime={post.date}>{formatDate(post.date)}</time>\n            <span className=\"flex items-center gap-1\">\n              <Clock className=\"h-3.5 w-3.5\" />\n              {post.readingTime}\n            </span>\n          </div>\n          {post.tags && post.tags.length > 0 && (\n            <div className=\"mt-4 flex flex-wrap gap-2\">\n              {post.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          )}\n        </header>\n\n        {/* Content */}\n        <div className=\"prose prose-slate dark:prose-invert max-w-none\">\n          {/* @ts-expect-error Server Component */}\n          <MDXRemote source={post.content} components={components} />\n        </div>\n\n        {/* Footer Navigation */}\n        <footer className=\"mt-12 pt-8 border-t\">\n          <div className=\"flex justify-between gap-8\">\n            {\n              prev ? (\n                <Link\n                  href={`/blog/${prev.slug}`}\n                  className=\"text-left p-4 rounded-lg border hover:bg-accent hover:text-accent-foreground transition-colors w-1/2\"\n                >\n                  <div className=\"text-xs text-muted-foreground mb-1 flex items-center\">\n                    <ArrowLeft className=\"h-3 w-3 mr-1\" /> Previous\n                  </div>\n                  <div className=\"font-medium line-clamp-2\">{prev.title}</div>\n                </Link>\n              ) : (\n                <div className=\"w-1/2\"></div>\n              ) /* Placeholder for alignment */\n            }\n            {\n              next ? (\n                <Link\n                  href={`/blog/${next.slug}`}\n                  className=\"text-right p-4 rounded-lg border hover:bg-accent hover:text-accent-foreground transition-colors w-1/2\"\n                >\n                  <div className=\"text-xs text-muted-foreground mb-1 flex items-center justify-end\">\n                    Next <ArrowRight className=\"h-3 w-3 ml-1\" />\n                  </div>\n                  <div className=\"font-medium line-clamp-2\">{next.title}</div>\n                </Link>\n              ) : (\n                <div className=\"w-1/2\"></div>\n              ) /* Placeholder for alignment */\n            }\n          </div>\n        </footer>\n      </article>\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/blog/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/blog/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PostMeta' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getAllPosts, PostMeta } from '@/lib/blog';\nimport { Container } from '@/components/Container';\nimport BlogCard from '@/components/blog/BlogCard';\nimport { Pagination } from '@/components/ui/Pagination';\nimport { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'Blog',\n  description: 'Insights, updates, and stories from the DOCK108 team.',\n  // Add OG data specific to the blog index\n  openGraph: {\n    title: 'DOCK108 Blog',\n    description: 'Insights, updates, and stories from the DOCK108 team.',\n    url: '/blog',\n    images: [\n      {\n        url: '/images/og-default.png', // Use default OG for index\n        width: 1200,\n        height: 630,\n        alt: 'DOCK108 Blog',\n      },\n    ],\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'DOCK108 Blog',\n    description: 'Insights, updates, and stories from the DOCK108 team.',\n    images: ['/images/og-default.png'],\n  },\n};\n\nconst POSTS_PER_PAGE = 12;\n\ninterface BlogIndexPageProps {\n  searchParams?: { [key: string]: string | string[] | undefined };\n}\n\nexport default function BlogIndexPage({ searchParams }: BlogIndexPageProps) {\n  const allPosts = getAllPosts();\n  const currentPage = Number(searchParams?.['page']) || 1;\n  const totalPages = Math.ceil(allPosts.length / POSTS_PER_PAGE);\n\n  const paginatedPosts = allPosts.slice(\n    (currentPage - 1) * POSTS_PER_PAGE,\n    currentPage * POSTS_PER_PAGE,\n  );\n\n  return (\n    <Container className=\"py-12 md:py-16\">\n      <h1 className=\"text-3xl font-bold tracking-tight mb-2\">Blog</h1>\n      <p className=\"text-lg text-muted-foreground mb-10\">\n        Insights, updates, and stories from the DOCK108 team.\n      </p>\n\n      {paginatedPosts.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {paginatedPosts.map((post) => (\n            <BlogCard key={post.slug} post={post} />\n          ))}\n        </div>\n      ) : (\n        <p>No blog posts found.</p> // Handle case with no posts\n      )}\n\n      <Pagination currentPage={currentPage} totalPages={totalPages} baseUrl=\"/blog\" />\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/components/MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/components/StripeAccountSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/components/UpgradeBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/contact/ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/contact/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/context/useAlertNotifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SupabaseClient' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n  ReactNode,\n} from 'react';\nimport { createClientComponentClient, SupabaseClient } from '@supabase/auth-helpers-nextjs';\nimport { toast } from 'react-hot-toast';\nimport { useRouter } from 'next/navigation';\nimport { Database } from '@/types/supabase'; // Assuming your generated types\nimport { log } from '@/lib/logger'; // Assuming logger is available\n\n// Define the shape of an alert for the context\n// Adapt based on the actual fields available/needed from the 'alerts' table payload\ntype AlertPayload = Database['public']['Tables']['alerts']['Row'];\n\ninterface AlertNotificationContextType {\n  unreadCount: number;\n  unreadAlerts: AlertPayload[];\n  isLoading: boolean;\n  markAllRead: () => Promise<void>;\n  markSingleRead: (alertId: string) => Promise<void>;\n}\n\nconst AlertNotificationContext = createContext<AlertNotificationContextType | undefined>(undefined);\n\ninterface AlertNotificationsProviderProps {\n  children: ReactNode;\n  userStripeAccounts?: string[]; // Required to filter alerts\n}\n\nexport const AlertNotificationsProvider: React.FC<AlertNotificationsProviderProps> = ({\n  children,\n  userStripeAccounts = [],\n}) => {\n  const supabase = createClientComponentClient<Database>();\n  const router = useRouter();\n  const [unreadAlerts, setUnreadAlerts] = useState<AlertPayload[]>([]);\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const [userId, setUserId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  // --- Initial Fetch --- //\n  const fetchInitialUnread = useCallback(\n    async (currentUserId: string, accounts: string[]) => {\n      if (!currentUserId || accounts.length === 0) {\n        setIsLoading(false);\n        return;\n      }\n      setIsLoading(true);\n      console.log('Fetching initial unread alerts for user:', currentUserId, 'accounts:', accounts);\n      try {\n        // Fetch alerts for user's accounts that are NOT in alert_reads for this user\n        // This requires an RPC function or careful filtering\n        // Option 1: RPC function `get_unread_alerts(user_id, account_ids)` (Recommended)\n        // Option 2: Fetch all recent alerts for accounts, then filter client-side (Less efficient)\n        // Option 3: Fetch alerts LEFT JOIN alert_reads WHERE read_at IS NULL\n\n        // Using Option 3 approach (ensure RLS allows reading alerts for owned accounts)\n        const { data, error } = await supabase\n          .from('alerts')\n          .select(\n            `\n          *,\n          alert_reads!left(user_id)\n        `,\n          )\n          .in('stripe_account_id', accounts)\n          .is('alert_reads.user_id', null) // Only where there's no matching read record for *this* user\n          .order('triggered_at', { ascending: false })\n          .limit(100); // Limit initial fetch for performance\n\n        if (error) {\n          throw error;\n        }\n\n        // Filter out alerts where the join found a read record for the specific user (double check)\n        // The .is('alert_reads.user_id', null) should handle this server-side with Supabase v2.4+\n        // For older versions or complex RLS, manual filter might be needed:\n        // const trulyUnread = data?.filter(alert => !(alert.alert_reads && alert.alert_reads.length > 0 && alert.alert_reads.some(read => read.user_id === currentUserId))) || [];\n\n        const trulyUnread = data || []; // Assume server-side filter works\n\n        console.log(`Found ${trulyUnread.length} initial unread alerts.`);\n        setUnreadAlerts(trulyUnread);\n        setUnreadCount(trulyUnread.length);\n      } catch (error) {\n        log.error(\n          { error: error.message, userId: currentUserId },\n          'Failed to fetch initial unread alerts',\n        );\n        setUnreadAlerts([]);\n        setUnreadCount(0);\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [supabase],\n  );\n\n  // Get user ID and trigger initial fetch\n  useEffect(() => {\n    const getUserAndFetch = async () => {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n      if (user) {\n        setUserId(user.id);\n        await fetchInitialUnread(user.id, userStripeAccounts);\n      } else {\n        setIsLoading(false); // No user, not loading\n      }\n    };\n    getUserAndFetch();\n  }, [supabase, fetchInitialUnread, userStripeAccounts]);\n\n  // Handle incoming new alerts via Realtime\n  const handleNewAlert = useCallback(\n    (payload: { new: AlertPayload }) => {\n      console.log('Realtime INSERT received:', payload.new);\n      const newAlert = payload.new;\n\n      // Check if the alert belongs to one of the user's connected accounts\n      if (!userStripeAccounts.includes(newAlert.stripe_account_id)) {\n        console.log(\n          `Alert ${newAlert.id} ignored (account ${newAlert.stripe_account_id} not linked to user).`,\n        );\n        return;\n      }\n\n      // Check if we already have this alert (e.g., from initial fetch or race condition)\n      if (unreadAlerts.some((alert) => alert.id === newAlert.id)) {\n        console.log(`Alert ${newAlert.id} already in unread list.`);\n        return;\n      }\n\n      // Add to queue and update count\n      // Ensure we don't exceed any reasonable limit if the tab is open for ages\n      setUnreadAlerts((prev) => [newAlert, ...prev].slice(0, 100)); // Keep max 100 unread in memory\n      setUnreadCount((prev) => prev + 1);\n\n      // Show toast notification\n      toast.custom(\n        (t) => (\n          <div\n            className={`${\n              t.visible ? 'animate-enter' : 'animate-leave'\n            } max-w-md w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5`}\n          >\n            <div className=\"flex-1 w-0 p-4\">\n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 pt-0.5\">\n                  <span className=\"text-xl\">🚨</span>\n                </div>\n                <div className=\"ml-3 flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900\">New Guardian Alert</p>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    {newAlert.type} ({newAlert.severity})\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex border-l border-gray-200\">\n              <button\n                onClick={() => {\n                  router.push(`/guardian/alerts/${newAlert.id}`); // Link to specific alert page\n                  toast.dismiss(t.id);\n                  // Mark single read optimistically and via API\n                  markSingleRead(newAlert.id);\n                }}\n                className=\"w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-indigo-600 hover:text-indigo-500 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n              >\n                View\n              </button>\n              <button\n                onClick={() => toast.dismiss(t.id)}\n                className=\"w-full border border-transparent rounded-none p-4 flex items-center justify-center text-sm font-medium text-gray-700 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        ),\n        {\n          duration: 10000, // Keep toast longer\n          position: 'top-right',\n        },\n      );\n    },\n    [router, userStripeAccounts, unreadAlerts, markSingleRead],\n  );\n\n  // Subscribe to Realtime changes on mount\n  useEffect(() => {\n    if (!userId || userStripeAccounts.length === 0) {\n      console.log('Realtime subscription skipped (no user or no accounts).');\n      return; // Don't subscribe until we have user/accounts\n    }\n\n    console.log(\n      'Subscribing to Realtime alerts channel for accounts:',\n      userStripeAccounts.join(', '),\n    );\n\n    const channel = supabase\n      .channel('realtime-alerts') // Unique channel name\n      .on<'postgres_changes'>(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'alerts',\n        },\n        handleNewAlert,\n      )\n      .subscribe((status, err) => {\n        if (status === 'SUBSCRIBED') {\n          console.log('Realtime channel subscribed successfully!');\n        }\n        if (status === 'CHANNEL_ERROR') {\n          console.error('Realtime channel error:', err);\n        }\n        if (status === 'TIMED_OUT') {\n          console.warn('Realtime channel subscription timed out.');\n        }\n        if (status === 'CLOSED') {\n          console.log('Realtime channel closed.');\n        }\n      });\n\n    // Cleanup subscription on unmount\n    return () => {\n      console.log('Unsubscribing from Realtime alerts channel.');\n      supabase.removeChannel(channel);\n    };\n  }, [supabase, handleNewAlert, userId, userStripeAccounts]); // Depend on userId and accounts\n\n  // --- Actions --- //\n\n  const markAllRead = useCallback(async () => {\n    if (unreadAlerts.length === 0 || !userId) return;\n\n    const alertIdsToMark = unreadAlerts.map((alert) => alert.id);\n    console.log(`Calling API to mark ${alertIdsToMark.length} alerts as read for user ${userId}`);\n\n    // Optimistic update first\n    const previousAlerts = [...unreadAlerts];\n    setUnreadAlerts([]);\n    setUnreadCount(0);\n\n    try {\n      const { error } = await supabase.rpc('mark_alerts_read', {\n        p_alert_ids: alertIdsToMark,\n        p_user_id: userId,\n      });\n\n      if (error) {\n        log.error(\n          { error: error.message, userId, count: alertIdsToMark.length },\n          'Failed to mark all alerts as read via RPC',\n        );\n        // Revert optimistic update on failure\n        setUnreadAlerts(previousAlerts);\n        setUnreadCount(previousAlerts.length);\n        toast.error('Failed to mark alerts as read.');\n      }\n    } catch (error) {\n      log.error(\n        { error: error.message, userId, count: alertIdsToMark.length },\n        'Exception marking all alerts read',\n      );\n      // Revert optimistic update on failure\n      setUnreadAlerts(previousAlerts);\n      setUnreadCount(previousAlerts.length);\n      toast.error('An error occurred.');\n    } finally {\n      // **Always refetch after attempt**\n      console.log('Refetching unread count after markAllRead attempt.');\n      // Use a slight delay to allow potential DB replication/cache update?\n      setTimeout(() => fetchInitialUnread(userId, userStripeAccounts), 500); // 0.5s delay\n    }\n  }, [supabase, userId, unreadAlerts, fetchInitialUnread, userStripeAccounts]);\n\n  const markSingleRead = useCallback(\n    async (alertId: string) => {\n      if (!userId) return;\n      console.log(`Calling API to mark alert ${alertId} as read for user ${userId}`);\n\n      // Optimistic update\n      const previousAlerts = [...unreadAlerts];\n      const previousCount = unreadCount;\n      setUnreadAlerts((prev) => prev.filter((a) => a.id !== alertId));\n      setUnreadCount((prev) => Math.max(0, prev - 1));\n\n      try {\n        const { error } = await supabase.rpc('mark_alerts_read', {\n          p_alert_ids: [alertId],\n          p_user_id: userId,\n        });\n\n        if (error) {\n          log.error(\n            { error: error.message, userId, alertId },\n            'Failed to mark single alert as read via RPC',\n          );\n          // Revert optimistic update\n          setUnreadAlerts(previousAlerts);\n          setUnreadCount(previousCount);\n          toast.error('Failed to mark alert as read.');\n        }\n      } catch (error) {\n        log.error({ error: error.message, userId, alertId }, 'Exception marking single alert read');\n        // Revert optimistic update\n        setUnreadAlerts(previousAlerts);\n        setUnreadCount(previousCount);\n        toast.error('An error occurred.');\n      } finally {\n        // **Always refetch after attempt**\n        console.log(`Refetching unread count after markSingleRead attempt for ${alertId}.`);\n        // Use a slight delay?\n        setTimeout(() => fetchInitialUnread(userId, userStripeAccounts), 500); // 0.5s delay\n      }\n    },\n    [supabase, userId, unreadAlerts, unreadCount, fetchInitialUnread, userStripeAccounts],\n  );\n\n  const contextValue = {\n    unreadCount,\n    unreadAlerts,\n    isLoading,\n    markAllRead,\n    markSingleRead,\n  };\n\n  return (\n    <AlertNotificationContext.Provider value={contextValue}>\n      {children}\n    </AlertNotificationContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useAlertNotifications = (): AlertNotificationContextType => {\n  const context = useContext(AlertNotificationContext);\n  if (context === undefined) {\n    throw new Error('useAlertNotifications must be used within an AlertNotificationsProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/crondeck/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/crondeck/opengraph-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/crondeck/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLink' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PlayCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PauseCircle' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":21,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport {\n  ExternalLink,\n  Info,\n  PlayCircle,\n  PauseCircle,\n  ListChecks,\n  BellRing,\n  LineChart,\n  Check,\n  Clock,\n} from 'lucide-react';\nimport type { Metadata } from 'next';\nimport { Container } from '@/components/Container';\nimport { cn } from '@/lib/utils';\nimport { WaitlistForm } from '@/components/WaitlistForm';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { productLD } from '@/lib/jsonld';\nimport { Button } from '@/components/ui/button';\n\n// Placeholder components - replace or refine\nconst Badge = ({ children, colorVar }: { children: React.ReactNode; colorVar: string }) => (\n  <span\n    className=\"inline-flex items-center rounded-full px-3 py-0.5 text-sm font-medium\"\n    style={{ backgroundColor: `color-mix(in srgb, ${colorVar} 10%, transparent)`, color: colorVar }}\n  >\n    {children}\n  </span>\n);\n// Using a generic icon placeholder for now\nconst ClockIcon = ({ className }: { className?: string }) => (\n  <Clock className={cn('w-64 h-64 text-gray-300', className)} />\n);\n\n// Metadata\nexport const generateMetadata = (): Metadata => {\n  const url = 'https://www.dock108.ai/crondeck';\n  const image = `${url}/opengraph-image`;\n\n  return {\n    title: 'CronDeck – Cron & schedule monitor | DOCK108',\n    description: 'Unified monitoring for Kubernetes CronJobs, GitHub Actions, and cloud tasks.',\n    openGraph: {\n      title: 'CronDeck – Cron & schedule monitor | DOCK108',\n      description: 'Unified monitoring for Kubernetes CronJobs, GitHub Actions, and cloud tasks.',\n      url,\n      images: [image],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: 'CronDeck – Cron & schedule monitor | DOCK108',\n      description: 'Unified monitoring for Kubernetes CronJobs, GitHub Actions, and cloud tasks.',\n      images: [image],\n    },\n    other: {\n      'script:type=application/ld+json': JSON.stringify(\n        productLD({\n          name: 'CronDeck',\n          description:\n            'Unified monitoring for Kubernetes CronJobs, GitHub Actions, and cloud tasks.',\n          url,\n          image,\n          price: '0.00',\n        }),\n      ),\n    },\n  };\n};\n\nconst painPoints = [\n  {\n    pain: 'A Kubernetes CronJob failed silently overnight, delaying critical batch processing.',\n    fix: 'Heartbeat monitoring agent pings CronDeck; get alerted instantly if a ping is missed.',\n  },\n  {\n    pain: 'GitHub Action schedule was skipped due to runner availability or queue backlog.',\n    fix: 'GraphQL API poller tracks `last_run` status and detects unexpected delays or skips.',\n  },\n  {\n    pain: 'Multiple cron stacks (K8s, GitHub, Cloud Tasks) means alerts are scattered and noisy.',\n    fix: 'Unified dashboard, Slack digests, and PagerDuty integration consolidate all schedules.',\n  },\n];\n\nconst features = [\n  {\n    name: 'Auto-Discovery',\n    description:\n      'Connects to Kubernetes, GitHub, GCP Cloud Scheduler, etc. to automatically find and list your cron jobs.',\n    icon: ListChecks,\n  },\n  {\n    name: 'Smart Alerts',\n    description:\n      'Configure heartbeats or status checks. Get notified via Slack, PagerDuty, or webhooks on misfires or delays.',\n    icon: BellRing,\n  },\n  {\n    name: 'SLA Monitoring & History',\n    description:\n      'Track job duration, success rates, and view historical trends to understand schedule performance over time.',\n    icon: LineChart,\n  },\n];\n\n// Pricing tiers data\nconst tiers = [\n  {\n    name: 'Free',\n    id: 'tier-free',\n    priceMonthly: '$0',\n    description: 'Monitor your essential cron jobs, forever free.',\n    features: [\n      'Up to 50 Cron Jobs',\n      'Kubernetes & GitHub Discovery',\n      'Basic Slack Alerts',\n      '2 Weeks History',\n    ],\n  },\n  {\n    name: 'Pro',\n    id: 'tier-pro',\n    priceMonthly: '$49',\n    description: 'Unlimited monitoring with advanced features and longer retention.',\n    features: [\n      'Unlimited Cron Jobs',\n      'All Discovery Sources',\n      'Slack, PagerDuty, Webhooks',\n      '6 Months History',\n      'Multi-Environment Support',\n      'Priority Support',\n    ],\n  },\n];\n\nexport default function CrondeckPage() {\n  const accentColor = 'var(--accent-crondeck)';\n  const productIdentifier = 'crondeck';\n  const tableName = 'crondeck_leads';\n\n  return (\n    <>\n      {/* Hero Section */}\n      <div className=\"relative isolate overflow-hidden pt-14\">\n        {/* Background Gradient Blob */}\n        <div\n          className=\"absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80\"\n          aria-hidden=\"true\"\n        >\n          <div\n            className=\"relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#8b5cf6] to-[#ec4899] opacity-20 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]\" // Adjusted gradient colors for violet/pink feel\n            style={{\n              clipPath:\n                'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',\n            }}\n          />\n        </div>\n\n        <Container className=\"py-24 sm:py-32 lg:flex lg:items-center lg:gap-x-10 lg:py-40\">\n          <div className=\"mx-auto max-w-2xl lg:mx-0 lg:flex-auto\">\n            <Badge colorVar={accentColor}>CRONDECK</Badge>\n            <h1 className=\"mt-6 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n              Never miss a Cron job again—monitor every schedule in one dashboard.\n            </h1>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Auto-discovers Kubernetes CronJobs, GitHub Action schedules & cloud tasks, then alerts\n              on misfires.\n            </p>\n            {/* Waitlist Form */}\n            <div className=\"mt-8\">\n              <WaitlistForm\n                productIdentifier={productIdentifier}\n                accentColorVar={accentColor}\n                tableName={tableName}\n              />\n            </div>\n          </div>\n          {/* Placeholder Illustration */}\n          <div className=\"mt-16 sm:mt-24 lg:mt-0 lg:flex-shrink-0 lg:flex-grow\">\n            <ClockIcon className=\"mx-auto w-[24rem] h-[24rem] max-w-full drop-shadow-xl\" />\n          </div>\n        </Container>\n      </div>\n\n      {/* Pain/Solution Section */}\n      <div className=\"py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:mx-0\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Stop chasing down silent cron failures\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              CronDeck automatically discovers and monitors your scheduled tasks across platforms.\n            </p>\n          </div>\n          <div className=\"mt-16 flow-root\">\n            <div className=\"-my-8 divide-y divide-gray-100\">\n              {painPoints.map((point, index) => (\n                <div\n                  key={index}\n                  className={`py-8 ${index % 2 !== 0 ? 'bg-gray-50 -mx-6 px-6 lg:-mx-8 lg:px-8' : ''}`}\n                >\n                  <dl className=\"relative flex flex-wrap gap-x-3 gap-y-3 lg:gap-x-8\">\n                    <div className=\"flex-none lg:w-80\">\n                      <dt className=\"font-semibold text-gray-900\">The Pain:</dt>\n                      <dd className=\"mt-1 text-gray-600\">{point.pain}</dd>\n                    </div>\n                    <div className=\"flex-auto\">\n                      <dt className=\"font-semibold text-gray-900\">The CronDeck Fix:</dt>\n                      <dd className=\"mt-1 text-gray-600\">{point.fix}</dd>\n                    </div>\n                  </dl>\n                </div>\n              ))}\n            </div>\n          </div>\n        </Container>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"bg-white py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:mx-0\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              One dashboard to rule them all\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              CronDeck brings visibility and reliability to your scattered background tasks.\n            </p>\n          </div>\n          <div className=\"mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none\">\n            <dl className=\"grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3\">\n              {features.map((feature) => (\n                <div\n                  key={feature.name}\n                  className={cn(\n                    'flex flex-col rounded-2xl border border-t-2 bg-white p-8',\n                    'shadow-[0_0px_0px_0px_var(--tw-shadow-color)] transition-all duration-300 ease-in-out hover:-translate-y-1 hover:shadow-[0_6px_25px_-4px_var(--tw-shadow-color)]',\n                  )}\n                  style={\n                    {\n                      '--tw-shadow-color': accentColor,\n                      borderColor: accentColor,\n                    } as React.CSSProperties\n                  }\n                >\n                  <dt className=\"flex items-center gap-x-3 text-base font-semibold leading-7 text-gray-900\">\n                    <feature.icon\n                      className=\"h-5 w-5 flex-none text-[var(--accent-crondeck)]\"\n                      aria-hidden=\"true\"\n                    />\n                    {feature.name}\n                  </dt>\n                  <dd className=\"mt-4 flex flex-auto flex-col text-base leading-7 text-gray-600\">\n                    <p className=\"flex-auto\">{feature.description}</p>\n                  </dd>\n                </div>\n              ))}\n            </dl>\n          </div>\n        </Container>\n      </div>\n\n      {/* Pricing Section */}\n      <div className=\"bg-gray-50 py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl text-center\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Predictable pricing for all teams\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Start free, then scale up when you need more history or integrations. No per-job fees.\n            </p>\n          </div>\n          <div className=\"mt-16 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n            {tiers.map((tier) => (\n              <Card\n                key={tier.id}\n                className=\"flex flex-col rounded-2xl border border-t-2\"\n                style={{ borderColor: accentColor }}\n              >\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-semibold leading-8 text-gray-900\">\n                    {tier.name}\n                  </CardTitle>\n                  <CardDescription className=\"text-sm leading-6 text-gray-600\">\n                    {tier.description}\n                  </CardDescription>\n                  <div className=\"mt-4 flex items-baseline gap-x-2\">\n                    <span className=\"text-4xl font-bold tracking-tight text-gray-900\">\n                      {tier.priceMonthly}\n                    </span>\n                    <span className=\"text-sm font-semibold leading-6 tracking-wide text-gray-600\">\n                      {tier.priceMonthly !== '$0' ? '/month' : ''}\n                    </span>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"flex-1\">\n                  <ul role=\"list\" className=\"mt-8 space-y-3 text-sm leading-6 text-gray-600\">\n                    {tier.features.map((feature) => (\n                      <li key={feature} className=\"flex gap-x-3\">\n                        <Check\n                          className=\"h-6 w-5 flex-none text-[var(--accent-crondeck)]\"\n                          aria-hidden=\"true\"\n                        />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          {/* <p className=\"mt-8 text-center text-sm text-gray-500\">\n            Early-access pricing—subject to change after launch.\n          </p> */}\n        </Container>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/docs/[...slug]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/docs/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/docs/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/DemoViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'log' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalDelayMs' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":33,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useDemoScenario } from './useDemoScenario';\nimport { EventTable } from '../../components/guardian-demo/EventTable';\nimport ActionLog from '../../components/guardian-demo/ActionLog';\nimport SlackAlert from '../../components/guardian-demo/SlackAlert';\nimport { ScenarioPicker } from '../../components/guardian-demo/ScenarioPicker';\nimport { getScenarios } from './getScenarios';\nimport { useState, useEffect } from 'react';\nimport { log } from '@/lib/logger';\nimport toast from 'react-hot-toast';\n\n// Get scenarios at build time\nconst scenarioList = getScenarios();\nconst scenarioIds = scenarioList.map((s) => s.id);\nconst scenarioLabels = scenarioList.reduce<Record<string, string>>((acc, s) => {\n  acc[s.id] = s.label;\n  return acc;\n}, {});\n\nexport function DemoViewer() {\n  // Default to the first scenario instead of empty string\n  const [scenario, setScenario] = useState<string>(scenarioIds.length > 0 ? scenarioIds[0] : '');\n  const [speed, setSpeed] = useState(1);\n\n  // We don't need fallback events anymore since we always use scenarios\n  const scenarioData = useDemoScenario(scenario, {\n    onExpire: () => handleReset(true),\n    speed,\n  });\n\n  // Use scenario events\n  const { events, isRunning, totalDelayMs } = scenarioData;\n\n  const [log, setLog] = useState<string[]>(['Monitoring started…']);\n  const [alert, setAlert] = useState<{ text: string }>();\n\n  // Check for scenario completion\n  useEffect(() => {\n    // If the scenario was running but now stopped and has played all events\n    if (!isRunning && events.length > 0 && events.length === scenarioData.total) {\n      toast.success('Scenario complete. Click Restart to replay.');\n    }\n  }, [isRunning, events.length, scenarioData.total]);\n\n  function handleReset(auto = false) {\n    scenarioData.restart();\n    setLog([auto ? 'Demo auto‑restarted after 5 min idle.' : 'Monitoring restarted…']);\n    setAlert(undefined);\n  }\n\n  const handleScenarioChange = (newScenario: string) => {\n    setScenario(newScenario);\n    handleReset(false);\n  };\n\n  // Update the log message based on the scenario type\n  useEffect(() => {\n    const latest = events[events.length - 1];\n    if (!latest?.flagged) return;\n\n    const amt = (latest.amount ?? 0) / 100;\n    let logMessage = `⚠️ Fraud detected in payout ${latest.id.slice(0, 8)}…`;\n    let alertMessage = `🚨 Payout auto‑paused: $${amt.toFixed(2)} (${latest.id.slice(0, 8)}…)`;\n\n    // Different messages based on scenario type\n    if (scenario === 'velocity-breach') {\n      logMessage = `⚠️ Velocity breach detected — 3 payouts in under 60s.`;\n      alertMessage += ` – velocity breach`;\n    } else if (scenario === 'bank-swap') {\n      logMessage = `⚠️ Bank account swap detected — new account added recently.`;\n      alertMessage += ` – suspicious bank account change`;\n    } else if (scenario === 'geo-mismatch') {\n      logMessage = `⚠️ Geo-location mismatch detected — payout from unusual location.`;\n      alertMessage += ` – unusual location`;\n    }\n\n    setLog((l) =>\n      [logMessage, `⏸ Auto-pause triggered for payout ${latest.id.slice(0, 8)}…`, ...l].slice(\n        0,\n        20,\n      ),\n    );\n\n    setAlert({\n      text: alertMessage,\n    });\n  }, [events, scenario]);\n\n  return (\n    <>\n      <div className=\"mt-4\">\n        <ScenarioPicker\n          scenarios={scenarioIds}\n          scenarioLabels={scenarioLabels}\n          currentScenario={scenario}\n          onChange={handleScenarioChange}\n          onRestart={() => handleReset(false)}\n          speed={speed}\n          onSpeedChange={setSpeed}\n        />\n      </div>\n      <section className=\"mt-4 grid gap-6 lg:grid-cols-[2fr_1fr]\">\n        <EventTable events={events} className=\"w-full\" />\n        <div>\n          <h2 className=\"mb-2 text-lg font-semibold\">Action Log</h2>\n          <ActionLog entries={log} />\n          <SlackAlert alert={alert} />\n        </div>\n      </section>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/__tests__/scenarios.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): app/guardian-demo/__tests__/scenarios.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport fs from 'fs';\nimport path from 'path';\nimport { Scenario } from '../types';\n\ndescribe('Fraud scenarios', () => {\n  it('velocity-breach scenario matches snapshot', () => {\n    const scenarioPath = path.join(process.cwd(), 'public', 'guardian-demo', 'scenarios', 'velocity-breach.json');\n    const scenarioContent = fs.readFileSync(scenarioPath, 'utf-8');\n    const scenario = JSON.parse(scenarioContent) as Scenario;\n    \n    // Basic validation\n    expect(Array.isArray(scenario)).toBe(true);\n    expect(scenario.length).toBeGreaterThan(5);\n    \n    // Check that all events have the required fields\n    scenario.forEach(event => {\n      expect(event.delayMs).toBeTypeOf('number');\n      expect(event.type).toBeTypeOf('string');\n      expect(event.payload).toBeTypeOf('object');\n      expect(event.payload.id).toBeTypeOf('string');\n      expect(event.payload.object).toBeTypeOf('string');\n    });\n    \n    // Check for specific sequence patterns\n    const payoutEvents = scenario.filter(e => e.type.startsWith('payout.'));\n    expect(payoutEvents.length).toBeGreaterThan(3);\n    \n    // Check for flagged status on at least one event\n    const flaggedEvents = scenario.filter(e => e.payload.flagged === true || \n      (e.payload.metadata && e.payload.metadata.guardian_action === 'paused'));\n    expect(flaggedEvents.length).toBeGreaterThan(0);\n    \n    // Ensure ordered delayMs values\n    let lastDelay = -1;\n    scenario.forEach(event => {\n      expect(event.delayMs).toBeGreaterThanOrEqual(lastDelay);\n      lastDelay = event.delayMs;\n    });\n    \n    // Snapshot test\n    expect(scenario).toMatchSnapshot();\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/__tests__/useDemoScenario.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): app/guardian-demo/__tests__/useDemoScenario.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\nimport { useDemoScenario } from '../useDemoScenario';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\n// Mock fetch\nglobal.fetch = vi.fn();\n\n// Mock timer\nvi.useFakeTimers();\n\ndescribe('useDemoScenario', () => {\n  const mockScenario = [\n    {\n      delayMs: 0,\n      type: 'account.updated',\n      payload: {\n        id: 'acct_test1',\n        object: 'account'\n      }\n    },\n    {\n      delayMs: 2000,\n      type: 'payout.paid',\n      payload: {\n        id: 'po_test1',\n        object: 'payout',\n        amount: 1000\n      }\n    },\n    {\n      delayMs: 3000,\n      type: 'payout.paid',\n      payload: {\n        id: 'po_test2',\n        object: 'payout',\n        amount: 2000\n      }\n    }\n  ];\n\n  beforeEach(() => {\n    vi.resetAllMocks();\n    // Mock successful fetch\n    (global.fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      json: async () => mockScenario\n    });\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  it('loads and plays a scenario', async () => {\n    const { result } = renderHook(() => useDemoScenario('test-scenario'));\n\n    // Wait for fetch to complete\n    await vi.runAllTimersAsync();\n    \n    // Check initial state after loading\n    expect(result.current.events).toEqual([]);\n    expect(result.current.currentIndex).toBe(0);\n    expect(result.current.total).toBe(3);\n    \n    // Advance timers to trigger events\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(1);\n    });\n\n    // First event should be triggered immediately (delayMs: 0)\n    expect(result.current.events.length).toBe(1);\n    expect(result.current.events[0].type).toBe('account.updated');\n    expect(result.current.currentIndex).toBe(1);\n    \n    // Advance to second event\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(2000);\n    });\n    \n    expect(result.current.events.length).toBe(2);\n    expect(result.current.events[1].type).toBe('payout.paid');\n    expect(result.current.events[1].amount).toBe(1000);\n    expect(result.current.currentIndex).toBe(2);\n    \n    // Advance to third event\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(1000);\n    });\n    \n    expect(result.current.events.length).toBe(3);\n    expect(result.current.events[2].type).toBe('payout.paid');\n    expect(result.current.events[2].amount).toBe(2000);\n    expect(result.current.currentIndex).toBe(3);\n  });\n\n  it('handles restart function', async () => {\n    const { result } = renderHook(() => useDemoScenario('test-scenario'));\n\n    // Wait for fetch to complete\n    await vi.runAllTimersAsync();\n    \n    // Play through all events\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(3001);\n    });\n    \n    expect(result.current.events.length).toBe(3);\n    \n    // Call restart\n    act(() => {\n      result.current.restart();\n    });\n    \n    // Events should be cleared\n    expect(result.current.events.length).toBe(0);\n    expect(result.current.currentIndex).toBe(0);\n    \n    // First event should appear after advancing time\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(1);\n    });\n    \n    expect(result.current.events.length).toBe(1);\n  });\n\n  it('handles fetch error', async () => {\n    // Mock fetch error\n    (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));\n    \n    const { result } = renderHook(() => useDemoScenario('test-scenario'));\n    \n    // Wait for fetch to complete\n    await vi.runAllTimersAsync();\n    \n    expect(result.current.error).toBe('Network error');\n    expect(result.current.events.length).toBe(0);\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/__tests__/useDemoScenario.timers.test.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): app/guardian-demo/__tests__/useDemoScenario.timers.test.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\nimport { useDemoScenario } from '../useDemoScenario';\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\n// Mock fetch\nglobal.fetch = vi.fn();\n\n// Mock logger\nvi.mock('@/lib/logger', () => ({\n  logger: {\n    info: vi.fn(),\n    error: vi.fn(),\n    warn: vi.fn(),\n    debug: vi.fn(),\n  }\n}));\n\n// Mock timer\nvi.useFakeTimers();\n\ndescribe('useDemoScenario timer management', () => {\n  const mockScenario1 = [\n    {\n      delayMs: 0,\n      type: 'account.updated',\n      payload: {\n        id: 'acct_test1',\n        object: 'account'\n      }\n    },\n    {\n      delayMs: 2000,\n      type: 'payout.paid',\n      payload: {\n        id: 'po_test1',\n        object: 'payout',\n        amount: 1000\n      }\n    }\n  ];\n  \n  const mockScenario2 = [\n    {\n      delayMs: 0,\n      type: 'account.updated',\n      payload: {\n        id: 'acct_test2',\n        object: 'account'\n      }\n    },\n    {\n      delayMs: 5000,\n      type: 'payout.paid',\n      payload: {\n        id: 'po_test2',\n        object: 'payout',\n        amount: 2000\n      }\n    }\n  ];\n\n  beforeEach(() => {\n    vi.resetAllMocks();\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  it('cancels previous fetch when scenario changes quickly', async () => {\n    // First mock fetch for scenario1\n    (global.fetch as jest.Mock).mockImplementationOnce(() => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            ok: true,\n            json: async () => mockScenario1\n          });\n        }, 500); // Delayed response\n      });\n    });\n    \n    // Second mock fetch for scenario2 - returns immediately\n    (global.fetch as jest.Mock).mockImplementationOnce(() => {\n      return Promise.resolve({\n        ok: true,\n        json: async () => mockScenario2\n      });\n    });\n    \n    const { result, rerender } = renderHook(\n      (props) => useDemoScenario(props.scenarioName), \n      { initialProps: { scenarioName: 'scenario1' } }\n    );\n    \n    // Quick change to scenario2 before the first fetch completes\n    rerender({ scenarioName: 'scenario2' });\n    \n    // Run all timers to complete any pending operations\n    await vi.runAllTimersAsync();\n    \n    // Should have loaded scenario2 and not scenario1\n    expect(result.current.total).toBe(2);\n    expect(result.current.events.length).toBe(1); // First event fires immediately\n    \n    // Advance to trigger second event\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(5000);\n    });\n    \n    // Check that the right events were loaded\n    expect(result.current.events.length).toBe(2);\n    \n    // Check that fetch was called twice\n    expect(global.fetch).toHaveBeenCalledTimes(2);\n  });\n\n  it('properly cleans up timers when unmounted', async () => {\n    // Mock a successful fetch\n    (global.fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      json: async () => mockScenario1\n    });\n    \n    const { result, unmount } = renderHook(() => useDemoScenario('test-scenario'));\n    \n    // Wait for fetch to complete\n    await vi.runAllTimersAsync();\n    \n    // First event should fire immediately\n    expect(result.current.events.length).toBe(1);\n    \n    // Unmount the hook\n    unmount();\n    \n    // Advance timers\n    await act(async () => {\n      await vi.advanceTimersByTimeAsync(2000);\n    });\n    \n    // No additional events should have been added since we unmounted\n    expect(result.current.events.length).toBe(1);\n  });\n\n  it('handles scenario change correctly', async () => {\n    // Mock a successful fetch for two different scenarios\n    (global.fetch as jest.Mock)\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockScenario1\n      })\n      .mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockScenario2\n      });\n    \n    const { result, rerender } = renderHook(\n      (props) => useDemoScenario(props.scenarioName), \n      { initialProps: { scenarioName: 'scenario1' } }\n    );\n    \n    // Wait for fetch and initial event\n    await vi.runAllTimersAsync();\n    \n    // First event should fire immediately\n    expect(result.current.events.length).toBe(1);\n    expect(result.current.events[0].id).toContain('acct_test1');\n    \n    // Change scenario\n    rerender({ scenarioName: 'scenario2' });\n    \n    // Wait for fetch and initial event of new scenario\n    await vi.runAllTimersAsync();\n    \n    // Should have reset events and loaded first event of new scenario\n    expect(result.current.events.length).toBe(1);\n    expect(result.current.events[0].id).toContain('acct_test2');\n  });\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/getScenarios.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[345,348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[345,348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Represents a single event in a fraud scenario\n */\nexport type ScenarioEvent = {\n  /** Milliseconds to wait after the previous event before firing this one */\n  delayMs: number;\n  \n  /** Stripe event type */\n  type: string;\n  \n  /** Event payload data (Stripe object) */\n  payload: {\n    id: string;\n    object: string;\n    [key: string]: any;\n  };\n};\n\n/**\n * A complete fraud scenario consisting of a sequence of events\n */\nexport type Scenario = ScenarioEvent[]; ","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/useDemoScenario.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[251,254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[251,254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport { DemoEvent } from './useFakeStripeEvents';\n\nexport type ScenarioEvent = {\n  delayMs: number;\n  type: 'account.updated' | 'payout.paid';\n  payload: Record<string, any>;\n};\n\nexport type ScenarioOptions = {\n  onExpire?: () => void;\n  speed?: number;\n};\n\nexport function useDemoScenario(scenarioName: string | null, options: ScenarioOptions = {}) {\n  const { onExpire, speed = 1 } = options;\n  const [events, setEvents] = useState<DemoEvent[]>([]);\n  const [scenarioEvents, setScenarioEvents] = useState<ScenarioEvent[]>([]);\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n  const [totalDelayMs, setTotalDelayMs] = useState<number>(0);\n\n  const timersRef = useRef<NodeJS.Timeout[]>([]);\n  const startRef = useRef<number>(Date.now());\n  const fetchControllerRef = useRef<AbortController | null>(null);\n  const pendingEventsRef = useRef<\n    Array<{ event: ScenarioEvent; index: number; scheduledAt: number }>\n  >([]);\n\n  // Clear all timers on unmount or reset\n  const clearAllTimers = useCallback(() => {\n    if (timersRef.current.length > 0) {\n      timersRef.current.forEach(clearTimeout);\n      timersRef.current = [];\n    }\n    pendingEventsRef.current = [];\n    setIsRunning(false);\n  }, []);\n\n  const reset = useCallback(() => {\n    clearAllTimers();\n    setEvents([]);\n    setCurrentIndex(0);\n    startRef.current = Date.now();\n  }, [clearAllTimers]);\n\n  const restart = (newScenarioName?: string) => {\n    reset();\n    if (newScenarioName) {\n      loadScenario(newScenarioName);\n    } else if (scenarioName) {\n      scheduleEvents();\n    }\n  };\n\n  // Load scenario data\n  const loadScenario = useCallback(\n    async (name: string) => {\n      if (!name) return;\n\n      // Cancel any pending fetch\n      if (fetchControllerRef.current) {\n        fetchControllerRef.current.abort();\n      }\n\n      // Create new controller for this fetch\n      fetchControllerRef.current = new AbortController();\n      const signal = fetchControllerRef.current.signal;\n\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(`/guardian-demo/scenarios/${name}.json`, { signal });\n        if (!response.ok) {\n          throw new Error(`Failed to load scenario: ${response.statusText}`);\n        }\n\n        const data: ScenarioEvent[] = await response.json();\n        setScenarioEvents(data);\n\n        // Calculate total delay time from all events\n        const total = data.reduce((sum, event) => sum + event.delayMs, 0);\n        setTotalDelayMs(total);\n\n        setIsLoading(false);\n        setCurrentIndex(0);\n\n        // Clear any existing events and timers before scheduling new ones\n        reset();\n      } catch (err) {\n        // Don't set error if aborted\n        if (err instanceof Error && err.name === 'AbortError') {\n          return;\n        }\n        setError(err instanceof Error ? err.message : 'Failed to load scenario');\n        setIsLoading(false);\n      }\n    },\n    [reset],\n  );\n\n  // Schedule the events based on the scenario\n  const scheduleEvents = useCallback(() => {\n    clearAllTimers();\n    const now = Date.now();\n    startRef.current = now;\n    setIsRunning(true);\n\n    // Track pending events with information about when they were scheduled\n    pendingEventsRef.current = scenarioEvents.map((event, index) => ({\n      event,\n      index,\n      scheduledAt: now,\n    }));\n\n    // Schedule all events\n    scenarioEvents.forEach((event, index) => {\n      const timer = setTimeout(\n        () => {\n          // Generate a truly unique ID by including a timestamp\n          const uniqueId = `${event.payload.id || 'event'}-${event.type}-${index}-${Date.now()}`;\n\n          // Convert scenario event to DemoEvent\n          const demoEvent: DemoEvent = {\n            id: uniqueId,\n            type: event.type,\n            amount: event.type === 'payout.paid' ? event.payload.amount : undefined,\n            created: Date.now(),\n            flagged:\n              event.payload.flagged === true ||\n              (event.payload.metadata && event.payload.metadata.guardian_action === 'paused'),\n          };\n\n          // Remove this event from pending events ref\n          pendingEventsRef.current = pendingEventsRef.current.filter(\n            (pe) => !(pe.index === index && pe.event === event),\n          );\n\n          setEvents((prev) => [...prev.slice(-49), demoEvent]);\n          setCurrentIndex(index + 1);\n\n          // If this is the last event, stop the scenario and set timer to expire after 5 minutes\n          if (index === scenarioEvents.length - 1) {\n            setIsRunning(false);\n\n            const expireTimer = setTimeout(() => {\n              reset();\n              onExpire?.();\n            }, 300_000); // 5 minutes\n\n            timersRef.current.push(expireTimer);\n          }\n        },\n        Math.max(0, event.delayMs / speed),\n      );\n\n      timersRef.current.push(timer);\n    });\n  }, [clearAllTimers, scenarioEvents, speed, onExpire, reset]);\n\n  // Reschedule events when speed changes\n  const rescheduleEvents = useCallback(() => {\n    if (pendingEventsRef.current.length === 0) return;\n\n    clearAllTimers();\n    const now = Date.now();\n    const elapsed = now - startRef.current;\n    setIsRunning(true);\n\n    // For each pending event, calculate the new delay based on elapsed time\n    pendingEventsRef.current.forEach(({ event, index }) => {\n      const originalDelay = event.delayMs;\n      // Adjust delay based on elapsed time\n      const adjustedDelay = Math.max(0, originalDelay - elapsed);\n\n      // Schedule with new delay\n      const timer = setTimeout(\n        () => {\n          // Generate a truly unique ID by including a timestamp\n          const uniqueId = `${event.payload.id || 'event'}-${event.type}-${index}-${Date.now()}`;\n\n          // Convert scenario event to DemoEvent\n          const demoEvent: DemoEvent = {\n            id: uniqueId,\n            type: event.type,\n            amount: event.type === 'payout.paid' ? event.payload.amount : undefined,\n            created: Date.now(),\n            flagged:\n              event.payload.flagged === true ||\n              (event.payload.metadata && event.payload.metadata.guardian_action === 'paused'),\n          };\n\n          // Remove this event from pending events ref\n          pendingEventsRef.current = pendingEventsRef.current.filter(\n            (pe) => !(pe.index === index && pe.event === event),\n          );\n\n          setEvents((prev) => [...prev.slice(-49), demoEvent]);\n          setCurrentIndex(index + 1);\n\n          // If this is the last event, stop running and set timer to expire\n          if (index === scenarioEvents.length - 1) {\n            setIsRunning(false);\n\n            const expireTimer = setTimeout(() => {\n              reset();\n              onExpire?.();\n            }, 300_000); // 5 minutes\n\n            timersRef.current.push(expireTimer);\n          }\n        },\n        Math.max(0, adjustedDelay / speed),\n      );\n\n      timersRef.current.push(timer);\n    });\n  }, [clearAllTimers, scenarioEvents, speed, onExpire, reset]);\n\n  // Load scenario effect\n  useEffect(() => {\n    if (scenarioName) {\n      clearAllTimers();\n      loadScenario(scenarioName);\n    }\n\n    return () => {\n      if (fetchControllerRef.current) {\n        fetchControllerRef.current.abort();\n        fetchControllerRef.current = null;\n      }\n      clearAllTimers();\n    };\n  }, [scenarioName, clearAllTimers, loadScenario]);\n\n  // Schedule events when scenario data is loaded\n  useEffect(() => {\n    if (scenarioEvents.length > 0) {\n      scheduleEvents();\n    }\n  }, [scenarioEvents, scheduleEvents]);\n\n  // Reschedule when speed changes\n  useEffect(() => {\n    if (scenarioEvents.length > 0 && pendingEventsRef.current.length > 0) {\n      rescheduleEvents();\n    }\n  }, [speed, scenarioEvents.length, rescheduleEvents]);\n\n  return {\n    events,\n    currentIndex,\n    total: scenarioEvents.length,\n    isLoading,\n    error,\n    restart,\n    reset,\n    isRunning,\n    totalDelayMs,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/guardian-demo/useFakeStripeEvents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/login/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1759,1762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1759,1762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Suspense, useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Loader2 } from 'lucide-react';\nimport { createClient } from '@/utils/supabase/client';\nimport Link from 'next/link';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\n\n// Client component that safely uses useSearchParams\nfunction LoginForm() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo');\n  const defaultRedirect = '/stripe-guardian/alerts';\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const supabase = createClient();\n\n  useEffect(() => {\n    // Check if already logged in and redirect to dashboard\n    const checkSession = async () => {\n      const {\n        data: { session },\n      } = await supabase.auth.getSession();\n      if (session) {\n        router.replace('/stripe-guardian/alerts');\n      }\n    };\n\n    checkSession();\n  }, [router, supabase]);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      // Redirect after successful login\n      router.push(redirectTo || defaultRedirect);\n      router.refresh();\n    } catch (error: any) {\n      setError(error.message || 'An error occurred during sign in');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-slate-900 p-4\">\n      <Card className=\"w-full max-w-md bg-slate-800 text-white\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold\">Sign in to DOCK108</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Enter your email and password to access your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"email@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"bg-slate-700 border-slate-600\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"bg-slate-700 border-slate-600\"\n              />\n            </div>\n            {error && <div className=\"text-red-500 text-sm\">{error}</div>}\n            <Button type=\"submit\" disabled={loading} className=\"w-full\">\n              {loading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                'Sign in'\n              )}\n            </Button>\n          </form>\n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-2\">\n          <div className=\"text-center text-sm text-slate-400\">\n            Don&apos;t have an account?\n            <Link href=\"/sign-up\" className=\"ml-1 font-medium text-blue-400 hover:underline\">\n              Sign up for Beta\n            </Link>\n          </div>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n\n// Main page component with Suspense boundary\nexport default function LoginPage() {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"flex min-h-screen items-center justify-center bg-slate-900\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      }\n    >\n      <LoginForm />\n    </Suspense>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/notary-ci/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/notary-ci/opengraph-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/notary-ci/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next';\nimport { ExternalLink, Github, CheckCircle2 } from 'lucide-react';\nimport { Container } from '@/components/Container';\nimport { cn } from '@/lib/utils';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { WaitlistForm } from '@/components/WaitlistForm';\nimport { productLD } from '@/lib/jsonld';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\n\n// Placeholder components - replace or refine\nconst Laptop = ({ className }: { className?: string }) => (\n  <svg className={`w-64 h-64 text-gray-300 ${className || ''}`} />\n);\n\n// Metadata\nexport const generateMetadata = (): Metadata => {\n  const url = 'https://www.dock108.ai/notary-ci';\n  const image = `${url}/opengraph-image`;\n\n  return {\n    title: 'Notary CI – Fast macOS notarization | DOCK108',\n    description: 'Cloud signing & notarization for indie and studio mac apps.',\n    openGraph: {\n      title: 'Notary CI – Fast macOS notarization | DOCK108',\n      description: 'Cloud signing & notarization for indie and studio mac apps.',\n      url,\n      images: [image],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: 'Notary CI – Fast macOS notarization | DOCK108',\n      description: 'Cloud signing & notarization for indie and studio mac apps.',\n      images: [image],\n    },\n    other: {\n      'script:type=application/ld+json': JSON.stringify(\n        productLD({\n          name: 'Notary CI',\n          description: 'Cloud signing & notarization for indie and studio mac apps.',\n          url,\n          image,\n          price: '25.00',\n        }),\n      ),\n    },\n  };\n};\n\nconst painPoints = [\n  {\n    pain: 'The `altool` is deprecated, notarization fails randomly, and App Store Connect is a maze.',\n    fix: 'Uses the modern `notarytool` Swift CLI via a stable API, handling auth and retries automatically.',\n  },\n  {\n    pain: 'CI breaks whenever the Apple certificate expires, usually discovered at 2 AM.',\n    fix: 'Securely stores your keys/certs in a cloud HSM with auto-renewal alerts and seamless rotation.',\n  },\n  {\n    pain: 'Requires a dedicated macOS runner in CI just for the signing and notarization steps.',\n    fix: 'Offload the entire process to our hosted macOS VMs. Trigger via API or GitHub Action.',\n  },\n];\n\nconst features = [\n  {\n    name: 'Drag-and-Drop Web UI',\n    description:\n      'No CLI needed. Upload your unsigned .app or .pkg, and download the notarized, stapled output minutes later.',\n    icon: ExternalLink,\n  },\n  {\n    name: 'GitHub Action Integration',\n    description:\n      'Drop our action into your existing workflow. Handles inputs, outputs, and secrets securely.',\n    icon: Github,\n    code: `uses: dock108/notary-ci-action@v1\\\\nwith:\\\\n  api_key: \\\\\\${{ secrets.NOTARY_CI_KEY }}\\\\n  app_path: ./build/MyApp.dmg`,\n  },\n  {\n    name: 'Audit Log & Stapled Ticket',\n    description:\n      'Get a full history of submissions and download the stapled notarization ticket for offline validation.',\n    icon: CheckCircle2,\n  },\n];\n\n// Pricing tiers data\nconst tiers = [\n  {\n    name: 'Indie',\n    id: 'tier-indie',\n    priceMonthly: '$25',\n    description: 'Perfect for solo devs and small teams notarizing apps.',\n    features: ['Unlimited Notarizations', '1 Concurrent Build', 'GitHub Action', 'Web UI Access'],\n  },\n  {\n    name: 'Studio',\n    id: 'tier-studio',\n    priceMonthly: '$99',\n    description: 'Designed for agencies and larger teams needing more capacity.',\n    features: [\n      'Unlimited Notarizations',\n      '5 Concurrent Builds',\n      'GitHub Action',\n      'Web UI Access',\n      'Priority Support',\n      'SSO/SAML Integration (Coming Soon)',\n    ],\n  },\n];\n\nexport default function NotaryCiPage() {\n  const accentColor = 'var(--accent-notary)';\n  const productIdentifier = 'notary';\n  const tableName = 'notary_leads';\n\n  return (\n    <>\n      {/* Hero Section */}\n      <div className=\"relative isolate overflow-hidden pt-14\">\n        {/* Background Gradient Blob */}\n        <div\n          className=\"absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80\"\n          aria-hidden=\"true\"\n        >\n          <div\n            className=\"relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#f472b6] to-[#a855f7] opacity-20 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]\" // Adjusted gradient colors for fuchsia/purple feel\n            style={{\n              clipPath:\n                'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',\n            }}\n          />\n        </div>\n\n        <Container className=\"py-24 sm:py-32 lg:flex lg:items-center lg:gap-x-10 lg:py-40\">\n          <div className=\"mx-auto max-w-2xl lg:mx-0 lg:flex-auto\">\n            <Badge colorVar={accentColor}>NOTARY CI</Badge>\n            <h1 className=\"mt-6 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n              Codesign & notarize mac builds in 60 seconds—straight from CI.\n            </h1>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Skip the Xcode maze. Upload once or drop our GitHub Action and ship notarized DMGs\n              automatically.\n            </p>\n            {/* Waitlist Form */}\n            <div className=\"mt-8\">\n              <WaitlistForm\n                productIdentifier={productIdentifier}\n                accentColorVar={accentColor}\n                tableName={tableName}\n              />\n            </div>\n          </div>\n          {/* Placeholder Illustration */}\n          <div className=\"mt-16 sm:mt-24 lg:mt-0 lg:flex-shrink-0 lg:flex-grow\">\n            <Laptop className=\"mx-auto w-[24rem] h-[24rem] max-w-full drop-shadow-xl\" />\n          </div>\n        </Container>\n      </div>\n\n      {/* Pain/Solution Section */}\n      <div className=\"py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:mx-0\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Stop wrestling with macOS signing & notarization\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Notary CI turns a complex, error-prone chore into a simple API call or CI step.\n            </p>\n          </div>\n          <div className=\"mt-16 flow-root\">\n            <div className=\"-my-8 divide-y divide-gray-100\">\n              {painPoints.map((point, index) => (\n                <div\n                  key={index}\n                  className={`py-8 ${index % 2 !== 0 ? 'bg-gray-50 -mx-6 px-6 lg:-mx-8 lg:px-8' : ''}`}\n                >\n                  <dl className=\"relative flex flex-wrap gap-x-3 gap-y-3 lg:gap-x-8\">\n                    <div className=\"flex-none lg:w-80\">\n                      <dt className=\"font-semibold text-gray-900\">The Pain:</dt>\n                      <dd className=\"mt-1 text-gray-600\">{point.pain}</dd>\n                    </div>\n                    <div className=\"flex-auto\">\n                      <dt className=\"font-semibold text-gray-900\">The Notary Fix:</dt>\n                      <dd className=\"mt-1 text-gray-600\">{point.fix}</dd>\n                    </div>\n                  </dl>\n                </div>\n              ))}\n            </div>\n          </div>\n        </Container>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"bg-white py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:mx-0\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Everything needed for automated notarization\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Whether you prefer a web UI or full CI/CD integration, Notary CI has you covered.\n            </p>\n          </div>\n          <div className=\"mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none\">\n            <dl className=\"grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3\">\n              {features.map((feature) => (\n                <div\n                  key={feature.name}\n                  className={cn(\n                    'flex flex-col rounded-2xl border border-t-2 bg-white p-8',\n                    'shadow-[0_0px_0px_0px_var(--tw-shadow-color)] transition-all duration-300 ease-in-out hover:-translate-y-1 hover:shadow-[0_6px_25px_-4px_var(--tw-shadow-color)]',\n                  )}\n                  style={\n                    {\n                      '--tw-shadow-color': accentColor,\n                      borderColor: accentColor,\n                    } as React.CSSProperties\n                  }\n                >\n                  <dt className=\"flex items-center gap-x-3 text-base font-semibold leading-7 text-gray-900\">\n                    <feature.icon\n                      className=\"h-5 w-5 flex-none text-[var(--accent-notary)]\"\n                      aria-hidden=\"true\"\n                    />\n                    {feature.name}\n                  </dt>\n                  <dd className=\"mt-4 flex flex-auto flex-col text-base leading-7 text-gray-600\">\n                    <p className=\"flex-auto\">{feature.description}</p>\n                    {feature.code && (\n                      <pre className=\"mt-4 overflow-x-auto rounded bg-gray-800 p-4 text-xs text-gray-300\">\n                        <code>{feature.code}</code>\n                      </pre>\n                    )}\n                  </dd>\n                </div>\n              ))}\n            </dl>\n          </div>\n        </Container>\n      </div>\n\n      {/* Pricing Section */}\n      <div className=\"bg-gray-50 py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl text-center\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Flat pricing, no surprises\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Pay per seat or build minute? No thanks. Simple, predictable pricing for everyone.\n            </p>\n          </div>\n          <div className=\"mt-16 grid grid-cols-1 gap-8 lg:grid-cols-2\">\n            {tiers.map((tier) => (\n              <Card\n                key={tier.id}\n                className=\"flex flex-col rounded-2xl border border-t-2\"\n                style={{ borderColor: accentColor }}\n              >\n                <CardHeader>\n                  <CardTitle className=\"text-lg font-semibold leading-8 text-gray-900\">\n                    {tier.name}\n                  </CardTitle>\n                  <CardDescription className=\"text-sm leading-6 text-gray-600\">\n                    {tier.description}\n                  </CardDescription>\n                  <div className=\"mt-4 flex items-baseline gap-x-2\">\n                    <span className=\"text-4xl font-bold tracking-tight text-gray-900\">\n                      {tier.priceMonthly}\n                    </span>\n                    <span className=\"text-sm font-semibold leading-6 tracking-wide text-gray-600\">\n                      /month\n                    </span>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"flex-1\">\n                  <ul role=\"list\" className=\"mt-8 space-y-3 text-sm leading-6 text-gray-600\">\n                    {tier.features.map((feature) => (\n                      <li key={feature} className=\"flex gap-x-3\">\n                        <CheckCircle2\n                          className=\"h-6 w-5 flex-none text-[var(--accent-notary)]\"\n                          aria-hidden=\"true\"\n                        />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          <p className=\"mt-8 text-center text-sm text-gray-500\">\n            Early-access pricing—subject to change after launch.\n          </p>\n        </Container>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/opengraph-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/rss.xml/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/sign-up/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2217,2220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2217,2220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createClient } from '@/utils/supabase/client';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function SignupPage() {\n  const router = useRouter();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState(''); // For success messages\n  const supabase = createClient();\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n\n    if (password !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n\n    // Basic password complexity check (example: min 8 chars)\n    if (password.length < 8) {\n      setError('Password must be at least 8 characters long.');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Sign up the user with Supabase Auth\n      const { error: signUpError } = await supabase.auth.signUp({\n        email,\n        password,\n        // Optional: Redirect user after email confirmation\n        // options: {\n        //   emailRedirectTo: `${location.origin}/auth/callback`,\n        // },\n      });\n\n      if (signUpError) {\n        throw signUpError;\n      }\n\n      // Show success message - user needs to confirm email\n      setMessage('Check your email to confirm your account!');\n      // Optionally clear form or redirect after a delay\n      // setEmail('');\n      // setPassword('');\n      // setConfirmPassword('');\n      // router.push('/login?message=confirm_email'); // Redirect to login with message\n\n      // **Deferred for Beta:** Stripe Connect initiation logic would go here.\n      // For now, we just create the user account.\n    } catch (error: any) {\n      console.error('Signup error:', error);\n      setError(error.message || 'An error occurred during sign up.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-slate-900 p-4\">\n      <Card className=\"w-full max-w-md bg-slate-800 text-white\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold\">Sign Up for DOCK108 Beta</CardTitle>\n          <CardDescription className=\"text-slate-400\">\n            Create your account to get started with the free beta.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {message ? (\n            <div className=\"text-center text-green-400 p-4 border border-green-600 bg-green-900/30 rounded-md\">\n              {message}\n            </div>\n          ) : (\n            <form onSubmit={handleSignup} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"email@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  className=\"bg-slate-700 border-slate-600\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"********\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  minLength={8}\n                  className=\"bg-slate-700 border-slate-600\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  placeholder=\"********\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  minLength={8}\n                  className=\"bg-slate-700 border-slate-600\"\n                />\n              </div>\n              {error && <div className=\"text-red-500 text-sm\">{error}</div>}\n              <Button type=\"submit\" disabled={loading} className=\"w-full\">\n                {loading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating Account...\n                  </>\n                ) : (\n                  'Sign Up'\n                )}\n              </Button>\n            </form>\n          )}\n        </CardContent>\n        {!message && (\n          <CardFooter className=\"flex flex-col space-y-2\">\n            <div className=\"text-center text-sm text-slate-400\">\n              Already have an account?\n              <Link href=\"/login\" className=\"ml-1 font-medium text-blue-400 hover:underline\">\n                Sign In\n              </Link>\n            </div>\n          </CardFooter>\n        )}\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/alerts/[id]/AlertFeedback.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userVote' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2025,2028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2025,2028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3703,3706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3703,3706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { toast } from 'react-hot-toast';\nimport { Loader2 } from 'lucide-react';\n// import { logger } from '@/lib/logger'; // Assuming logger exists\n\ninterface AlertFeedbackProps {\n  alertId: string | number; // Alert ID can be number or UUID string\n}\n\ninterface FeedbackCounts {\n  false_positive: number;\n  legit: number;\n}\n\nexport function AlertFeedback({ alertId }: AlertFeedbackProps) {\n  const [feedbackState, setFeedbackState] = useState<'idle' | 'submitting' | 'submitted'>('idle');\n  const [selectedVerdict, setSelectedVerdict] = useState<'false_positive' | 'legit' | null>(null);\n  const [comment, setComment] = useState('');\n  const [showComment, setShowComment] = useState(false);\n  const [feedbackCounts, setFeedbackCounts] = useState<FeedbackCounts>({\n    false_positive: 0,\n    legit: 0,\n  });\n  const [isLoadingCounts, setIsLoadingCounts] = useState(true);\n  const [userVote, setUserVote] = useState<'false_positive' | 'legit' | null>(null); // Track the logged-in user's specific vote\n\n  // Fetch initial counts and user's vote (if any)\n  const fetchFeedbackData = useCallback(async () => {\n    setIsLoadingCounts(true);\n    try {\n      // Fetch aggregate counts\n      const countsRes = await fetch(`/api/guardian/alerts/feedback?alertId=${alertId}`);\n      if (!countsRes.ok) throw new Error('Failed to fetch feedback counts');\n      const countsData: FeedbackCounts = await countsRes.json();\n      setFeedbackCounts(countsData);\n\n      // TODO: Fetch the current user's specific vote if needed to pre-fill state\n      // This might require another API endpoint or modifying the GET response\n      // For now, we rely on local state after submission.\n\n      // logger.info('Fetched feedback counts', { alertId, counts: countsData });\n      console.log('Fetched feedback counts', { alertId, counts: countsData });\n    } catch (error: any) {\n      // logger.error('Error fetching feedback data', { alertId, error: error.message });\n      console.error('Error fetching feedback data', { alertId, error: error.message });\n      toast.error('Could not load feedback counts.');\n    } finally {\n      setIsLoadingCounts(false);\n    }\n  }, [alertId]);\n\n  useEffect(() => {\n    fetchFeedbackData();\n  }, [fetchFeedbackData]);\n\n  const handleSubmit = async (verdict: 'false_positive' | 'legit') => {\n    setFeedbackState('submitting');\n    setSelectedVerdict(verdict);\n    let feedbackComment = verdict === 'false_positive' ? comment : undefined;\n\n    // logger.info('Submitting feedback', { alertId, verdict, hasComment: !!feedbackComment });\n    console.log('Submitting feedback', { alertId, verdict, hasComment: !!feedbackComment });\n\n    try {\n      const response = await fetch('/api/guardian/alerts/feedback', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ alertId, verdict, comment: feedbackComment }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to submit feedback');\n      }\n\n      // logger.info('Feedback submitted successfully', { alertId, verdict });\n      console.log('Feedback submitted successfully', { alertId, verdict });\n      toast.success('Thank you for your feedback!');\n      setFeedbackState('submitted');\n      setUserVote(verdict); // Update user's current vote locally\n      // Refresh counts after submission\n      fetchFeedbackData();\n      setShowComment(false); // Hide comment box after successful submission\n    } catch (error: any) {\n      // logger.error('Error submitting feedback', { alertId, verdict, error: error.message });\n      console.error('Error submitting feedback', { alertId, verdict, error: error.message });\n      toast.error(`Failed to submit feedback: ${error.message}`);\n      setFeedbackState('idle'); // Reset state on error\n      setSelectedVerdict(null);\n    }\n  };\n\n  // Handle clicking a verdict button\n  const handleVoteClick = (verdict: 'false_positive' | 'legit') => {\n    if (feedbackState === 'submitting') return;\n\n    // If clicking the same verdict again (effectively an undo/change mind before submit)\n    if (selectedVerdict === verdict && feedbackState !== 'submitted') {\n      setSelectedVerdict(null);\n      setShowComment(false);\n      setComment('');\n      return;\n    }\n\n    // If changing vote or making initial vote\n    setSelectedVerdict(verdict);\n    if (verdict === 'false_positive') {\n      setShowComment(true);\n    } else {\n      setShowComment(false);\n      setComment(''); // Clear comment if switching to legit\n      // Submit immediately if choosing legit\n      handleSubmit(verdict);\n    }\n  };\n\n  // Handle submitting the comment for false positive\n  const handleFalsePositiveSubmit = () => {\n    if (selectedVerdict === 'false_positive') {\n      handleSubmit('false_positive');\n    }\n  };\n\n  // Allow user to change their mind after submitting\n  const handleUndo = () => {\n    setFeedbackState('idle');\n    setSelectedVerdict(null);\n    setUserVote(null); // Clear local memory of user vote\n    setShowComment(false);\n    setComment('');\n    // Note: This doesn't delete the feedback from the DB, just resets UI state\n    // To truly undo, a DELETE API call would be needed.\n    // Current behavior: allows user to re-vote which updates their previous vote.\n  };\n\n  return (\n    <div className=\"mt-6\">\n      <h3 className=\"text-md font-semibold text-slate-700 mb-3\">Was this alert correct?</h3>\n\n      {feedbackState === 'submitted' ? (\n        <div className=\"flex items-center space-x-4 p-4 bg-green-50 border border-green-200 rounded-md\">\n          <span className=\"text-green-700\">Thank you for your feedback!</span>\n          <Button variant=\"link\" onClick={handleUndo} className=\"text-sm p-0 h-auto\">\n            (Change my vote)\n          </Button>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant={selectedVerdict === 'false_positive' ? 'destructive' : 'ghost'}\n              onClick={() => handleVoteClick('false_positive')}\n              disabled={feedbackState === 'submitting'}\n              size=\"sm\"\n            >\n              {feedbackState === 'submitting' && selectedVerdict === 'false_positive' ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                '🚫'\n              )}\n              False Positive\n            </Button>\n            <Button\n              variant={selectedVerdict === 'legit' ? 'success' : 'ghost'} // Need a 'success' variant or use default\n              onClick={() => handleVoteClick('legit')}\n              disabled={feedbackState === 'submitting'}\n              size=\"sm\"\n            >\n              {feedbackState === 'submitting' && selectedVerdict === 'legit' ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                '✅'\n              )}\n              Legit\n            </Button>\n          </div>\n\n          {showComment && selectedVerdict === 'false_positive' && (\n            <div className=\"space-y-2\">\n              <Textarea\n                placeholder=\"Optional: Why was this a false positive? (e.g., known customer activity)\"\n                value={comment}\n                onChange={(e) => setComment(e.target.value)}\n                rows={3}\n                disabled={feedbackState === 'submitting'}\n              />\n              <Button\n                onClick={handleFalsePositiveSubmit}\n                disabled={feedbackState === 'submitting'}\n                size=\"sm\"\n              >\n                {feedbackState === 'submitting' ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : null}\n                Submit False Positive Feedback\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Display Counts */}\n      <div className=\"mt-4 text-sm text-slate-500\">\n        {isLoadingCounts ? (\n          <span className=\"flex items-center\">\n            <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" /> Loading feedback counts...\n          </span>\n        ) : (\n          <span>\n            Current Feedback: {feedbackCounts.false_positive} False Positive /{' '}\n            {feedbackCounts.legit} Legit\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/alerts/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[487,490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[487,490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2569,2572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2569,2572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { notFound } from 'next/navigation';\nimport { Database } from '@/types/supabase';\nimport { Container } from '@/components/Container';\nimport { AlertFeedback } from './AlertFeedback'; // Client component for feedback\nimport NotificationStatus from '@/components/alerts/NotificationStatus'; // Import the new component\n\n// Fetch data server-side\nasync function getAlertDetails(\n  supabase: any,\n  alertId: string,\n  userId: string,\n): Promise<Database['public']['Tables']['alerts']['Row'] | null> {\n  // TODO: Add RLS check or ensure this query respects user's access to the alert's account\n  const { data: alert, error } = await supabase\n    .from('alerts')\n    .select('*, connected_accounts(business_name)') // Fetch related account name\n    .eq('id', alertId)\n    .maybeSingle();\n\n  if (error) {\n    console.error('Error fetching alert details:', error);\n    return null;\n  }\n  // Basic check if user should see this alert (improve with proper RLS or explicit check)\n  // This is a placeholder - ideally RLS enforces this\n  // const { data: userAccounts } = await supabase.from('connected_accounts').select('stripe_account_id').eq('user_id', userId);\n  // if (!userAccounts?.some(acc => acc.stripe_account_id === alert?.stripe_account_id)) {\n  //   return null;\n  // }\n\n  return alert;\n}\n\nexport default async function AlertDetailPage({ params }: { params: { id: string } }) {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get: (name: string) => cookieStore.get(name)?.value,\n      },\n    },\n  );\n\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n  if (!session) {\n    // Handle unauthenticated access if needed, e.g., redirect to login\n    // For now, assume AuthGuard handles this, but fetching requires user ID\n    notFound(); // Or redirect\n  }\n\n  const alert = await getAlertDetails(supabase, params.id, session.user.id);\n\n  if (!alert) {\n    notFound();\n  }\n\n  // Check if the user is an admin (example assumes role is in user_metadata)\n  // Adjust based on where the role is actually stored (e.g., app_metadata or a separate table)\n  const isAdmin = session?.user?.user_metadata?.role === 'admin';\n\n  // Format dates, etc.\n  const createdAtFormatted = alert.created_at ? new Date(alert.created_at).toLocaleString() : 'N/A';\n  const accountName =\n    (alert.connected_accounts as any)?.business_name ?? alert.stripe_account_id ?? 'N/A';\n\n  return (\n    <Container className=\"py-10\">\n      <h1 className=\"text-3xl font-bold tracking-tight mb-2\">Alert Details</h1>\n      <p className=\"text-sm text-slate-500 mb-6\">Review the details of this security alert.</p>\n\n      <div className=\"bg-white rounded-lg shadow p-6 space-y-4\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-slate-800\">{alert.alert_type}</h2>\n          <p className=\"text-sm text-slate-600\">\n            Severity:{' '}\n            <span\n              className={`font-medium ${alert.severity === 'high' ? 'text-red-600' : alert.severity === 'medium' ? 'text-yellow-600' : 'text-gray-600'}`}\n            >\n              {alert.severity}\n            </span>\n          </p>\n        </div>\n        <p className=\"text-slate-700\">{alert.message}</p>\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <p>\n            <strong className=\"text-slate-600\">Account:</strong> {accountName}\n          </p>\n          <p>\n            <strong className=\"text-slate-600\">Account ID:</strong> {alert.stripe_account_id}\n          </p>\n          <p>\n            <strong className=\"text-slate-600\">Created:</strong> {createdAtFormatted}\n          </p>\n          <p>\n            <strong className=\"text-slate-600\">Payout ID:</strong> {alert.stripe_payout_id || 'N/A'}\n          </p>\n          <p>\n            <strong className=\"text-slate-600\">Resolved:</strong> {alert.resolved ? 'Yes' : 'No'}\n          </p>\n          <p>\n            <strong className=\"text-slate-600\">Event ID:</strong> {alert.event_id || 'N/A'}\n          </p>\n        </div>\n\n        {/* --- Notification Status Component --- */}\n        <NotificationStatus\n          deliveryStatus={alert.delivery_status as Record<string, string> | null}\n          isAdmin={isAdmin}\n        />\n\n        <hr className=\"my-6\" />\n\n        {/* --- Feedback Component --- */}\n        <AlertFeedback alertId={alert.id} />\n      </div>\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/alerts/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/alerts/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'alertCapFor' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StripeAccountSelect' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Database' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertChannels' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StripeEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":78,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2448,2451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2448,2451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":80,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'selectedAccountId'. Either include it or remove the dependency array.","line":202,"column":6,"nodeType":"ArrayExpression","endLine":202,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [selectedAccountId, supabase]","fix":{"range":[7434,7444],"text":"[selectedAccountId, supabase]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'monthlyAlertCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":288,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":288,"endColumn":32},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":680,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[25743,26010],"text":"\n                    Stops Stripe from automatically sending funds to your bank. Guardian may turn\n                    this off automatically when fraud is suspected. You can resume payouts once\n                    you&apos;ve reviewed the transactions.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[25743,26010],"text":"\n                    Stops Stripe from automatically sending funds to your bank. Guardian may turn\n                    this off automatically when fraud is suspected. You can resume payouts once\n                    you&lsquo;ve reviewed the transactions.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[25743,26010],"text":"\n                    Stops Stripe from automatically sending funds to your bank. Guardian may turn\n                    this off automatically when fraud is suspected. You can resume payouts once\n                    you&#39;ve reviewed the transactions.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[25743,26010],"text":"\n                    Stops Stripe from automatically sending funds to your bank. Guardian may turn\n                    this off automatically when fraud is suspected. You can resume payouts once\n                    you&rsquo;ve reviewed the transactions.\n                  "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'searchParams'. Either include it or remove the dependency array.","line":144,"column":6,"nodeType":"ArrayExpression","endLine":144,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [searchParams]","fix":{"range":[5279,5281],"text":"[searchParams]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useEffect, useState, Suspense, useMemo, useTransition } from 'react';\nimport { format, startOfMonth, formatRelative } from 'date-fns';\nimport { Loader2, Info } from 'lucide-react';\nimport toast from 'react-hot-toast';\nimport { createClient } from '@/utils/supabase/client';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { Switch } from '@/components/ui/switch';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport {\n  resumePayoutsServerAction,\n  pausePayoutsServerAction,\n} from 'app/(auth)/settings/connected-accounts/actions';\nimport { alertCapFor } from '@/lib/guardian/plan';\nimport { UpgradeBanner } from '@/app/components/UpgradeBanner';\n\nimport { Container } from '@/components/Container';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport StripeAccountSelect from '@/app/components/StripeAccountSelect';\nimport MetricCard from '@/app/components/MetricCard';\nimport { Database } from '@/types/supabase';\n\n// Type for connected account data needed\ntype ConnectedAccount = {\n  stripe_account_id: string;\n  business_name: string | null;\n  payouts_paused: boolean;\n  paused_by: string | null;\n  paused_reason: string | null;\n};\n\n// Alert type definition\ntype Alert = {\n  id: number;\n  alert_type: string;\n  severity: 'low' | 'medium' | 'high';\n  message: string;\n  stripe_payout_id: string | null;\n  stripe_account_id: string;\n  resolved: boolean;\n  created_at: string;\n  risk_score: number | null;\n};\n\n// Alert channels type definition\ntype AlertChannels = {\n  id: number;\n  stripe_account_id: string;\n  slack_webhook_url: string | null;\n  email_to: string | null;\n  auto_pause: boolean;\n};\n\n// Settings type definition - Define locally if import commented out\ntype Settings = {\n  id: string;\n  user_id: string;\n  tier: string | null;\n  free_tier_alert_limit?: number;\n  pro_tier_alert_limit?: number;\n  enterprise_tier_alert_limit?: number;\n  slack_notifications_enabled?: boolean;\n  email_notifications_enabled?: boolean;\n  // Add other relevant settings fields as needed\n};\n\n// StripeEvent might be needed? Define a basic structure or remove usage\ntype StripeEvent = Record<string, any>; // Placeholder\n// Define AlertStatus locally if needed\ntype AlertStatus = 'open' | 'resolved' | 'muted'; // Example\n\n// Wrap the core logic in a component to use Suspense\nfunction AlertsPageContent() {\n  const [initialLoading, setInitialLoading] = useState(true); // Loading accounts\n  const [loadingAlerts, setLoadingAlerts] = useState(false); // Loading data for selected account\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  const [allAccounts, setAllAccounts] = useState<ConnectedAccount[]>([]);\n  const [selectedAccountId, setSelectedAccountId] = useState<string | null>(null);\n  const [autoPause, setAutoPause] = useState(false);\n  const [updatingAutoPause, setUpdatingAutoPause] = useState(false);\n  // Add new state for settings and monthly alert count\n  const [settings, setSettings] = useState<Settings | null>(null);\n  const [monthlyAlertCount, setMonthlyAlertCount] = useState(0);\n  const [alertMetrics, setAlertMetrics] = useState<{\n    monthlyCount: number;\n    openCount: number;\n    lastProcessed: string | null;\n  }>({\n    monthlyCount: 0,\n    openCount: 0,\n    lastProcessed: null,\n  });\n\n  // Add state for selected account's payout status\n  const [isTogglingPayouts, startToggleTransition] = useTransition();\n\n  const supabase = createClient();\n  const searchParams = useSearchParams();\n\n  // Memoize the currently selected account's full data\n  const selectedAccountData = useMemo(() => {\n    return allAccounts.find((acc) => acc.stripe_account_id === selectedAccountId) || null;\n  }, [allAccounts, selectedAccountId]);\n\n  // Function to determine alert cap based on tier\n  const alertCapFor = (settings: Settings | null): number => {\n    if (!settings) return 50; // Default to free tier limit\n\n    if (settings.tier === 'pro') {\n      return settings.pro_tier_alert_limit || 1000; // Default pro tier limit\n    } else if (settings.tier === 'enterprise') {\n      return settings.enterprise_tier_alert_limit || 10000; // Default enterprise tier limit\n    } else {\n      // Free tier\n      return settings.free_tier_alert_limit || 50; // Default free tier limit\n    }\n  };\n\n  // Calculate whether to show upgrade banner\n  const showUpgradeBanner = useMemo(() => {\n    const alertCap = alertCapFor(settings);\n    return settings?.tier === 'free' && monthlyAlertCount >= alertCap;\n  }, [settings, monthlyAlertCount]);\n\n  // Show toast on first connect (runs only once)\n  useEffect(() => {\n    const firstConnect = searchParams.get('first');\n    if (firstConnect === '1') {\n      toast.success('✅ Account connected — Guardian is now monitoring payouts.');\n      // Use window.history.replaceState to remove query param without triggering full effect chain\n      window.history.replaceState(null, '', '/stripe-guardian/alerts');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty dependency array ensures it runs only on mount\n\n  // Fetch user's connected accounts on mount\n  useEffect(() => {\n    let isMounted = true;\n    async function fetchUserAccounts() {\n      console.log('Fetching user accounts and payout status...');\n      setInitialLoading(true);\n      try {\n        const {\n          data: { session },\n        } = await supabase.auth.getSession();\n        if (!session || !isMounted) return;\n        console.log('Session obtained, fetching accounts for user:', session.user.id);\n\n        // Fetch ALL connected accounts for the user, including business_name AND payout status\n        const { data: accountsData, error: accountsError } = await supabase\n          .from('connected_accounts')\n          .select('stripe_account_id, business_name, payouts_paused, paused_by, paused_reason') // Select new fields\n          .eq('user_id', session.user.id);\n\n        if (accountsError) throw accountsError;\n        console.log('Fetched accounts data:', accountsData);\n\n        if (isMounted) {\n          if (accountsData && accountsData.length > 0) {\n            setAllAccounts(accountsData);\n            // Set the first account as selected initially\n            if (!selectedAccountId) {\n              console.log('Setting initial selected account:', accountsData[0].stripe_account_id);\n              setSelectedAccountId(accountsData[0].stripe_account_id);\n            }\n          } else {\n            console.log('No connected accounts found for user.');\n            setAllAccounts([]);\n            setSelectedAccountId(null);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching connected accounts:', error);\n        toast.error('Failed to load connected accounts');\n        if (isMounted) {\n          setAllAccounts([]);\n          setSelectedAccountId(null);\n        }\n      } finally {\n        if (isMounted) {\n          console.log('Finished initial account loading.');\n          setInitialLoading(false);\n        }\n      }\n    }\n\n    fetchUserAccounts();\n    return () => {\n      console.log('Unmounting account fetch effect');\n      isMounted = false;\n    }; // Cleanup\n  }, [supabase]); // Only depends on supabase client\n\n  // Fetch alerts and user settings when selectedAccountId changes\n  useEffect(() => {\n    if (!selectedAccountId) {\n      console.log('No account selected, clearing data.');\n      setAlerts([]); // Clear alerts if no account is selected\n      setAutoPause(false);\n      setMonthlyAlertCount(0); // Reset alert count\n      return;\n    }\n\n    let isMounted = true;\n    async function fetchAccountData() {\n      console.log(`Fetching data for selected account: ${selectedAccountId}`);\n      setLoadingAlerts(true);\n      setAlerts([]); // Clear previous account's alerts\n      setAutoPause(false); // Reset autopause state\n      setMonthlyAlertCount(0); // Reset alert count\n\n      try {\n        // Get current user ID first\n        const {\n          data: { session },\n          error: sessionError,\n        } = await supabase.auth.getSession();\n        if (sessionError || !session) {\n          throw new Error(sessionError?.message || 'User not authenticated');\n        }\n        const userId = session.user.id;\n\n        // Fetch USER settings, check plan tier\n        let { data: settingsData, error: settingsError } = await supabase\n          .from('settings')\n          .select('*')\n          .eq('user_id', userId) // Use user_id\n          .maybeSingle();\n\n        // Lazy-create user settings if they don't exist\n        if (!settingsData && settingsError && settingsError.code === 'PGRST116') {\n          // Row not found\n          console.log(`No settings found for user ${userId}, creating defaults.`);\n          const { data: newSettings, error: insertError } = await supabase\n            .from('settings')\n            .insert({\n              user_id: userId,\n              // Add reasonable defaults for other settings columns here\n              slack_notifications_enabled: false,\n              email_notifications_enabled: true,\n              // ... other defaults\n            })\n            .select()\n            .single();\n\n          if (insertError) {\n            console.error('Error creating default user settings:', insertError);\n            // Decide how to handle - maybe proceed without settings or show error\n            settingsError = insertError; // Use the insert error\n          } else {\n            settingsData = newSettings; // Use the newly created settings\n            settingsError = null; // Clear the row not found error\n          }\n        }\n\n        if (settingsError) throw settingsError;\n\n        console.log('Fetched user settings:', settingsData);\n        if (isMounted && settingsData) {\n          setSettings(settingsData);\n        }\n\n        // Get monthly alert count for the current month\n        const now = new Date();\n        const firstDayOfMonth = startOfMonth(now);\n\n        const { data: monthlyAlerts, error: monthlyAlertsError } = await supabase\n          .from('alerts')\n          .select('id')\n          .eq('stripe_account_id', selectedAccountId)\n          .gte('created_at', firstDayOfMonth.toISOString())\n          .lte('created_at', now.toISOString());\n\n        if (monthlyAlertsError) {\n          console.error('Error fetching monthly alerts:', monthlyAlertsError);\n        }\n\n        const monthlyAlertCount = monthlyAlerts?.length || 0;\n\n        // Fetch alert channels for the selected account\n        console.log(`Fetching channels for ${selectedAccountId}...`);\n        const { data: channels, error: channelError } = await supabase\n          .from('alert_channels')\n          .select('auto_pause')\n          .eq('stripe_account_id', selectedAccountId)\n          .maybeSingle();\n\n        if (channelError) throw channelError;\n        console.log(`Fetched channels for ${selectedAccountId}:`, channels);\n        if (isMounted && channels) {\n          setAutoPause(channels.auto_pause || false);\n        }\n\n        // Fetch alerts for the selected account\n        console.log(`Fetching alerts for ${selectedAccountId}...`);\n        const { data: alertsData, error: alertsError } = await supabase\n          .from('alerts')\n          .select('*, risk_score')\n          .eq('stripe_account_id', selectedAccountId)\n          .order('created_at', { ascending: false });\n\n        if (alertsError) throw alertsError;\n        console.log(`Fetched alerts for ${selectedAccountId}:`, alertsData?.length);\n        if (isMounted && alertsData) {\n          setAlerts(alertsData);\n        }\n\n        // Fetch account info and settings\n        async function fetchAccountInfo() {\n          if (!selectedAccountId) return;\n\n          try {\n            // Fetch settings\n            const { data: settingsData, error: settingsError } = await supabase\n              .from('settings')\n              .select('*')\n              .eq('account_id', selectedAccountId)\n              .single();\n\n            if (settingsError && settingsError.code !== 'PGRST116') {\n              console.error('Error fetching settings:', settingsError);\n            }\n\n            setSettings(settingsData || { tier: 'free', free_tier_alert_limit: 50 });\n\n            // Calculate first day of current month\n            const firstDayOfMonth = startOfMonth(new Date());\n\n            // Fetch monthly alert count\n            const { count: monthlyCount, error: monthlyCountError } = await supabase\n              .from('alerts')\n              .select('*', { count: 'exact', head: true })\n              .eq('account_id', selectedAccountId)\n              .gte('created_at', firstDayOfMonth.toISOString());\n\n            if (monthlyCountError) throw monthlyCountError;\n\n            // Fetch open alert count\n            const { count: openCount, error: openCountError } = await supabase\n              .from('alerts')\n              .select('*', { count: 'exact', head: true })\n              .eq('account_id', selectedAccountId)\n              .eq('status', 'open');\n\n            if (openCountError) throw openCountError;\n\n            // Fetch last processed event timestamp\n            const { data: lastEvent, error: lastEventError } = await supabase\n              .from('processed_events')\n              .select('created_at')\n              .eq('account_id', selectedAccountId)\n              .order('created_at', { ascending: false })\n              .limit(1)\n              .single();\n\n            if (lastEventError && lastEventError.code !== 'PGRST116') {\n              console.error('Error fetching last event:', lastEventError);\n            }\n\n            setAlertMetrics({\n              monthlyCount: monthlyCount || 0,\n              openCount: openCount || 0,\n              lastProcessed: lastEvent?.created_at || null,\n            });\n\n            setMonthlyAlertCount(monthlyCount || 0);\n          } catch (error) {\n            console.error('Error fetching account info:', error);\n          }\n        }\n\n        fetchAccountInfo();\n      } catch (error) {\n        console.error('Error fetching data for account:', selectedAccountId, error);\n        toast.error(`Failed to load data for account ${selectedAccountId}`);\n      } finally {\n        if (isMounted) {\n          console.log(`Finished fetching data for ${selectedAccountId}`);\n          setLoadingAlerts(false);\n        }\n      }\n    }\n\n    fetchAccountData();\n    return () => {\n      console.log(`Unmounting data fetch effect for ${selectedAccountId}`);\n      isMounted = false;\n    }; // Cleanup\n  }, [supabase, selectedAccountId]); // Added selectedAccountId\n\n  // Set up real-time subscription based on selectedAccountId\n  useEffect(() => {\n    if (!selectedAccountId) {\n      console.log('No account selected, skipping realtime subscription.');\n      return;\n    }\n\n    const channelId = `alerts-changes-${selectedAccountId}`;\n    console.log(`Setting up realtime channel: ${channelId}`);\n    const channel = supabase\n      .channel(channelId)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'alerts',\n          filter: `stripe_account_id=eq.${selectedAccountId}`, // Filter by selected account\n        },\n        (payload) => {\n          console.log(`Realtime payload received on ${channelId}:`, payload);\n          if (payload.eventType === 'INSERT') {\n            setAlerts((prev) => [payload.new as Alert, ...prev]);\n            toast.success('New alert received!');\n          } else if (payload.eventType === 'UPDATE') {\n            setAlerts((prev) =>\n              prev.map((alert) => (alert.id === payload.new.id ? (payload.new as Alert) : alert)),\n            );\n          } else if (payload.eventType === 'DELETE') {\n            setAlerts((prev) => prev.filter((alert) => alert.id !== payload.old.id));\n          }\n        },\n      )\n      .subscribe((status, err) => {\n        if (status === 'SUBSCRIBED') {\n          console.log(`Realtime subscribed on channel: ${channelId}`);\n        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {\n          console.error(`Realtime error on ${channelId}:`, status, err);\n          toast.error('Realtime connection error. Refresh might be needed.');\n        }\n      });\n\n    // Cleanup function to remove the channel when component unmounts or selectedAccountId changes\n    return () => {\n      console.log(`Removing realtime channel: ${channelId}`);\n      supabase.removeChannel(channel).catch((err) => console.error('Error removing channel:', err));\n    };\n  }, [selectedAccountId, supabase]);\n\n  // Toggle auto-pause setting for the selected account\n  const toggleAutoPause = async (value: boolean) => {\n    if (!selectedAccountId) return;\n\n    setUpdatingAutoPause(true);\n    try {\n      const { error } = await supabase\n        .from('alert_channels')\n        .update({ auto_pause: value })\n        .eq('stripe_account_id', selectedAccountId);\n\n      if (error) throw error;\n\n      setAutoPause(value);\n      toast.success(`Auto-pause ${value ? 'enabled' : 'disabled'} for ${selectedAccountId}`);\n    } catch (error) {\n      console.error('Error updating auto-pause:', error);\n      toast.error('Failed to update auto-pause setting');\n    } finally {\n      setUpdatingAutoPause(false);\n    }\n  };\n\n  // --- Add handler for Payouts Toggle ---\n  const handleTogglePayouts = () => {\n    if (!selectedAccountData) return;\n\n    const account = selectedAccountData;\n    startToggleTransition(async () => {\n      const action = account.payouts_paused ? resumePayoutsServerAction : pausePayoutsServerAction;\n      const optimisticUpdate = !account.payouts_paused;\n\n      // Optimistic UI Update - Modify the allAccounts state directly\n      setAllAccounts((prev) =>\n        prev.map((acc) =>\n          acc.stripe_account_id === account.stripe_account_id\n            ? { ...acc, payouts_paused: optimisticUpdate }\n            : acc,\n        ),\n      );\n\n      try {\n        await action(account.stripe_account_id);\n        toast.success(`Payouts ${optimisticUpdate ? 'paused' : 'resumed'} successfully.`);\n        // Re-fetching/revalidation should handle the final state\n      } catch (error) {\n        // Rollback optimistic update on error\n        setAllAccounts((prev) =>\n          prev.map((acc) =>\n            acc.stripe_account_id === account.stripe_account_id\n              ? { ...acc, payouts_paused: account.payouts_paused } // Revert to original state\n              : acc,\n          ),\n        );\n        toast.error(error instanceof Error ? error.message : 'Failed to update payout status.');\n      }\n      // No finally block needed to reset loading state as useTransition handles it\n    });\n  };\n\n  // Mark an alert as resolved (API call likely needs account context if not implicit)\n  const markResolved = async (id: number) => {\n    // If the API endpoint `/api/alerts/${id}` doesn't implicitly know the account,\n    // you might need to pass selectedAccountId in the body or as a query param.\n    // For now, assuming the API can handle it based on user session + alert ID.\n    try {\n      setAlerts((prev) =>\n        prev.map((alert) => (alert.id === id ? { ...alert, resolved: true } : alert)),\n      );\n      const response = await fetch(`/api/alerts/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ resolved: true }),\n      });\n      if (!response.ok) throw new Error('Failed to update alert');\n      toast.success('Alert marked as resolved');\n    } catch (error) {\n      console.error('Error resolving alert:', error);\n      toast.error('Failed to resolve alert');\n      setAlerts((prev) =>\n        prev.map((alert) => (alert.id === id ? { ...alert, resolved: false } : alert)),\n      );\n    }\n  };\n\n  // --- Helper to get tooltip content ---\n  const getPauseTooltipContent = (account: ConnectedAccount | null): string => {\n    if (!account) return '';\n    if (account.payouts_paused) {\n      let reason = `Paused by ${account.paused_by || 'unknown'}`;\n      if (account.paused_reason) reason += `: ${account.paused_reason.replace(/_/g, ' ')}`;\n      return reason;\n    } else {\n      return 'Automatic payouts active.';\n    }\n  };\n\n  // Loading state for initial account fetch\n  if (initialLoading) {\n    return (\n      <Container className=\"py-10\">\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-slate-500\" />{' '}\n          <span className=\"ml-2\">Loading accounts...</span>\n        </div>\n      </Container>\n    );\n  }\n\n  // State when user has no connected accounts at all\n  if (allAccounts.length === 0) {\n    return (\n      <Container className=\"py-10\">\n        <div className=\"bg-white rounded-lg shadow p-8 text-center\">\n          <h3 className=\"font-medium text-lg mb-2\">No account connected</h3>\n          <p className=\"text-slate-500 mb-6\">\n            Connect your Stripe account to start monitoring payouts and receive alerts.\n          </p>\n          <Button asChild>\n            <a href=\"/stripe-guardian/onboard\">Connect Stripe Account</a>\n          </Button>\n        </div>\n      </Container>\n    );\n  }\n\n  // Filter alerts for the selected account (safe check)\n  const filteredAlerts = selectedAccountId\n    ? alerts.filter((alert) => alert.stripe_account_id === selectedAccountId)\n    : [];\n  const activeAlerts = filteredAlerts.filter((alert) => !alert.resolved);\n  const resolvedAlerts = filteredAlerts.filter((alert) => alert.resolved);\n\n  return (\n    <Container className=\"py-10\">\n      <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between mb-8 gap-4\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Payout Guardian Alerts</h1>\n\n        {/* Account Selector Dropdown - only show if multiple accounts exist */}\n        {allAccounts.length > 1 && (\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-sm font-medium text-slate-700\">Account:</span>\n            <Select value={selectedAccountId ?? ''} onValueChange={setSelectedAccountId}>\n              <SelectTrigger className=\"w-auto min-w-[250px]\">\n                {' '}\n                {/* Adjust width */}\n                <SelectValue placeholder=\"Select account...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {allAccounts.map((acc) => (\n                  <SelectItem key={acc.stripe_account_id} value={acc.stripe_account_id}>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{acc.business_name ?? 'Unnamed Account'}</span>\n                      <span className=\"text-xs text-slate-500 font-mono\">\n                        {acc.stripe_account_id}\n                      </span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n        {/* Display selected account ID and name if only one account */}\n        {allAccounts.length === 1 && selectedAccountId && (\n          <div className=\"flex items-center space-x-2 p-2 bg-slate-100 rounded-md\">\n            <span className=\"text-sm font-medium text-slate-700\">Account:</span>\n            <div className=\"flex flex-col items-start\">\n              <span className=\"text-sm font-medium text-slate-800\">\n                {allAccounts[0].business_name ?? 'Unnamed Account'}\n              </span>\n              <span className=\"text-xs text-slate-500 font-mono\">{selectedAccountId}</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Display alert metrics */}\n      <div className=\"mb-8 grid gap-6 md:grid-cols-3\">\n        <MetricCard\n          title=\"Current Month Alerts\"\n          value={monthlyAlertCount}\n          description={\n            settings?.tier === 'free'\n              ? `Free tier limit: ${alertCapFor(settings)}`\n              : 'Enterprise tier'\n          }\n        />\n        <MetricCard\n          title=\"Open Alerts\"\n          value={activeAlerts.length}\n          description=\"Unresolved alerts\"\n        />\n        <MetricCard\n          title=\"Last Event Processed\"\n          value={\n            alertMetrics.lastProcessed\n              ? formatRelative(new Date(alertMetrics.lastProcessed), new Date())\n              : '-'\n          }\n          description=\"Last webhook event\"\n        />\n      </div>\n\n      {/* Show upgrade banner for users exceeding free tier limits */}\n      {showUpgradeBanner && (\n        <UpgradeBanner monthlyAlertCount={monthlyAlertCount} alertLimit={alertCapFor(settings)} />\n      )}\n\n      {/* Auto-pause and Tabs section - only show if an account is selected */}\n      {selectedAccountId && selectedAccountData && (\n        <>\n          <TooltipProvider delayDuration={300}>\n            {' '}\n            {/* Ensure TooltipProvider wraps the toggles */}\n            <div className=\"flex items-center justify-end space-x-6 mb-4\">\n              {' '}\n              {/* Use space-x for spacing */}\n              {/* Payout Pause Toggle */}\n              <div className=\"flex items-center space-x-2\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <span className=\"text-sm font-medium text-slate-600 flex items-center\">\n                      Pause Payouts\n                      <Info className=\"h-3 w-3 ml-1 text-muted-foreground\" />\n                    </span>\n                  </TooltipTrigger>\n                  <TooltipContent className=\"max-w-xs\">\n                    Stops Stripe from automatically sending funds to your bank. Guardian may turn\n                    this off automatically when fraud is suspected. You can resume payouts once\n                    you've reviewed the transactions.\n                  </TooltipContent>\n                </Tooltip>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    {/* Wrap Switch in a div to attach tooltip trigger easily */}\n                    <div className=\"flex items-center\">\n                      <Switch\n                        id={`payout-switch-dashboard-${selectedAccountData.stripe_account_id}`}\n                        checked={!selectedAccountData.payouts_paused} // ON when NOT paused\n                        onCheckedChange={handleTogglePayouts} // No need to pass value, handler uses state\n                        disabled={isTogglingPayouts}\n                        aria-label={\n                          selectedAccountData.payouts_paused ? 'Resume payouts' : 'Pause payouts'\n                        }\n                      />\n                      {isTogglingPayouts && <Loader2 className=\"h-4 w-4 animate-spin ml-2\" />}\n                    </div>\n                  </TooltipTrigger>\n                  <TooltipContent>{getPauseTooltipContent(selectedAccountData)}</TooltipContent>\n                </Tooltip>\n              </div>\n              {/* Existing Auto-pause Alerts Toggle */}\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm font-medium text-slate-600\">Auto-pause alerts</span>\n                <Switch\n                  id={`auto-pause-switch-${selectedAccountData.stripe_account_id}`}\n                  checked={autoPause}\n                  onCheckedChange={toggleAutoPause}\n                  disabled={updatingAutoPause}\n                  aria-label=\"Toggle auto-pause for selected account\"\n                />\n                {updatingAutoPause && <Loader2 className=\"h-4 w-4 animate-spin ml-2\" />}\n              </div>\n            </div>\n          </TooltipProvider>\n\n          <Tabs defaultValue=\"active\" className=\"mt-6\">\n            <TabsList className=\"mb-6\">\n              <TabsTrigger value=\"active\">Active ({activeAlerts.length})</TabsTrigger>\n              <TabsTrigger value=\"resolved\">Resolved ({resolvedAlerts.length})</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"active\">\n              {loadingAlerts ? (\n                <div className=\"flex justify-center items-center h-40\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-slate-500\" />{' '}\n                  <span className=\"ml-2\">Loading alerts...</span>\n                </div>\n              ) : (\n                <AlertsTable\n                  alerts={activeAlerts}\n                  onResolve={markResolved}\n                  showResolveAction={true}\n                />\n              )}\n            </TabsContent>\n            <TabsContent value=\"resolved\">\n              {loadingAlerts ? (\n                <div className=\"flex justify-center items-center h-40\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-slate-500\" />{' '}\n                  <span className=\"ml-2\">Loading alerts...</span>\n                </div>\n              ) : (\n                <AlertsTable\n                  alerts={resolvedAlerts}\n                  onResolve={markResolved}\n                  showResolveAction={false}\n                />\n              )}\n            </TabsContent>\n          </Tabs>\n        </>\n      )}\n      {!selectedAccountId && !initialLoading && (\n        <div className=\"text-center text-slate-500 py-10\">\n          Please select an account to view alerts.\n        </div>\n      )}\n    </Container>\n  );\n}\n\n// New top-level export that uses Suspense\nexport default function AlertsPage() {\n  return (\n    <Suspense\n      fallback={\n        <Container className=\"py-10\">\n          <div className=\"flex justify-center items-center h-64\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-slate-500\" />{' '}\n            <span className=\"ml-2\">Loading page...</span>\n          </div>\n        </Container>\n      }\n    >\n      <AlertsPageContent />\n    </Suspense>\n  );\n}\n\ntype AlertsTableProps = {\n  alerts: Alert[];\n  onResolve: (id: number) => void;\n  showResolveAction: boolean;\n};\n\nfunction AlertsTable({ alerts, onResolve, showResolveAction }: AlertsTableProps) {\n  if (alerts.length === 0) {\n    return <div className=\"text-center text-slate-500 py-10\">No alerts here.</div>;\n  }\n\n  const getSeverityBadge = (severity: string) => {\n    switch (severity) {\n      case 'high':\n        return 'destructive';\n      case 'medium':\n        return 'warning';\n      default:\n        return 'secondary';\n    }\n  };\n\n  // Function to get color class based on risk score\n  const getRiskScoreColor = (score: number | null) => {\n    if (score === null || score === undefined) return 'bg-gray-200 text-gray-700'; // Neutral for N/A\n    if (score > 60) return 'bg-red-100 text-red-700'; // Red for high risk\n    if (score >= 30) return 'bg-yellow-100 text-yellow-700'; // Yellow for medium risk\n    return 'bg-green-100 text-green-700'; // Green for low risk\n  };\n\n  return (\n    <div className=\"overflow-x-auto bg-white rounded-lg shadow\">\n      <table className=\"min-w-full divide-y divide-slate-200\">\n        <thead className=\"bg-slate-50\">\n          <tr>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\"\n            >\n              Risk Score\n            </th>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\"\n            >\n              Severity\n            </th>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\"\n            >\n              Message\n            </th>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\"\n            >\n              Payout ID\n            </th>\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider\"\n            >\n              Time\n            </th>\n            {showResolveAction && (\n              <th scope=\"col\" className=\"relative px-6 py-3\">\n                <span className=\"sr-only\">Resolve</span>\n              </th>\n            )}\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-slate-200\">\n          {alerts.map((alert) => (\n            <tr key={alert.id}>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <span\n                  className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRiskScoreColor(alert.risk_score)}`}\n                >\n                  {alert.risk_score !== null && alert.risk_score !== undefined\n                    ? alert.risk_score.toFixed(0)\n                    : 'N/A'}\n                </span>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <Badge variant={getSeverityBadge(alert.severity)} className=\"capitalize\">\n                  {alert.severity}\n                </Badge>\n              </td>\n              <td className=\"px-6 py-4 text-sm text-slate-700\">{alert.message}</td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-500 font-mono\">\n                {alert.stripe_payout_id || 'N/A'}\n              </td>\n              <td\n                className=\"px-6 py-4 whitespace-nowrap text-sm text-slate-500\"\n                title={new Date(alert.created_at).toISOString()}\n              >\n                {format(new Date(alert.created_at), 'PP pp')}\n              </td>\n              {showResolveAction && (\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => onResolve(alert.id)}>\n                    Mark Resolved\n                  </Button>\n                </td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/analytics/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Legend' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'accountId' is defined but never used. Allowed unused args must match /^_/u.","line":46,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isPro' is defined but never used. Allowed unused args must match /^_/u.","line":46,"column":80,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'profile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":128,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5337,5340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5337,5340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6299,6302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6299,6302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { createClient } from '@/utils/supabase/client';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n} from 'recharts';\nimport { Container } from '@/components/Container';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Alert as ShadcnAlert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Loader2, AlertTriangle } from 'lucide-react';\nimport { format } from 'date-fns'; // For formatting dates on axes/tooltips\nimport { useUser } from '@/lib/hooks/useUser'; // Assuming hook to get user/profile\nimport { isPro } from '@/lib/guardian/plan'; // Assuming plan helper exists\nimport StripeAccountSelect from '@/app/components/StripeAccountSelect'; // Import account selector\nimport { Database } from '@/types/supabase'; // Import Database type\n\n// Define SettingsRow type locally or import if available elsewhere\ntype SettingsRow = Database['public']['Tables']['settings']['Row'];\ntype ConnectedAccount = Database['public']['Tables']['connected_accounts']['Row'];\n\n// Placeholder types for view data - adjust based on actual view structure\ntype AlertsByDayData = { day: string; alerts: number }[];\ntype AlertsRuleRankData = { alert_type: string; alerts: number }[];\ntype FpRateRuleData = {\n  alert_type: string;\n  total_alerts: number;\n  fp_count: number;\n  fp_rate: number;\n}[];\ntype AvgRiskScoreData = { day: string; avg_risk: number }[];\n\n// --- Data Fetching Functions --- //\nconst fetchAnalyticsView = async (viewName: string, accountId?: string | null, isPro?: boolean) => {\n  const supabase = createClient();\n\n  // Note: Views currently DO NOT support account filtering.\n  // This function fetches global data regardless of accountId/isPro.\n  // Filtering logic needs to be added to the SQL views or use RPC functions.\n  // For now, the UI gating relies on the isPro flag passed to the component.\n  let query = supabase.from(viewName).select('*');\n\n  // Placeholder for future filtering logic:\n  // if (isPro && accountId) {\n  //   // Need RPC or modified view: e.g., supabase.rpc('get_view_data_for_account', { view_name: viewName, p_account_id: accountId })\n  // }\n\n  const { data, error } = await query;\n\n  if (error) {\n    console.error(`Error fetching ${viewName}:`, error);\n    throw new Error(`Failed to fetch ${viewName}: ${error.message}`);\n  }\n  return data;\n};\n\n// --- Helper to format date string --- //\nconst formatDateTick = (dateString: string) => {\n  try {\n    return format(new Date(dateString), 'MMM d'); // Format like 'Apr 26'\n  } catch {\n    return dateString; // Fallback\n  }\n};\n\n// --- Reusable Chart Card Component --- //\ninterface ChartCardProps {\n  title: string;\n  description: string;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n  children: React.ReactNode;\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({\n  title,\n  description,\n  isLoading,\n  isError,\n  error,\n  children,\n}) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"h-[300px]\">\n        {' '}\n        {/* Fixed height for consistency */}\n        {isLoading ? (\n          <div className=\"flex justify-center items-center h-full\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          </div>\n        ) : isError ? (\n          <div className=\"flex justify-center items-center h-full\">\n            <ShadcnAlert variant=\"destructive\" className=\"w-auto\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Error loading data</AlertTitle>\n              <AlertDescription>{error?.message || 'An unknown error occurred'}</AlertDescription>\n            </ShadcnAlert>\n          </div>\n        ) : (\n          children\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// --- Main Analytics Page Component --- //\nexport default function AnalyticsPage() {\n  const supabase = createClient();\n  const { user, profile, isLoading: isLoadingUser } = useUser(); // Get user/profile info\n  const [allAccounts, setAllAccounts] = useState<ConnectedAccount[]>([]);\n  const [selectedAccountId, setSelectedAccountId] = useState<string | null>(null);\n  const [isLoadingAccounts, setIsLoadingAccounts] = useState(true);\n  const [settings, setSettings] = useState<SettingsRow | null>(null); // State for settings\n  const [isLoadingSettings, setIsLoadingSettings] = useState(true);\n\n  // Determine if user is Pro based on settings\n  const isProUser = useMemo(() => isPro(settings), [settings]);\n\n  // Fetch settings on mount or when user changes\n  useEffect(() => {\n    async function fetchSettingsData() {\n      if (!user) {\n        setIsLoadingSettings(false);\n        return;\n      }\n      setIsLoadingSettings(true);\n      try {\n        const { data, error } = await supabase\n          .from('settings')\n          .select('*')\n          .eq('id', 'global_settings') // Assuming global for now, adjust if per-user/account\n          .maybeSingle();\n        if (error) throw error;\n        setSettings(data);\n      } catch (error: any) {\n        console.error('Error fetching settings:', error);\n        // Optionally show toast\n      } finally {\n        setIsLoadingSettings(false);\n      }\n    }\n    fetchSettingsData();\n  }, [user, supabase]);\n\n  // Fetch connected accounts on mount or when user changes (needed for Pro dropdown)\n  useEffect(() => {\n    async function fetchUserAccounts() {\n      if (!user) {\n        setIsLoadingAccounts(false);\n        return;\n      }\n      setIsLoadingAccounts(true);\n      try {\n        const { data, error } = await supabase\n          .from('connected_accounts')\n          .select('*') // Select needed fields for dropdown\n          .eq('user_id', user.id);\n\n        if (error) throw error;\n        setAllAccounts(data || []);\n        // Set initial selection if not already set and accounts exist\n        if (!selectedAccountId && data && data.length > 0) {\n          setSelectedAccountId(data[0].stripe_account_id);\n        }\n      } catch (error: any) {\n        console.error('Error fetching connected accounts:', error);\n        setAllAccounts([]); // Clear accounts on error\n        // Optionally show toast\n      } finally {\n        setIsLoadingAccounts(false);\n      }\n    }\n    fetchUserAccounts();\n  }, [user, supabase, selectedAccountId]); // Add selectedAccountId dependency?\n\n  // Determine account ID to use for fetching (null unless Pro and account selected)\n  const fetchAccountId = useMemo(() => {\n    // For now, always fetch global data as views don't support filtering.\n    // When filtering is implemented, this logic will change:\n    // return isProUser ? selectedAccountId : null;\n    return null; // Always fetch global for now\n  }, []); // Removed unnecessary dependencies\n\n  // --- React Query Hooks --- //\n  // Pass fetchAccountId to queryKey and queryFn\n  const {\n    data: alertsByDay,\n    isLoading: isLoadingAlertsByDay,\n    isError: isErrorAlertsByDay,\n    error: errorAlertsByDay,\n  } = useQuery<AlertsByDayData>({\n    queryKey: ['analytics', 'alerts_by_day', fetchAccountId],\n    queryFn: () => fetchAnalyticsView('alerts_by_day', fetchAccountId, isProUser),\n    enabled: !isLoadingSettings && !isLoadingUser, // Only fetch when user/settings known\n  });\n\n  const {\n    data: alertsRuleRank,\n    isLoading: isLoadingRuleRank,\n    isError: isErrorRuleRank,\n    error: errorRuleRank,\n  } = useQuery<AlertsRuleRankData>({\n    queryKey: ['analytics', 'alerts_rule_rank', fetchAccountId],\n    queryFn: () => fetchAnalyticsView('alerts_rule_rank', fetchAccountId, isProUser),\n    enabled: !isLoadingSettings && !isLoadingUser,\n  });\n\n  const {\n    data: fpRateRule,\n    isLoading: isLoadingFpRate,\n    isError: isErrorFpRate,\n    error: errorFpRate,\n  } = useQuery<FpRateRuleData>({\n    queryKey: ['analytics', 'fp_rate_rule', fetchAccountId],\n    queryFn: () => fetchAnalyticsView('fp_rate_rule', fetchAccountId, isProUser),\n    enabled: !isLoadingSettings && !isLoadingUser,\n  });\n\n  const {\n    data: avgRiskScore,\n    isLoading: isLoadingAvgRisk,\n    isError: isErrorAvgRisk,\n    error: errorAvgRisk,\n  } = useQuery<AvgRiskScoreData>({\n    queryKey: ['analytics', 'avg_risk_score', fetchAccountId],\n    queryFn: () => fetchAnalyticsView('avg_risk_score', fetchAccountId, isProUser),\n    enabled: !isLoadingSettings && !isLoadingUser,\n  });\n\n  // Memoize formatted data for charts to prevent re-renders\n  const formattedFpRateData = useMemo(() => {\n    return fpRateRule?.map((item) => ({ ...item, fp_percent: item.fp_rate * 100 })) || [];\n  }, [fpRateRule]);\n\n  // Combined loading state\n  const isLoading = isLoadingUser || isLoadingSettings || isLoadingAccounts;\n\n  if (isLoading) {\n    return (\n      <Container className=\"py-10\">\n        <div className=\"flex justify-center items-center h-64\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"py-10\">\n      <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between mb-8 gap-4\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Guardian Analytics</h1>\n        {isProUser && allAccounts.length > 0 && (\n          <div className=\"w-full md:w-auto md:min-w-[250px]\">\n            <StripeAccountSelect\n              accounts={allAccounts}\n              selectedAccountId={selectedAccountId}\n              onAccountChange={setSelectedAccountId}\n            />\n          </div>\n        )}\n      </div>\n\n      {!isProUser && (\n        <ShadcnAlert className=\"mb-6\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertTitle>Free Tier View</AlertTitle>\n          <AlertDescription>\n            You are viewing aggregated analytics data across all users. Upgrade to Pro to see data\n            specific to your connected accounts.\n            {/* Add link to billing page */}\n          </AlertDescription>\n        </ShadcnAlert>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Card A: Alerts per day */}\n        <ChartCard\n          title=\"Alerts / Day (Last 30 Days)\"\n          description={\n            isProUser && selectedAccountId\n              ? `For account ${selectedAccountId}`\n              : 'Global daily alert volume.'\n          }\n          isLoading={isLoadingAlertsByDay}\n          isError={isErrorAlertsByDay}\n          error={errorAlertsByDay as Error | null}\n        >\n          {alertsByDay && (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={alertsByDay} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                <XAxis dataKey=\"day\" tickFormatter={formatDateTick} fontSize={12} />\n                <YAxis allowDecimals={false} fontSize={12} />\n                <Tooltip\n                  contentStyle={{ fontSize: '12px', padding: '4px 8px' }}\n                  labelFormatter={formatDateTick}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"alerts\"\n                  stroke=\"#8884d8\"\n                  strokeWidth={2}\n                  dot={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          )}\n        </ChartCard>\n\n        {/* Card B: Top rules by count */}\n        <ChartCard\n          title=\"Top Rules by Count (Last 30 Days)\"\n          description={\n            isProUser && selectedAccountId\n              ? `For account ${selectedAccountId}`\n              : 'Global trigger frequency.'\n          }\n          isLoading={isLoadingRuleRank}\n          isError={isErrorRuleRank}\n          error={errorRuleRank as Error | null}\n        >\n          {alertsRuleRank && (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={alertsRuleRank}\n                layout=\"vertical\"\n                margin={{ top: 5, right: 20, bottom: 5, left: 30 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\n                <XAxis type=\"number\" allowDecimals={false} fontSize={12} />\n                <YAxis\n                  dataKey=\"alert_type\"\n                  type=\"category\"\n                  width={100}\n                  fontSize={10}\n                  interval={0}\n                />\n                <Tooltip contentStyle={{ fontSize: '12px', padding: '4px 8px' }} />\n                <Bar dataKey=\"alerts\" fill=\"#82ca9d\" />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </ChartCard>\n\n        {/* Card C: False-positive % per rule */}\n        <ChartCard\n          title=\"False Positive Rate by Rule (Last 30 Days)\"\n          description={\n            isProUser && selectedAccountId\n              ? `For account ${selectedAccountId}`\n              : 'Global false positive rates.'\n          }\n          isLoading={isLoadingFpRate}\n          isError={isErrorFpRate}\n          error={errorFpRate as Error | null}\n        >\n          {formattedFpRateData && (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={formattedFpRateData}\n                layout=\"vertical\"\n                margin={{ top: 5, right: 20, bottom: 5, left: 30 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" horizontal={false} />\n                <XAxis type=\"number\" unit=\"%\" domain={[0, 100]} fontSize={12} />\n                <YAxis\n                  dataKey=\"alert_type\"\n                  type=\"category\"\n                  width={100}\n                  fontSize={10}\n                  interval={0}\n                />\n                <Tooltip\n                  formatter={(value) => `${Number(value).toFixed(1)}%`}\n                  contentStyle={{ fontSize: '12px', padding: '4px 8px' }}\n                />\n                <Bar dataKey=\"fp_percent\" fill=\"#ffc658\" name=\"False Positive %\" />\n              </BarChart>\n            </ResponsiveContainer>\n          )}\n        </ChartCard>\n\n        {/* Card D: Average risk score */}\n        <ChartCard\n          title=\"Average Risk Score (Last 7 Days)\"\n          description={\n            isProUser && selectedAccountId\n              ? `For account ${selectedAccountId}`\n              : 'Global average daily risk score.'\n          }\n          isLoading={isLoadingAvgRisk}\n          isError={isErrorAvgRisk}\n          error={errorAvgRisk as Error | null}\n        >\n          {avgRiskScore && (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <AreaChart data={avgRiskScore} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n                <defs>\n                  <linearGradient id=\"colorAvgRisk\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#ff7300\" stopOpacity={0.8} />\n                    <stop offset=\"95%\" stopColor=\"#ff7300\" stopOpacity={0} />\n                  </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                <XAxis dataKey=\"day\" tickFormatter={formatDateTick} fontSize={12} />\n                <YAxis domain={[0, 100]} fontSize={12} />\n                <Tooltip\n                  formatter={(value) => Number(value).toFixed(1)}\n                  labelFormatter={formatDateTick}\n                  contentStyle={{ fontSize: '12px', padding: '4px 8px' }}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"avg_risk\"\n                  stroke=\"#ff7300\"\n                  fillOpacity={1}\n                  fill=\"url(#colorAvgRisk)\"\n                  name=\"Avg Risk\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          )}\n        </ChartCard>\n      </div>\n    </Container>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/onboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/opengraph-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Banknote' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SlidersHorizontal' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BarChart2' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"import/no-duplicates","severity":2,"message":"'/Users/michaelfuscoletti/Desktop/dock108home/node_modules/lucide-react/dist/lucide-react.d.ts' imported multiple times.","line":16,"column":8,"nodeType":"Literal","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":21},{"ruleId":"import/no-duplicates","severity":2,"message":"'/Users/michaelfuscoletti/Desktop/dock108home/node_modules/lucide-react/dist/lucide-react.d.ts' imported multiple times.","line":18,"column":29,"nodeType":"Literal","endLine":18,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Metadata } from 'next';\nimport { Container } from '@/components/Container'; // Import Container\nimport {\n  Zap,\n  Gauge,\n  ShieldCheck,\n  Banknote,\n  SlidersHorizontal,\n  AlertTriangle,\n  Users,\n  Settings,\n  BarChart2,\n  Sparkles,\n  Eye,\n  Shield,\n} from 'lucide-react'; // Import icons\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'; // Removed unused CardFooter\nimport { Check, Info } from 'lucide-react';\nimport { GuardianIcon } from '@/components/GuardianIcon';\nimport { cn } from '@/lib/utils';\nimport { productLD } from '@/lib/jsonld';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\n\n// Reusable Badge component (Minor style tweak for Beta badge)\nconst Badge = ({ children, className }: { children: React.ReactNode; className?: string }) => (\n  <span\n    className={cn(\n      'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold', // Adjusted padding/size\n      className,\n    )}\n  >\n    {children}\n  </span>\n);\n\n// Guardian illustration for hero (larger icon)\nconst HeroGuardianIllustration = ({ className }: { className?: string }) => (\n  <GuardianIcon\n    className={cn(\n      'h-[24rem] w-[24rem] stroke-[2] text-[var(--accent-guardian)] drop-shadow-xl',\n      className,\n    )}\n  />\n);\n\n// Metadata\nexport const generateMetadata = (): Metadata => {\n  const url = 'https://www.dock108.ai/stripe-guardian';\n  const image = `${url}/opengraph-image`;\n  const description =\n    'Real-time fraud protection for Stripe Connect platforms. Monitor payouts 24/7 and stop suspicious activity before funds leave your account.';\n\n  return {\n    title: 'Stripe Guardian – Real-Time Payout Fraud Protection | DOCK108',\n    description: description,\n    openGraph: {\n      title: 'Stripe Guardian – Real-Time Payout Fraud Protection | DOCK108',\n      description: description,\n      url,\n      images: [image],\n    },\n    twitter: {\n      card: 'summary_large_image',\n      title: 'Stripe Guardian – Real-Time Payout Fraud Protection | DOCK108',\n      description: description,\n      images: [image],\n    },\n    other: {\n      'script:type=application/ld+json': JSON.stringify(\n        productLD({\n          name: 'Stripe Guardian',\n          description: 'Real‑time velocity rules, bank‑swap detection & auto‑pause.',\n          url,\n          image,\n          price: '29.00',\n        }),\n      ),\n    },\n  };\n};\n\nconst painPoints = [\n  {\n    pain: 'Rogue Express accounts appear overnight, draining funds before you notice.',\n    fix: 'Webhook diff analysis flags new accounts, IP geolocation changes, and unusual setup velocity.',\n  },\n  {\n    pain: 'Instant payouts enabled? A single compromised account can mean $10K+ lost in hours.',\n    fix: 'Configurable velocity limits per account and platform-wide, with instant auto-pause actions.',\n  },\n  {\n    pain: \"Stripe Radar rules aren\\'t built for nuanced platform payout fraud like bank swapping.\",\n    fix: 'Pre-built heuristics tuned for SaaS & marketplace payout patterns, including bank account swap detection.',\n  },\n];\n\nconst features = [\n  {\n    name: 'Comprehensive Fraud Detection',\n    description:\n      'Utilizes multiple heuristics like velocity checks, bank swap detection, and geo-location analysis.',\n    icon: Shield,\n  },\n  {\n    name: 'Real-Time Alerts & Notifications',\n    description:\n      'Get instant notifications via email or Slack when suspicious activity is detected.',\n    icon: Zap,\n  },\n  {\n    name: 'One-Click Stripe Connect Onboarding',\n    description: 'Securely connect your Stripe account in seconds via OAuth.',\n    icon: Sparkles,\n  },\n  {\n    name: 'Intelligent Risk Scoring',\n    description: 'Alerts are assigned a risk score based on rule weights and historical feedback.',\n    icon: Gauge,\n  },\n  {\n    name: 'Customizable Rules & Thresholds',\n    description: 'Fine-tune detection sensitivity with adjustable rule parameters (coming soon).',\n    icon: Settings,\n  },\n  {\n    name: 'Admin Dashboard & Team Access',\n    description: 'Monitor alerts, manage settings, and invite team members (coming soon).',\n    icon: Users,\n  },\n];\n\n// Pricing tiers data (placeholder)\nconst tiers = [\n  {\n    name: 'Beta Free',\n    id: 'tier-beta-free',\n    priceLabel: '$0',\n    priceSubLabel: 'during beta',\n    description: 'Get started for free during our public beta phase.',\n    features: [\n      'Up to 2 Stripe accounts',\n      'Core fraud detection rule set',\n      'Default rule thresholds',\n      'Email & Slack alerts',\n      'Manual alert response',\n      '30-day data retention',\n      'Community support',\n    ],\n    cta: 'Join the Free Beta',\n    ctaLink: '/sign-up',\n    isPrimary: true,\n  },\n  {\n    name: 'Pro',\n    id: 'tier-pro',\n    priceLabel: 'Coming Soon',\n    priceSubLabel: 'Subscription',\n    description: 'Advanced features and unlimited scale for established platforms.',\n    features: [\n      'Unlimited connected accounts',\n      'Advanced rule customization',\n      'Multi-channel alerts',\n      'Auto-pause options',\n      '60+ day data retention',\n      'Priority support',\n    ],\n    cta: 'Notify Me',\n    ctaLink: '#',\n    isPrimary: false,\n  },\n];\n\n// New Benefits Section Data\nconst benefits = [\n  {\n    name: 'Prevent Fraud Losses Proactively',\n    description:\n      'Stop suspicious payouts automatically before funds are lost. Guardian acts as your first line of defense against common platform payout fraud vectors.',\n    icon: ShieldCheck,\n  },\n  {\n    name: 'Save Time & Reduce Alert Fatigue',\n    description:\n      'Focus on real threats. Our intelligent risk scoring and targeted alerts minimize noise, letting your team investigate what matters most.',\n    icon: Eye,\n  },\n  {\n    name: 'Easy Setup—No Maintenance',\n    description:\n      'Connect your Stripe account in minutes. Guardian runs securely in the cloud with no complex setup or ongoing maintenance required from your team.',\n    icon: Sparkles,\n  },\n];\n\nexport default function StripeGuardianPage() {\n  return (\n    <>\n      {/* Hero Section */}\n      <div className=\"relative isolate overflow-hidden pt-14\">\n        <Container className=\"py-24 sm:py-32 lg:flex lg:items-center lg:gap-x-10 lg:py-40\">\n          <div className=\"mx-auto max-w-2xl lg:mx-0 lg:flex-auto\">\n            <div className=\"flex items-center gap-x-4\">\n              <Badge className=\"border border-blue-200 bg-blue-50 text-blue-700\">💡 Beta</Badge>\n              <span className=\"text-sm font-medium text-gray-600\">Now in Public Beta!</span>\n            </div>\n            <h1 className=\"mt-6 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n              Guard Your Stripe Payouts with Stripe Guardian.\n            </h1>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Real-time fraud protection for Stripe Connect platforms. Monitor payouts 24/7 and stop\n              suspicious activity before funds leave your account.\n            </p>\n            <div className=\"mt-10 flex flex-col sm:flex-row items-center gap-x-6 gap-y-4\">\n              <Button asChild size=\"lg\">\n                <Link href=\"/sign-up\">Join the Free Beta</Link>\n              </Button>\n              <Button asChild variant=\"outline\" size=\"lg\">\n                <Link href=\"/guardian-demo\">View Demo</Link>\n              </Button>\n            </div>\n          </div>\n          {/* Guardian Illustration */}\n          <div className=\"mt-16 sm:mt-24 lg:mt-0 lg:flex-shrink-0 lg:flex-grow\">\n            <HeroGuardianIllustration className=\"mx-auto\" />\n          </div>\n        </Container>\n        {/* Background Gradient (Optional Subtle effect) */}\n        <div\n          className=\"absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80\"\n          aria-hidden=\"true\"\n        >\n          <div\n            className=\"relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[var(--accent-guardian)] to-[#9089fc] opacity-20 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]\"\n            style={{\n              clipPath:\n                'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Pain/Solution Section */}\n      <div className=\"py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:mx-0\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Tired of payout fraud hitting your bottom line?\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Guardian acts as your automated fraud team, catching suspicious activity missed by\n              default Stripe rules.\n            </p>\n          </div>\n          <div className=\"mt-16 flow-root\">\n            <div className=\"-my-8 divide-y divide-gray-100\">\n              {painPoints.map((point, index) => (\n                <div\n                  key={index}\n                  className={`py-8 ${index % 2 !== 0 ? 'bg-gray-50 -mx-6 px-6 lg:-mx-8 lg:px-8' : ''}`}\n                >\n                  <dl className=\"relative flex flex-wrap gap-x-3 gap-y-3 lg:gap-x-8\">\n                    <div className=\"flex-none lg:w-80\">\n                      <dt className=\"font-semibold text-gray-900\">The Pain:</dt>\n                      <dd className=\"mt-1 text-gray-600\">{point.pain}</dd>\n                    </div>\n                    <div className=\"flex-auto\">\n                      <dt className=\"font-semibold text-gray-900\">The Guardian Fix:</dt>\n                      <dd className=\"mt-1 text-gray-600\">{point.fix}</dd>\n                    </div>\n                  </dl>\n                </div>\n              ))}\n            </div>\n          </div>\n        </Container>\n      </div>\n\n      {/* Benefits Section - Added */}\n      <div className=\"bg-white py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:text-center\">\n            <h2 className=\"text-base font-semibold leading-7 text-[var(--accent-guardian)]\">\n              Protect Your Platform\n            </h2>\n            <p className=\"mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Focus on growth, not fraud management\n            </p>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Guardian provides automated protection, intelligent alerting, and peace of mind,\n              freeing up your team.\n            </p>\n          </div>\n          <div className=\"mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-4xl\">\n            <dl className=\"grid max-w-xl grid-cols-1 gap-x-8 gap-y-10 lg:max-w-none lg:grid-cols-3 lg:gap-y-16\">\n              {benefits.map((benefit) => (\n                <div key={benefit.name} className=\"relative pl-16\">\n                  <dt className=\"text-base font-semibold leading-7 text-gray-900\">\n                    <div className=\"absolute left-0 top-0 flex h-10 w-10 items-center justify-center rounded-lg bg-[var(--accent-guardian)]\">\n                      <benefit.icon className=\"h-6 w-6 text-white\" aria-hidden=\"true\" />\n                    </div>\n                    {benefit.name}\n                  </dt>\n                  <dd className=\"mt-2 text-base leading-7 text-gray-600\">{benefit.description}</dd>\n                </div>\n              ))}\n            </dl>\n          </div>\n        </Container>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"bg-gray-50 py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl lg:text-center\">\n            <h2 className=\"text-base font-semibold leading-7 text-[var(--accent-guardian)]\">\n              How It Works\n            </h2>\n            <p className=\"mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Everything you need to fight payout fraud\n            </p>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Guardian integrates seamlessly with Stripe Connect to provide multiple layers of\n              defense.\n            </p>\n          </div>\n          <div className=\"mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none\">\n            <dl className=\"grid max-w-xl grid-cols-1 gap-x-8 gap-y-10 lg:max-w-none md:grid-cols-2 lg:grid-cols-3 lg:gap-y-16\">\n              {features.map((feature) => (\n                <div key={feature.name} className=\"relative pl-16\">\n                  <dt className=\"text-base font-semibold leading-7 text-gray-900\">\n                    <div className=\"absolute left-0 top-0 flex h-10 w-10 items-center justify-center rounded-lg bg-[var(--accent-guardian)]\">\n                      <feature.icon className=\"h-6 w-6 text-white\" aria-hidden=\"true\" />\n                    </div>\n                    {feature.name}\n                  </dt>\n                  <dd className=\"mt-2 text-base leading-7 text-gray-600\">{feature.description}</dd>\n                </div>\n              ))}\n            </dl>\n          </div>\n        </Container>\n      </div>\n\n      {/* Pricing Section */}\n      <div className=\"bg-white py-24 sm:py-32\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl text-center\">\n            <h2 className=\"text-base font-semibold leading-7 text-[var(--accent-guardian)]\">\n              Public Beta Pricing\n            </h2>\n            <p className=\"mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Free during Beta\n            </p>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Get full access to core Guardian features while we gather feedback. Pro plan coming\n              soon.\n            </p>\n          </div>\n          <div className=\"mx-auto mt-16 grid max-w-lg grid-cols-1 items-center gap-y-6 sm:mt-20 lg:max-w-4xl lg:grid-cols-2 lg:gap-x-8 lg:gap-y-0\">\n            {tiers.map((tier) => (\n              <Card\n                key={tier.id}\n                className={cn(\n                  'flex flex-col justify-between rounded-3xl p-8 ring-1 ring-gray-200 xl:p-10',\n                  tier.isPrimary ? 'bg-gray-900 ring-gray-900' : 'bg-white',\n                )}\n              >\n                <div>\n                  <h3\n                    className={cn(\n                      'text-lg font-semibold leading-8',\n                      tier.isPrimary ? 'text-white' : 'text-gray-900',\n                    )}\n                  >\n                    {tier.name}\n                  </h3>\n                  <p\n                    className={cn(\n                      'mt-4 text-sm leading-6',\n                      tier.isPrimary ? 'text-gray-300' : 'text-gray-600',\n                    )}\n                  >\n                    {tier.description}\n                  </p>\n                  <p className=\"mt-6 flex items-baseline gap-x-1\">\n                    <span\n                      className={cn(\n                        'text-4xl font-bold tracking-tight',\n                        tier.isPrimary ? 'text-white' : 'text-gray-900',\n                      )}\n                    >\n                      {tier.priceLabel}\n                    </span>\n                    {tier.priceSubLabel && (\n                      <span\n                        className={cn(\n                          'text-sm font-semibold leading-6 tracking-wide',\n                          tier.isPrimary ? 'text-gray-300' : 'text-gray-600',\n                        )}\n                      >\n                        {tier.priceSubLabel}\n                      </span>\n                    )}\n                  </p>\n                  <ul\n                    role=\"list\"\n                    className={cn(\n                      'mt-8 space-y-3 text-sm leading-6',\n                      tier.isPrimary ? 'text-gray-300' : 'text-gray-600',\n                    )}\n                  >\n                    {tier.features.map((feature) => (\n                      <li key={feature} className=\"flex gap-x-3\">\n                        <Check\n                          className={cn(\n                            'h-6 w-5 flex-none',\n                            tier.isPrimary ? 'text-white' : 'text-[var(--accent-guardian)]',\n                          )}\n                          aria-hidden=\"true\"\n                        />\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <Button\n                  asChild\n                  className={cn(\n                    'mt-8',\n                    !tier.isPrimary &&\n                      'bg-[var(--accent-guardian)] hover:bg-[var(--accent-guardian)]/90',\n                  )}\n                  variant={tier.isPrimary ? 'outline' : 'default'}\n                >\n                  <Link href={tier.ctaLink}>{tier.cta}</Link>\n                </Button>\n              </Card>\n            ))}\n          </div>\n        </Container>\n      </div>\n\n      {/* Footer CTA Section - Updated with sub-text */}\n      <div className=\"bg-gray-50 py-16 sm:py-24\">\n        <Container>\n          <div className=\"mx-auto max-w-2xl text-center\">\n            <h2 className=\"text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl\">\n              Ready to secure your Stripe payouts?\n            </h2>\n            <p className=\"mt-6 text-lg leading-8 text-gray-600\">\n              Join the free beta today. Setup takes less than 5 minutes, no credit card required.\n            </p>\n            <div className=\"mt-10 flex flex-col sm:flex-row items-center justify-center gap-x-6 gap-y-4\">\n              <Button asChild size=\"lg\">\n                <Link href=\"/sign-up\">Start Free Beta</Link>\n              </Button>\n              <Link\n                href=\"/guardian-demo\"\n                className=\"text-sm font-semibold leading-6 text-gray-900 hover:text-[var(--accent-guardian)]\"\n              >\n                View Demo <span aria-hidden=\"true\">→</span>\n              </Link>\n            </div>\n          </div>\n        </Container>\n      </div>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/settings/accounts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/settings/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/app/stripe-guardian/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/packages/common/src/formatters.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/packages/common/src/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/packages/common/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/packages/guardian-reactor/src/jobs/backfill.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4696,4699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4696,4699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6649,6652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6649,6652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Stripe } from 'stripe';\nimport { createAdminClient } from '@/lib/supabase/admin';\nimport { log } from '@/lib/logger';\nimport { stripe } from '@/lib/stripe'; // Use the configured Stripe client\nimport { Database } from '@/types/supabase'; // Assuming generated types\n\nconst NINETY_DAYS_MS = 90 * 24 * 60 * 60 * 1000;\nconst BUFFER_INSERT_BATCH_SIZE = 100; // Adjust as needed\n\ntype BackfillStatusRecord = Database['public']['Tables']['account_backfill_status']['Row'];\n\nasync function updateBackfillStatus(\n  supabaseAdmin: ReturnType<typeof createAdminClient>,\n  accountId: string,\n  updates: Partial<Omit<BackfillStatusRecord, 'id' | 'account_id' | 'user_id' | 'created_at'>>,\n) {\n  const { error } = await supabaseAdmin\n    .from('account_backfill_status')\n    .update({ ...updates, updated_at: new Date().toISOString() })\n    .eq('account_id', accountId);\n\n  if (error) {\n    log.error({ accountId, error: error.message, updates }, 'Failed to update backfill status');\n    // Potentially throw or handle retry?\n  }\n}\n\nasync function getDecryptedTokens(\n  supabaseAdmin: ReturnType<typeof createAdminClient>,\n  accountId: string,\n): Promise<{ accessToken: string; refreshToken: string } | null> {\n  const keyId = process.env.SODIUM_ENCRYPTION_KEY_ID;\n  if (!keyId) {\n    log.error({ accountId }, 'SODIUM_ENCRYPTION_KEY_ID missing for token decryption.');\n    throw new Error('Encryption key configuration error.');\n  }\n\n  const { data, error } = await supabaseAdmin.rpc('get_decrypted_stripe_tokens', {\n    p_stripe_account_id: accountId,\n    p_key_id: keyId,\n  });\n\n  if (error) {\n    log.error(\n      { accountId, error: error.message },\n      'Failed to call get_decrypted_stripe_tokens RPC',\n    );\n    return null;\n  }\n\n  if (!data || !data.access_token || !data.refresh_token) {\n    log.warn({ accountId }, 'Decryption function returned null or incomplete tokens.');\n    return null;\n  }\n\n  return { accessToken: data.access_token, refreshToken: data.refresh_token };\n}\n\nexport async function processBackfill(accountId: string, userId: string): Promise<void> {\n  const supabaseAdmin = createAdminClient();\n  log.info({ accountId, userId }, 'Starting backfill process...');\n\n  try {\n    // 1. Mark as running\n    await updateBackfillStatus(supabaseAdmin, accountId, {\n      status: 'running',\n      progress: 0,\n      error_message: null,\n    });\n\n    // 2. Get Decrypted Tokens\n    // Note: This example uses the access token directly. In a real-world scenario,\n    // you might want to use the refresh token to get a fresh access token if needed,\n    // or preferably, use a restricted API key if possible for the backfill.\n    const tokens = await getDecryptedTokens(supabaseAdmin, accountId);\n    if (!tokens) {\n      throw new Error('Could not retrieve decrypted Stripe tokens.');\n    }\n\n    // Create a temporary Stripe client authenticated as the connected account\n    // WARNING: Be extremely careful with the access token. Do not log it.\n    // Consider if a more restricted key can be used/created for backfill.\n    const stripeAsAccount = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n      apiVersion: stripe.VERSION, // Use same API version\n      stripeAccount: accountId,\n      // Note: Using the account's access token directly is generally discouraged for long-running server processes.\n      // The standard practice is to use the platform's secret key and the `stripeAccount` header.\n      // However, if `events.list` REQUIRES the access token for connected accounts (verify this in Stripe docs),\n      // this is necessary. If not, REMOVE this `apiKey` override.\n      apiKey: tokens.accessToken, // !! Use with caution - only if absolutely required !!\n    });\n\n    // 3. Calculate start time\n    const startTime = Math.floor((Date.now() - NINETY_DAYS_MS) / 1000);\n    const endTime = Math.floor(Date.now() / 1000); // Fetch up to now\n    const totalDuration = endTime - startTime;\n\n    log.info(\n      { accountId, startTime: new Date(startTime * 1000).toISOString() },\n      'Fetching events since 90 days ago.',\n    );\n\n    // 4. Fetch & Process Events\n    let eventBufferBatch: Partial<Database['public']['Tables']['event_buffer']['Insert']>[] = [];\n    let lastEventTimestamp = startTime;\n    let processedEventCount = 0;\n\n    for await (const event of stripeAsAccount.events.list({\n      created: { gte: startTime },\n      limit: 100,\n    })) {\n      // TODO: Filter for specific event types needed by Guardian if possible?\n      // enabled_events in webhook config doesn't filter historical events via API.\n\n      eventBufferBatch.push({\n        account_id: accountId,\n        event_id: event.id,\n        event_type: event.type,\n        payload: event as any, // Store the full event payload\n        source: 'backfill',\n        // status defaults to 'pending' in DB schema?\n      });\n\n      processedEventCount++;\n      lastEventTimestamp = event.created; // Keep track of the latest event time processed\n\n      if (eventBufferBatch.length >= BUFFER_INSERT_BATCH_SIZE) {\n        const { error: insertError } = await supabaseAdmin\n          .from('event_buffer')\n          .insert(eventBufferBatch);\n        if (insertError) {\n          throw new Error(`Failed to insert event buffer batch: ${insertError.message}`);\n        }\n        log.debug(\n          { accountId, count: eventBufferBatch.length },\n          'Inserted event batch into buffer.',\n        );\n        eventBufferBatch = []; // Reset batch\n\n        // Update progress - estimate based on time window covered\n        const elapsedDuration = lastEventTimestamp - startTime;\n        const progress = Math.min(\n          100,\n          Math.max(0, Math.floor((elapsedDuration / totalDuration) * 100)),\n        );\n        await updateBackfillStatus(supabaseAdmin, accountId, {\n          progress: progress,\n          status: 'running',\n        });\n      }\n    }\n\n    // Insert any remaining events in the last batch\n    if (eventBufferBatch.length > 0) {\n      const { error: insertError } = await supabaseAdmin\n        .from('event_buffer')\n        .insert(eventBufferBatch);\n      if (insertError) {\n        throw new Error(`Failed to insert final event buffer batch: ${insertError.message}`);\n      }\n      log.debug(\n        { accountId, count: eventBufferBatch.length },\n        'Inserted final event batch into buffer.',\n      );\n    }\n\n    log.info({ accountId, processedEventCount }, 'Backfill event fetching complete.');\n\n    // 5. Mark as complete\n    await updateBackfillStatus(supabaseAdmin, accountId, { status: 'completed', progress: 100 });\n    log.info({ accountId }, 'Backfill process completed successfully.');\n  } catch (error: any) {\n    log.error(\n      { accountId, userId, error: error.message, stack: error.stack },\n      'Error during backfill process',\n    );\n    // 6. Mark as failed\n    await updateBackfillStatus(supabaseAdmin, accountId, {\n      status: 'failed',\n      error_message: error.message,\n    });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelfuscoletti/Desktop/dock108home/packages/guardian-reactor/src/workers/notificationWorker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TablesInsert' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4549,4552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4549,4552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7827,7830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7827,7830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8458,8461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8458,8461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9861,9864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9861,9864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SupabaseClient } from '@supabase/supabase-js';\nimport { Database, Tables, TablesInsert } from '@/types/supabase'; // Adjust path as needed\nimport { createAdminClient as getServiceSupabaseClient } from '@/lib/supabase/admin'; // Use admin client\nimport { log } from '@/lib/logger'; // Assuming logger\nimport { attemptSendEmail } from '@/supabase/functions/send-email-alert/index'; // Placeholder path - ADJUST\nimport { attemptSendSlack } from '@/supabase/functions/send-slack-alert/index'; // Placeholder path - ADJUST\nimport { notificationsSentTotal } from '@/lib/metrics/registry'; // Import metrics\n\nconst WORKER_NAME = 'notification-worker';\nconst BATCH_SIZE = 10; // How many notifications to process per iteration\nconst POLLING_INTERVAL_MS = 5000; // Check for new jobs every 5 seconds\nconst INITIAL_RETRY_DELAY_MS = 1000; // Base delay for retries\n\n// Helper to calculate exponential backoff with jitter\nfunction calculateNextAttemptTime(attempt: number): Date {\n  const delayMs = INITIAL_RETRY_DELAY_MS * Math.pow(2, attempt - 1); // 1s, 2s, 4s, 8s...\n  const jitter = delayMs * (Math.random() * 0.2 - 0.1); // Add +/- 10% jitter\n  return new Date(Date.now() + delayMs + jitter);\n}\n\n// Helper to fetch user notification preferences\nasync function getUserPrefs(supabase: SupabaseClient<Database>, userId: string) {\n  const { data, error } = await supabase\n    .from('user_notification_channels')\n    .select('email_to, email_enabled, slack_webhook_url, slack_enabled') // Fetch relevant fields\n    .eq('user_id', userId)\n    .maybeSingle();\n\n  if (error) {\n    log.error({ userId, error: error.message }, 'Error fetching user notification preferences');\n    return null;\n  }\n  return data;\n}\n\nasync function processNotificationJob(\n  supabase: SupabaseClient<Database>,\n  job: Tables<'notification_queue'>,\n) {\n  const baseLogData = {\n    worker: WORKER_NAME,\n    job_id: job.id,\n    alert_id: job.alert_id,\n    channel: job.channel,\n    attempt: job.attempt,\n  };\n  log.info(baseLogData, 'Processing notification job');\n\n  let metricStatus = 'error'; // Default metric status\n\n  try {\n    // 1. Fetch Alert\n    const { data: alert, error: alertError } = await supabase\n      .from('alerts')\n      .select('*, delivery_status') // Fetch delivery_status too\n      .eq('id', job.alert_id)\n      .single();\n\n    if (alertError || !alert) {\n      log.error(\n        { ...baseLogData, error: alertError?.message },\n        'Failed to fetch alert for notification job',\n      );\n      // Mark job as failed - cannot proceed\n      await supabase\n        .from('notification_queue')\n        .update({ status: 'failed', error_msg: 'Alert not found' })\n        .eq('id', job.id);\n      metricStatus = 'failed'; // Set status for metric reporting below\n      notificationsSentTotal.inc({ channel: job.channel, status: metricStatus });\n      return;\n    }\n\n    // 2. Fetch User ID from Connected Account\n    const { data: account, error: accountError } = await supabase\n      .from('connected_accounts')\n      .select('user_id')\n      .eq('stripe_account_id', alert.stripe_account_id)\n      .maybeSingle();\n\n    if (accountError || !account?.user_id) {\n      log.error(\n        {\n          ...baseLogData,\n          stripe_account_id: alert.stripe_account_id,\n          error: accountError?.message,\n        },\n        'Failed to fetch user_id for alert account',\n      );\n      await supabase\n        .from('notification_queue')\n        .update({ status: 'failed', error_msg: 'User ID not found for account' })\n        .eq('id', job.id);\n      metricStatus = 'failed'; // Set status for metric reporting below\n      notificationsSentTotal.inc({ channel: job.channel, status: metricStatus });\n      return;\n    }\n    const userId = account.user_id;\n\n    // 3. Fetch User Prefs\n    const userPrefs = await getUserPrefs(supabase, userId);\n    if (!userPrefs) {\n      log.warn(\n        { ...baseLogData, userId },\n        'User preferences not found, cannot determine channel config',\n      );\n      // Treat as not configured - don't retry\n      await supabase\n        .from('notification_queue')\n        .update({ status: 'failed', error_msg: 'User preferences not found' })\n        .eq('id', job.id);\n      metricStatus = 'not_configured'; // Specific status for this case\n      await updateAlertStatus(supabase, alert.id, { [job.channel]: metricStatus });\n      notificationsSentTotal.inc({ channel: job.channel, status: metricStatus });\n      return;\n    }\n\n    // 4. Check Channel Config & Send\n    let sendResult: { success: boolean; error?: any } = {\n      success: false,\n      error: 'Channel not configured or disabled',\n    };\n    let isConfigured = false;\n    const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://www.dock108.ai';\n\n    if (job.channel === 'email' && userPrefs.email_enabled && userPrefs.email_to) {\n      isConfigured = true;\n      const resendApiKey = process.env.RESEND_API_KEY;\n      if (!resendApiKey) throw new Error('RESEND_API_KEY env var not set');\n      sendResult = await attemptSendEmail(resendApiKey, appUrl, alert, userPrefs.email_to);\n    } else if (job.channel === 'slack' && userPrefs.slack_enabled && userPrefs.slack_webhook_url) {\n      isConfigured = true;\n      sendResult = await attemptSendSlack(supabase, appUrl, alert, userPrefs.slack_webhook_url);\n    }\n\n    // 5. Update Queue and Alert Status based on result\n    if (!isConfigured) {\n      log.info(\n        { ...baseLogData, userId },\n        `Notification channel ${job.channel} is not configured or disabled for user.`,\n      );\n      await supabase\n        .from('notification_queue')\n        .update({ status: 'failed', error_msg: 'Channel not configured or disabled' })\n        .eq('id', job.id);\n      metricStatus = 'not_configured';\n      await updateAlertStatus(supabase, alert.id, { [job.channel]: metricStatus });\n    } else if (sendResult.success) {\n      log.info({ ...baseLogData }, 'Notification sent successfully');\n      await supabase.from('notification_queue').update({ status: 'sent' }).eq('id', job.id);\n      metricStatus = 'delivered';\n      await updateAlertStatus(supabase, alert.id, { [job.channel]: metricStatus });\n    } else {\n      const errorMessage =\n        sendResult.error?.message || String(sendResult.error) || 'Unknown send error';\n      log.warn({ ...baseLogData, error: errorMessage }, 'Notification send attempt failed');\n      metricStatus = 'failed'; // Set status for metric reporting below\n\n      if (job.attempt < job.max_attempts) {\n        const nextAttemptTime = calculateNextAttemptTime(job.attempt);\n        log.info(\n          { ...baseLogData, next_attempt_at: nextAttemptTime.toISOString() },\n          'Scheduling retry',\n        );\n        await supabase\n          .from('notification_queue')\n          .update({\n            status: 'queued',\n            next_attempt_at: nextAttemptTime.toISOString(),\n            error_msg: errorMessage,\n          })\n          .eq('id', job.id);\n        // Do not update alert status yet, it's still pending/retrying\n      } else {\n        log.error(\n          { ...baseLogData, error: errorMessage },\n          'Notification failed after max attempts',\n        );\n        await supabase\n          .from('notification_queue')\n          .update({ status: 'failed', error_msg: errorMessage })\n          .eq('id', job.id);\n        await updateAlertStatus(supabase, alert.id, { [job.channel]: metricStatus });\n        // Increment metric only on final failure\n        notificationsSentTotal.inc({ channel: job.channel, status: metricStatus });\n      }\n    }\n\n    // If not retrying (i.e., final failure or success/not_configured), increment metric\n    if (metricStatus !== 'failed' || job.attempt >= job.max_attempts) {\n      notificationsSentTotal.inc({ channel: job.channel, status: metricStatus });\n    }\n  } catch (error: any) {\n    log.error(\n      { ...baseLogData, error: error?.message },\n      'Critical error processing notification job',\n    );\n    metricStatus = 'error'; // Worker error status\n    notificationsSentTotal.inc({ channel: job.channel, status: metricStatus });\n    // Attempt to mark as failed to prevent infinite loops\n    try {\n      await supabase\n        .from('notification_queue')\n        .update({ status: 'failed', error_msg: `Worker error: ${error?.message}` })\n        .eq('id', job.id);\n      await updateAlertStatus(supabase, job.alert_id, { [job.channel]: metricStatus }); // Also mark alert\n    } catch (updateError: any) {\n      log.fatal(\n        { ...baseLogData, error: updateError?.message },\n        'FATAL: Failed to even mark job as failed after critical error',\n      );\n    }\n  }\n}\n\n// Main worker loop\nasync function notificationWorker() {\n  log.info({ worker: WORKER_NAME }, 'Worker started');\n  const supabase = getServiceSupabaseClient(); // Get client once\n\n  while (true) {\n    try {\n      log.debug({ worker: WORKER_NAME }, 'Fetching notification batch...');\n      const { data: jobs, error: fetchError } = await supabase.rpc('fetch_notification_batch', {\n        p_limit: BATCH_SIZE,\n      });\n\n      if (fetchError) {\n        log.error(\n          { worker: WORKER_NAME, error: fetchError.message },\n          'Error fetching notification batch',\n        );\n        // Wait before retrying fetch\n        await new Promise((resolve) => setTimeout(resolve, POLLING_INTERVAL_MS * 2));\n        continue;\n      }\n\n      if (!jobs || jobs.length === 0) {\n        log.debug({ worker: WORKER_NAME }, 'No pending notifications found, sleeping...');\n        await new Promise((resolve) => setTimeout(resolve, POLLING_INTERVAL_MS));\n        continue;\n      }\n\n      log.info({ worker: WORKER_NAME, count: jobs.length }, 'Processing batch...');\n      // Process jobs concurrently (adjust concurrency as needed)\n      await Promise.all(jobs.map((job) => processNotificationJob(supabase, job)));\n    } catch (error: any) {\n      log.error({ worker: WORKER_NAME, error: error?.message }, 'Error in worker main loop');\n      // Wait longer after a loop error\n      await new Promise((resolve) => setTimeout(resolve, POLLING_INTERVAL_MS * 3));\n    }\n  }\n}\n\n// --- Helper: Update Alert Delivery Status (Copied from send-email-alert) --- //\nasync function updateAlertStatus(\n  supabase: SupabaseClient<Database>,\n  alertId: number | string,\n  status: { [key: string]: string },\n) {\n  // Fetch existing status, merge, and update\n  const { data: currentAlert, error: fetchError } = await supabase\n    .from('alerts')\n    .select('delivery_status')\n    .eq('id', alertId)\n    .single();\n\n  if (fetchError) {\n    log.error({ alertId, error: fetchError?.message }, 'Error fetching alert to update status');\n    return; // Or throw?\n  }\n\n  const currentStatus = (currentAlert?.delivery_status || {}) as { [key: string]: string };\n  const newStatus = { ...currentStatus, ...status };\n\n  const { error: updateError } = await supabase\n    .from('alerts')\n    .update({ delivery_status: newStatus })\n    .eq('id', alertId);\n\n  if (updateError) {\n    log.error({ alertId, error: updateError?.message }, 'Error updating delivery_status');\n  }\n}\n\nexport default notificationWorker;\n","usedDeprecatedRules":[]}]