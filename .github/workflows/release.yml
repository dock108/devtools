name: Release Notes Publisher

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false # Don't cancel release note generation

jobs:
  create-release:
    name: Create GitHub Release & Notify
    runs-on: ubuntu-latest
    steps:
      # Use composite action for checkout with full history
      - name: Setup Node + Checkout Full History
        uses: ./.github/actions/setup-node-npm
        with:
          # No node setup needed here, but action includes checkout
          node-version: 'lts/*' # Specify a version, even if not used directly
          fetch-depth: 0 # Required to analyze tags and changelog history

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          # Basic validation
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "::error::Invalid tag format: $TAG. Expected vX.Y.Z"
            exit 1
          fi
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag: $TAG, Version: $VERSION"

      - name: Extract release notes from CHANGELOG.md
        id: extract_notes
        run: |
          # Ensure CHANGELOG.md exists
          if [ ! -f CHANGELOG.md ]; then
            echo "::error::CHANGELOG.md not found!"
            # Set default notes and allow release creation, but warn
            NOTES="Release ${{ steps.extract_version.outputs.version }}\n\nCHANGELOG.md not found. Please update the changelog."
            NOTES=$(echo "$NOTES" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/%0A/g') # Escape newlines for output
            echo "notes=$NOTES" >> $GITHUB_OUTPUT
            exit 0 # Allow workflow to continue to create a basic release
          fi

          VERSION="${{ steps.extract_version.outputs.version }}"
          # Robust awk script to capture notes between version header and next header or EOF
          NOTES=$(awk -v ver="$VERSION" \
            '/^## \[\.*\]/ { if (p) { exit }; if ($0 ~ "^## \[" ver "\]") { p=1; next } } p { print }' \
            CHANGELOG.md)

          # Trim leading/trailing whitespace
          NOTES=$(echo "$NOTES" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

          if [ -z "$NOTES" ]; then
            NOTES="Release $VERSION\n\nNo specific notes found in CHANGELOG.md for this version.\nPlease see [CHANGELOG.md](CHANGELOG.md) for full history."
          fi

          # Escape for multiline output
          # https://github.com/actions/runner/issues/1178#issuecomment-890518437
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Extracted release notes preview (first 5 lines):"
          echo "$NOTES" | head -n 5

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.tag }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          body: ${{ steps.extract_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Check for Slack webhook
        id: check_slack
        run: |
          if [ -n "${{ secrets.SLACK_RELEASE_WEBHOOK }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::warning::SLACK_RELEASE_WEBHOOK secret not set. Skipping Slack notification."
          fi

      - name: Send release notes to Slack
        if: steps.check_slack.outputs.exists == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          RELEASE_URL="${{ steps.create_release.outputs.html_url }}"
          # Use extracted notes directly from the previous step output
          NOTES_FOR_SLACK="${{ steps.extract_notes.outputs.notes }}"

          # Basic formatting for Slack (limit length, escape chars)
          # Replace markdown headers, links for better Slack display
          NOTES_FOR_SLACK=$(echo "$NOTES_FOR_SLACK" | sed -e 's/^### /â€¢ /g' -e 's/^## /\* /g' -e 's/^# /\* /g')
          NOTES_FOR_SLACK=$(echo "$NOTES_FOR_SLACK" | head -c 800) # Limit length
          if [[ ${#NOTES_FOR_SLACK} -ge 800 ]]; then
             NOTES_FOR_SLACK="${NOTES_FOR_SLACK}... (see full notes on GitHub)"
          fi
          # Escape characters for JSON
          NOTES_FOR_SLACK=$(echo $NOTES_FOR_SLACK | sed 's/"/\\"/g' | sed "s/'/\\'/g" | sed 's/`/\\`/g')

          # Construct JSON payload
          JSON_PAYLOAD=$(printf '{ "text": ":tada: *New Release: v%s*\n%s\n\n<%s|View release on GitHub>" }' "$VERSION" "$NOTES_FOR_SLACK" "$RELEASE_URL")

          echo "Sending notification to Slack..."
          curl -X POST -H 'Content-type: application/json' --data "$JSON_PAYLOAD" "$SLACK_RELEASE_WEBHOOK"
        env:
          SLACK_RELEASE_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
