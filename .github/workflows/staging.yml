name: Staging Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

# Define environment variable defaults
env:
  SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    outputs:
      SUPABASE_DB_URL: ${{ steps.supabase-branch.outputs.db_url }}
      SUPABASE_URL: ${{ steps.supabase-branch.outputs.api_url }}
      SUPABASE_ANON_KEY: ${{ steps.supabase-branch.outputs.anon_key }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ steps.supabase-branch.outputs.service_role_key }}
      PREVIEW_URL: ${{ steps.vercel-deploy.outputs.preview_url }}
      PREVIEW_ID: ${{ steps.vercel-deploy.outputs.preview_id }}
      STAGING_BRANCH: staging-${{ github.sha }}

    steps:
      - name: Setup Node + NPM Deps
        uses: ./.github/actions/setup-node-npm
        with:
          node-version: '20.x'

      - name: Disable corepack & ensure npm is default
        run: corepack disable

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Supabase token
        run: |
          if [[ -z "${{ secrets.SUPABASE_CI_TOKEN }}" ]]; then
            echo "::error::Missing SUPABASE_CI_TOKEN – add in repo secrets."
            exit 1
          fi
          if [[ -z "${{ secrets.VERCEL_TOKEN }}" ]]; then
            echo "::error::Missing VERCEL_TOKEN – add in repo secrets."
            exit 1
          fi

      - name: Login to Supabase
        run: supabase login --access-token ${{ secrets.SUPABASE_CI_TOKEN }}

      - name: Create Supabase Branch
        id: supabase-branch
        run: |
          BRANCH_NAME="staging-${{ github.sha }}"
          echo "Creating Supabase branch: $BRANCH_NAME"

          # Create the branch
          supabase db branch create $BRANCH_NAME --project-ref ${{ env.SUPABASE_PROJECT_ID }}

          # Push migrations to the branch
          supabase db push --branch $BRANCH_NAME --project-ref ${{ env.SUPABASE_PROJECT_ID }}

          # Get branch information
          BRANCH_INFO=$(supabase db branch list --branch $BRANCH_NAME --project-ref ${{ env.SUPABASE_PROJECT_ID }} --output json)

          # Extract and set output variables
          DB_URL=$(echo $BRANCH_INFO | jq -r '.[0].database_url')
          API_URL=$(echo $BRANCH_INFO | jq -r '.[0].api_url')
          ANON_KEY=$(echo $BRANCH_INFO | jq -r '.[0].anon_key')
          SERVICE_ROLE_KEY=$(echo $BRANCH_INFO | jq -r '.[0].service_role_key')

          # Set outputs
          echo "db_url=$DB_URL" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "anon_key=$ANON_KEY" >> $GITHUB_OUTPUT
          echo "service_role_key=$SERVICE_ROLE_KEY" >> $GITHUB_OUTPUT

          # Print redacted values for debugging
          echo "Database URL: ${DB_URL:0:15}...${DB_URL: -5}"
          echo "API URL: $API_URL"
          echo "Anon Key: ${ANON_KEY:0:5}...${ANON_KEY: -5}"
          echo "Service Role Key: ${SERVICE_ROLE_KEY:0:5}...${SERVICE_ROLE_KEY: -5}"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Preview
        id: vercel-deploy
        run: |
          # Pull Vercel environment information
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

          # Add Supabase environment variables
          echo "Setting Supabase environment variables for Vercel deployment..."
          vercel env add NEXT_PUBLIC_SUPABASE_URL ${{ steps.supabase-branch.outputs.api_url }} --token=${{ secrets.VERCEL_TOKEN }} --yes
          vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY ${{ steps.supabase-branch.outputs.anon_key }} --token=${{ secrets.VERCEL_TOKEN }} --yes
          vercel env add SUPABASE_SERVICE_ROLE_KEY ${{ steps.supabase-branch.outputs.service_role_key }} --token=${{ secrets.VERCEL_TOKEN }} --yes

          # Deploy to Vercel
          DEPLOY_OUTPUT=$(vercel deploy --prod=false --token=${{ secrets.VERCEL_TOKEN }} --yes)
          echo "Vercel deploy output: $DEPLOY_OUTPUT"

          # Get the preview URL
          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^ ]*')
          echo "Preview URL: $PREVIEW_URL"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

          # Get deployment ID for later promotion
          PREVIEW_ID=$(vercel inspect --token=${{ secrets.VERCEL_TOKEN }} --output=json $PREVIEW_URL | jq -r '.id')
          echo "Preview ID: $PREVIEW_ID"
          echo "preview_id=$PREVIEW_ID" >> $GITHUB_OUTPUT

          # Set the URL as an environment variable for the app
          vercel env add NEXT_PUBLIC_URL $PREVIEW_URL --token=${{ secrets.VERCEL_TOKEN }} --yes

          # Build again with updated environment variables
          vercel deploy --prod=false --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Save URLs to artifact
        run: |
          mkdir -p artifacts
          echo "${{ steps.vercel-deploy.outputs.preview_url }}" > artifacts/preview-url.txt
          echo "staging-${{ github.sha }}" > artifacts/staging-branch.txt
          echo "${{ steps.vercel-deploy.outputs.preview_id }}" > artifacts/preview-id.txt

      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: artifacts/
          retention-days: 3

      - name: Upload build/test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-build # Artifact name for e2e job
          path: |
            node_modules/
            package.json
            package-lock.json
            playwright.config.ts
            tests/e2e/ # Assuming tests are here
          retention-days: 1 # Only need for the next job

  run-e2e-tests:
    name: Run E2E Tests
    needs: deploy-staging
    runs-on: ubuntu-latest

    steps:
      # Download artifacts from deploy job
      - name: Download build/test artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          # No path specified, downloads to current directory

      # Ensure Node is available for subsequent steps
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Ensure consistent Node version

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Login to Supabase
        run: supabase login --access-token ${{ secrets.SUPABASE_CI_TOKEN }}

      - name: Download and Install Stripe CLI
        run: |
          curl -s https://api.github.com/repos/stripe/stripe-cli/releases/latest \
            | grep "browser_download_url.*linux_x86_64.tar.gz" \
            | cut -d '"' -f 4 \
            | wget -qi -
          tar -xf stripe-*.tar.gz
          sudo mv stripe /usr/local/bin/
          stripe version # Verify installation
          stripe login --api-key ${{ secrets.STRIPE_TEST_KEY }} # Login using the secret

      - name: Run E2E Tests
        id: e2e_tests
        continue-on-error: true
        run: |
          CYPRESS_BASE_URL=${{ needs.deploy-staging.outputs.PREVIEW_URL }} \
          SUPABASE_URL=${{ needs.deploy-staging.outputs.SUPABASE_URL }} \
          SUPABASE_ANON_KEY=${{ needs.deploy-staging.outputs.SUPABASE_ANON_KEY }} \
          SUPABASE_SERVICE_ROLE_KEY=${{ needs.deploy-staging.outputs.SUPABASE_SERVICE_ROLE_KEY }} \
          npm run e2e

          # Store exit code for next step
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-artifacts
          path: cypress/screenshots/
          retention-days: 7

      - name: Clean up on failure
        if: steps.e2e_tests.outputs.exit_code != '0'
        run: |
          echo "E2E tests failed. Cleaning up Supabase branch..."
          supabase db branch delete ${{ needs.deploy-staging.outputs.STAGING_BRANCH }} --project-ref ${{ env.SUPABASE_PROJECT_ID }} --yes
          echo "Supabase branch ${{ needs.deploy-staging.outputs.STAGING_BRANCH }} deleted."
          exit 1

      - name: Trigger Production Promotion
        if: steps.e2e_tests.outputs.exit_code == '0'
        run: |
          echo "E2E tests succeeded! Staging environment is ready for production promotion."
          # Trigger the production-promote workflow
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type": "promote-to-production", "client_payload": {"preview_url": "${{ needs.deploy-staging.outputs.PREVIEW_URL }}", "preview_id": "${{ needs.deploy-staging.outputs.PREVIEW_ID }}", "supabase_branch": "${{ needs.deploy-staging.outputs.STAGING_BRANCH }}"}}'
