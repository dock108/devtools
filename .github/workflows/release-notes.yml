name: Release Notes

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag: $TAG, Version: $VERSION"

      - name: Extract release notes from CHANGELOG.md
        id: extract_notes
        run: |
          # Extract the section from CHANGELOG.md that matches the version
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Start capture after the version header line, stop at the next ## or end of file
          NOTES=$(awk -v ver="$VERSION" '
            BEGIN { capture=0; notes=""; }
            /^## \[[0-9]+\.[0-9]+\.[0-9]+\]/ {
              if (capture) { exit; }
              if ($0 ~ "## \\[" ver "\\]") { 
                capture=1; 
                next; 
              }
            }
            {
              if (capture) { notes = notes $0 "\n"; }
            }
            END { print notes; }
          ' CHANGELOG.md)

          # If no notes found, provide default message
          if [ -z "$NOTES" ]; then
            NOTES="Release $VERSION

            No specific notes found in CHANGELOG.md for this version.
            Please see [CHANGELOG.md](CHANGELOG.md) for full history."
          fi

          # Escape GitHub Actions special characters in the notes
          NOTES="${NOTES//'%'/'%25'}"
          NOTES="${NOTES//$'\n'/'%0A'}"
          NOTES="${NOTES//$'\r'/'%0D'}"

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Extracted release notes:"
          echo "$NOTES"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.tag }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          body: ${{ steps.extract_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Check for Slack webhook
        id: check_slack
        run: |
          # Export a variable to determine if webhook exists
          echo "SLACK_WEBHOOK_EXISTS=false" >> $GITHUB_OUTPUT
          if [ -n "$SLACK_RELEASE_WEBHOOK" ]; then
            echo "SLACK_WEBHOOK_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::SLACK_RELEASE_WEBHOOK not set. To enable Slack notifications, add this secret in repository settings."
          fi
        env:
          SLACK_RELEASE_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}

      - name: Send release notes to Slack
        if: steps.check_slack.outputs.SLACK_WEBHOOK_EXISTS == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Extract a shorter version of the notes for Slack (500 chars max)
          NOTES=$(echo "${{ steps.extract_notes.outputs.notes }}" | head -c 500)
          if [ ${#NOTES} -eq 500 ]; then
            NOTES="${NOTES}... (see full notes on GitHub)"
          fi

          # Post to Slack
          RELEASE_URL="${{ steps.create_release.outputs.html_url }}"

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \":tada: *New Release: v$VERSION*\n$NOTES\n\n<$RELEASE_URL|View release on GitHub>\"
          }" ${{ secrets.SLACK_RELEASE_WEBHOOK }}
        env:
          SLACK_RELEASE_WEBHOOK: ${{ secrets.SLACK_RELEASE_WEBHOOK }}
