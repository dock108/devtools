\'use client\';\n\nimport { useState, useEffect } from \'react\';\nimport { Container } from \'@/components/Container\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport { Switch } from \"@/components/ui/switch\"\nimport { toast } from \'react-hot-toast\';\nimport { Loader2, Save } from \'lucide-react\';\nimport { Database } from \'@/types/supabase\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\n\n// Assuming settings table structure - adjust as needed\ntype Settings = Database[\'public\'][\'Tables\'][\'settings\'][\'Row\'];\n\n// Default settings structure if none found in DB\nconst defaultSettings: Partial<Settings> = {\n    id: \'global_settings\', // Use a fixed identifier if your table uses one\n    slack_webhook_url: \'\',\n    notification_emails: [],\n    slack_notifications_enabled: false,\n    email_notifications_enabled: false,\n};\n\nexport default function NotificationSettingsAdminPage() {\n  const [settings, setSettings] = useState<Partial<Settings>>(defaultSettings);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [emailInput, setEmailInput] = useState(\'\');\n\n  const fetchSettings = async () => {\n    setIsLoading(true);\n    try {\n      const res = await fetch(\'/api/admin/settings\');\n      if (!res.ok) throw new Error(\'Failed to fetch settings\');\n      const data = await res.json();\n      // Use fetched data or defaults if empty/error\n      const loadedSettings = data && Object.keys(data).length > 0 ? data : defaultSettings;\n      setSettings(loadedSettings);\n      setEmailInput((loadedSettings.notification_emails || []).join(\', \'));\n    } catch (error: any) {\n      toast.error(`Error fetching settings: ${error.message}`);\n      // Keep default settings on error\n      setSettings(defaultSettings);\n      setEmailInput(\'\');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setSettings(prev => ({\n      ...prev,\n      [name]: type === \'checkbox\' || e.target instanceof HTMLInputElement && e.target.role === \'switch\' ? checked : value,\n    }));\n  };\n\n    const handleSwitchChange = (checked: boolean, name: keyof Settings) => {\n        setSettings(prev => ({\n            ...prev,\n            [name]: checked,\n        }));\n    };\n\n  const handleEmailInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailInput(e.target.value);\n  };\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    // Basic validation for Slack URL (if provided)\n    if (settings.slack_webhook_url && !settings.slack_webhook_url.startsWith(\'https://hooks.slack.com/\')) {\n        toast.error(\'Invalid Slack Webhook URL format.\');\n        setIsSaving(false);\n        return;\n    }\n\n    // Parse and validate emails\n    const emails = emailInput\n      .split(\',\')\n      .map(email => email.trim())\n      .filter(email => email !== \'\' && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)); // Basic email regex\n\n    if (emailInput.trim() !== \'\' && emails.length === 0 && emailInput.split(\',\').map(e => e.trim()).filter(e => e !== \'\').length > 0) {\n        toast.error(\'One or more email addresses are invalid. Please use comma-separated valid emails.\');\n        setIsSaving(false);\n        return;\n    }\n\n    const payload = {\n        ...settings,\n        notification_emails: emails,\n        // Ensure the fixed ID is included if your upsert relies on it\n        id: settings.id || defaultSettings.id, \n    };\n\n    try {\n      const res = await fetch(\'/api/admin/settings\', {\n        method: \'PUT\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify(payload),\n      });\n\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.error || \'Failed to save settings\');\n      }\n\n      const updatedSettings = await res.json();\n      setSettings(updatedSettings);\n      setEmailInput((updatedSettings.notification_emails || []).join(\', \'));\n      toast.success(\'Settings saved successfully!\');\n    } catch (error: any) {\n      toast.error(`Save failed: ${error.message}`);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Container className=\"py-10\">\n        <div className=\"flex justify-center items-center h-40\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-slate-500\" />\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"py-10\">\n         <Card className=\"max-w-2xl mx-auto\">\n            <CardHeader>\n                <CardTitle>Notification Settings</CardTitle>\n                <CardDescription>Configure how and where Guardian sends alert notifications.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n                 {/* Slack Settings */}\n                 <div className=\"space-y-2\">\n                    <Label htmlFor=\"slack_webhook_url\" className=\"text-base font-semibold\">Slack Notifications</Label>\n                    <div className=\"flex items-center space-x-2\">\n                         <Switch\n                            id=\"slack_notifications_enabled\"\n                            checked={settings.slack_notifications_enabled ?? false}\n                            onCheckedChange={(checked) => handleSwitchChange(checked, \'slack_notifications_enabled\')}\n                            disabled={isSaving}\n                         />\n                         <Label htmlFor=\"slack_notifications_enabled\">Enable Slack Alerts</Label>\n                    </div>\n                    <Input\n                        id=\"slack_webhook_url\"\n                        name=\"slack_webhook_url\"\n                        type=\"url\"\n                        placeholder=\"https://hooks.slack.com/...\"\n                        value={settings.slack_webhook_url || \'\'}\n                        onChange={handleInputChange}\n                        disabled={isSaving || !settings.slack_notifications_enabled}\n                        className=\"mt-1\"\n                    />\n                    <p className=\"text-sm text-slate-500\">Enter the Incoming Webhook URL provided by Slack.</p>\n                 </div>\n\n                 {/* Email Settings */}\n                 <div className=\"space-y-2\">\n                    <Label htmlFor=\"notification_emails\" className=\"text-base font-semibold\">Email Notifications</Label>\n                     <div className=\"flex items-center space-x-2\">\n                         <Switch\n                            id=\"email_notifications_enabled\"\n                            checked={settings.email_notifications_enabled ?? false}\n                            onCheckedChange={(checked) => handleSwitchChange(checked, \'email_notifications_enabled\')}\n                            disabled={isSaving}\n                         />\n                         <Label htmlFor=\"email_notifications_enabled\">Enable Email Alerts</Label>\n                    </div>\n                    <Input\n                        id=\"notification_emails\"\n                        name=\"notification_emails\"\n                        type=\"text\" \n                        placeholder=\"ops@example.com, security@example.com\"\n                        value={emailInput}\n                        onChange={handleEmailInputChange}\n                        disabled={isSaving || !settings.email_notifications_enabled}\n                        className=\"mt-1\"\n                    />\n                     <p className=\"text-sm text-slate-500\">Enter comma-separated email addresses.</p>\n                 </div>\n\n                <div className=\"flex justify-end pt-4\">\n                    <Button onClick={handleSave} disabled={isSaving || isLoading}>\n                        {isSaving ? (\n                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        ) : (\n                            <Save className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Save Settings\n                    </Button>\n                </div>\n            </CardContent>\n         </Card>\n    </Container>\n  );\n}\n 