import { DemoCTA } from '@/components/blog/DemoCTA'; // Import the CTA component

---

title: "How Guardian Catches Stripe Payout Fraud Missed By Default Tools"
excerpt: "Stripe Radar is vital, but doesn't cover payout-specific fraud. Learn how Guardian uses focused rules for platform payout protection."
date: "2025-04-21"
updated: "2025-05-01"
tags: ["Stripe", "Fraud", "SaaS", "FinTech", "Security", "Payouts"]
image: "/images/blog/stripe-fraud-og.png"

---

## The Problem: Silent Payout Fraud on Stripe Connect

Stripe Connect enables platforms and marketplaces, but relying solely on Stripe Radar for fraud protection can leave a critical blind spot: **payout fraud**.

Early analysis revealed that sophisticated actors could potentially bypass standard card checks (Radar's focus) and exploit connected Express or Custom accounts. A common pattern involved linking compromised bank accounts, triggering payouts, and vanishing before detection. Such activity represents significant financial risk for platforms.

Radar excels at analyzing _incoming_ payments but offers less visibility into the nuances of _outgoing_ platform payouts.

## The Gap: Why Radar Isn't Sufficient for Payouts

- **Focus:** Radar primarily analyzes card transactions and associated signals (IP, device, card history).
- **Context:** It may lack deep context about a specific platform's typical payout patterns, user behavior variations, or the history of connected accounts (like sudden bank changes).
- **Payout Signals:** Signals crucial for payout fraud (e.g., payout velocity changes, destination bank account reputation, geographic mismatches between user activity and payout destination) aren't Radar's primary focus.

This gap can allow fraudulent actors to:

1.  **Age Accounts:** Create seemingly legitimate connected accounts and remain dormant.
2.  **Swap Banks:** Suddenly change the linked bank account to one they control.
3.  **Rapid Payouts:** Initiate large or multiple rapid payouts before the bank swap is flagged manually.
4.  **Disappear:** Cash out and abandon the compromised account.

## Guardian: A Focused Solution for Payout Risk

Guardian was built to address these payout-specific risk signals directly. Instead of duplicating Radar's functionality, Guardian concentrates on high-signal rules tailored to Connect payout patterns:

- **Payout Velocity Monitoring:** Detects sudden spikes in payout frequency or amount compared to the account's established history.
- **Bank Account Swap Detection:** Flags payouts occurring shortly after changes to the connected external bank account.
- **Geo-Mismatch Analysis:** Compares the IP address country of recent platform activity/charges with the payout destination country.

## Concise Rule Evaluation

The core rule evaluation logic can be concise. By leveraging Stripe's webhooks and maintaining focused state for each connected account, critical rules can be evaluated efficiently.

Here's a conceptual snippet illustrating a simplified velocity check:

```typescript
// Simplified conceptual example
import { PayoutEvent, AccountHistory } from './types'; // Assuming types are defined

const VELOCITY_THRESHOLD = 3; // Example: Max payouts allowed in window
const VELOCITY_WINDOW_SECONDS = 60 * 60; // Example: 1 hour window

function checkVelocityRule(event: PayoutEvent, history: AccountHistory): boolean {
  // Basic check: only evaluate successful payout events
  if (event.type !== 'payout.paid') {
    return false;
  }

  const eventTimestamp = new Date(event.created_at);
  const windowStart = new Date(eventTimestamp.getTime() - VELOCITY_WINDOW_SECONDS * 1000);

  // Filter recent successful payouts within the defined time window
  const recentPayouts = history.payouts.filter(
    (p) => new Date(p.created_at) >= windowStart && p.status === 'paid',
  );

  // Include the current event in the count
  const payoutCount = recentPayouts.length + 1;

  if (payoutCount > VELOCITY_THRESHOLD) {
    console.log(
      `ALERT: Velocity threshold exceeded for account ${event.account_id}. Count: ${payoutCount}`,
    );
    // In a real system, this would trigger an alert mechanism
    return true;
  }

  return false;
}
```

## Catching Fraud In Action

By monitoring these specific payout signals, Stripe Guardian identifies suspicious activity early, often _before_ funds leave the platform. Combined with configurable alert channels (like Slack and email) and features for handling critical alerts, it provides a crucial layer of security against payout fraud.

---

<DemoCTA
  href="/demo"
  label="View Live Demo"
  blurb="See Guardian spot a payout-velocity attack in real timeâ€”no sign-in required."
/>

```typescript
// Example code block
function checkPayout(payout) {
  if (payout.amount > DAILY_LIMIT) {
    console.log('Limit exceeded!');
  }
}
```

More content coming soon!
