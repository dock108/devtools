import { Registry, Counter, Histogram, Gauge, collectDefaultMetrics } from 'prom-client';

// Create a Registry which registers the metrics
export const register = new Registry();

// Enable default metrics collection (e.g., CPU, memory usage)
collectDefaultMetrics({ register });

// --- Define Custom Metrics ---

// Counter for total alerts generated, labeled by rule_id
export const alertsTotal = new Counter({
  name: 'guardian_alerts_total',
  help: 'Total number of alerts generated by the Guardian rule engine',
  labelNames: ['rule_id'],
  registers: [register],
});

// Counter for notifications processed, labeled by channel and status
export const notificationsSentTotal = new Counter({
  name: 'guardian_notifications_sent_total',
  help: 'Total number of notification send attempts',
  labelNames: ['channel', 'status'], // e.g., status: 'delivered', 'failed', 'retrying', 'not_configured'
  registers: [register],
});

// Histogram for webhook event processing duration
export const webhookEventDurationSeconds = new Histogram({
  name: 'guardian_webhook_event_duration_seconds',
  help: 'Duration of processing a single webhook event in the Guardian Reactor',
  labelNames: ['outcome'], // e.g., outcome: 'success', 'skipped', 'error', 'dlq'
  // Buckets in seconds (e.g., 0.1s, 0.5s, 1s, 2s, 5s, 10s)
  buckets: [0.1, 0.5, 1, 2, 5, 10],
  registers: [register],
});

// Gauge for currently active backfill jobs (needs instrumentation where backfills run)
export const activeBackfills = new Gauge({
  name: 'guardian_active_backfills',
  help: 'Number of currently active backfill processes',
  // labelNames: ['type'], // Optional: if different types of backfills exist
  registers: [register],
});

// Gauge for the timestamp of the last successful retention job run
export const retentionLastRunTimestampSeconds = new Gauge({
  name: 'guardian_retention_last_run_timestamp_seconds',
  help: 'Timestamp of the last successful run of the data retention job (Unix Epoch seconds)',
  registers: [register],
});

// Counter for total events processed by the reactor, labeled by outcome
export const reactorEventsTotal = new Counter({
  name: 'guardian_reactor_events_total',
  help: 'Total number of events processed by the Guardian Reactor',
  labelNames: ['outcome'], // success, skipped_duplicate, error, dlq_error, idempotency_error, critical_error
  registers: [register],
});

// --- End Custom Metrics ---

console.log('Prometheus metrics registry initialized.');
